{
  "rules": [
    {
      "name": "MISRA C-2023 Directive 1.1",
      "category": "Required",
      "description": "Any implementation-defined behaviour on which the output of the program depends shall be documented and understood"
    },
    {
      "name": "MISRA C-2023 Directive 2.1",
      "category": "Required",
      "description": "All source files shall compile without any compilation errors"
    },
    {
      "name": "MISRA C-2023 Directive 3.1",
      "category": "Required",
      "description": "All code shall be traceable to documented requirements"
    },
    {
      "name": "MISRA C-2023 Directive 4.1",
      "category": "Required",
      "description": "Run-time failures shall be minimized"
    },
    {
      "name": "MISRA C-2023 Directive 4.2",
      "category": "Advisory",
      "description": "All usage of assembly language should be documented"
    },
    {
      "name": "MISRA C-2023 Directive 4.3",
      "category": "Required",
      "description": "Assembly language shall be encapsulated and isolated"
    },
    {
      "name": "MISRA C-2023 Directive 4.4",
      "category": "Advisory",
      "description": "Sections of code should not be \"commented out\""
    },
    {
      "name": "MISRA C-2023 Directive 4.5",
      "category": "Advisory",
      "description": "Identifiers in the same name space with overlapping visibility should be typographically unambiguous"
    },
    {
      "name": "MISRA C-2023 Directive 4.6",
      "category": "Advisory",
      "description": "typedefs that indicate size and signedness should be used in place of the basic numerical types"
    },
    {
      "name": "MISRA C-2023 Directive 4.7",
      "category": "Required",
      "description": "If a function returns error information, then that error information shall be tested"
    },
    {
      "name": "MISRA C-2023 Directive 4.8",
      "category": "Advisory",
      "description": "If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden"
    },
    {
      "name": "MISRA C-2023 Directive 4.9",
      "category": "Advisory",
      "description": "A function should be used in preference to a function-like macro where they are interchangeable"
    },
    {
      "name": "MISRA C-2023 Directive 4.10",
      "category": "Required",
      "description": "Precautions shall be taken in order to prevent the contents of a header file being included more than once"
    },
    {
      "name": "MISRA C-2023 Directive 4.11",
      "category": "Required",
      "description": "The validity of values passed to library functions shall be checked"
    },
    {
      "name": "MISRA C-2023 Directive 4.12",
      "category": "Required",
      "description": "Dynamic memory allocation shall not be used"
    },
    {
      "name": "MISRA C-2023 Directive 4.13",
      "category": "Advisory",
      "description": "Functions which are designed to provide operations on a resource should be called in an appropriate sequence"
    },
    {
      "name": "MISRA C-2023 Directive 4.14",
      "category": "Required",
      "description": "The validity of values received from external sources shall be checked"
    },
    {
      "name": "MISRA C-2023 Rule 1.1",
      "category": "Required",
      "description": "The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits"
    },
    {
      "name": "MISRA C-2023 Rule 1.2",
      "category": "Advisory",
      "description": "Language extensions should not be used"
    },
    {
      "name": "MISRA C-2023 Rule 1.3",
      "category": "Required",
      "description": "There shall be no occurrence of undefined or critical unspecified behaviour"
    },
    {
      "name": "MISRA C-2023 Rule 2.1",
      "category": "Required",
      "description": "A project shall not contain unreachable code"
    },
    {
      "name": "MISRA C-2023 Rule 2.2",
      "category": "Required",
      "description": "There shall be no dead code"
    },
    {
      "name": "MISRA C-2023 Rule 2.3",
      "category": "Advisory",
      "description": "A project should not contain unused type declarations"
    },
    {
      "name": "MISRA C-2023 Rule 2.4",
      "category": "Advisory",
      "description": "A project should not contain unused tag declarations"
    },
    {
      "name": "MISRA C-2023 Rule 2.5",
      "category": "Advisory",
      "description": "A project should not contain unused macro declarations"
    },
    {
      "name": "MISRA C-2023 Rule 2.6",
      "category": "Advisory",
      "description": "A function should not contain unused label declarations"
    },
    {
      "name": "MISRA C-2023 Rule 2.7",
      "category": "Advisory",
      "description": "There should be no unused parameters in functions"
    },
    {
      "name": "MISRA C-2023 Rule 3.1",
      "category": "Required",
      "description": "The character sequences /* and // shall not be used within a comment"
    },
    {
      "name": "MISRA C-2023 Rule 3.2",
      "category": "Required",
      "description": "Line-splicing shall not be used in // comments"
    },
    {
      "name": "MISRA C-2023 Rule 4.1",
      "category": "Required",
      "description": "Octal and hexadecimal escape sequences shall be terminated"
    },
    {
      "name": "MISRA C-2023 Rule 4.2",
      "category": "Advisory",
      "description": "Trigraphs should not be used"
    },
    {
      "name": "MISRA C-2023 Rule 5.1",
      "category": "Required",
      "description": "External identifiers shall be distinct"
    },
    {
      "name": "MISRA C-2023 Rule 5.2",
      "category": "Required",
      "description": "Identifiers declared in the same scope and name space shall be distinct"
    },
    {
      "name": "MISRA C-2023 Rule 5.3",
      "category": "Required",
      "description": "An identifier declared in an inner scope shall not hide an identifier declared in an outer scope"
    },
    {
      "name": "MISRA C-2023 Rule 5.4",
      "category": "Required",
      "description": "Macro identifiers shall be distinct"
    },
    {
      "name": "MISRA C-2023 Rule 5.5",
      "category": "Required",
      "description": "Identifiers shall be distinct from macro names"
    },
    {
      "name": "MISRA C-2023 Rule 5.6",
      "category": "Required",
      "description": "A typedef name shall be a unique identifier"
    },
    {
      "name": "MISRA C-2023 Rule 5.7",
      "category": "Required",
      "description": "A tag name shall be a unique identifier"
    },
    {
      "name": "MISRA C-2023 Rule 5.8",
      "category": "Required",
      "description": "Identifiers that define objects or functions with external linkage shall be unique"
    },
    {
      "name": "MISRA C-2023 Rule 5.9",
      "category": "Advisory",
      "description": "Identifiers that define objects or functions with internal linkage should be unique"
    },
    {
      "name": "MISRA C-2023 Rule 6.1",
      "category": "Required",
      "description": "Bit-fields shall only be declared with an appropriate type"
    },
    {
      "name": "MISRA C-2023 Rule 6.2",
      "category": "Required",
      "description": "Single-bit named bit fields shall not be of a signed type"
    },
    {
      "name": "MISRA C-2023 Rule 7.1",
      "category": "Required",
      "description": "Octal constants shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 7.2",
      "category": "Required",
      "description": "A \"u\" or \"U\" suffix shall be applied to all integer constants that are represented in an unsigned type"
    },
    {
      "name": "MISRA C-2023 Rule 7.3",
      "category": "Required",
      "description": "The lowercase character \"l\" shall not be used in a literal suffix"
    },
    {
      "name": "MISRA C-2023 Rule 7.4",
      "category": "Required",
      "description": "A string literal shall not be assigned to an object unless the object's type is \"pointer to const-qualified char\""
    },
    {
      "name": "MISRA C-2023 Rule 8.1",
      "category": "Required",
      "description": "Types shall be explicitly specified"
    },
    {
      "name": "MISRA C-2023 Rule 8.2",
      "category": "Required",
      "description": "Function types shall be in prototype form with named parameters"
    },
    {
      "name": "MISRA C-2023 Rule 8.3",
      "category": "Required",
      "description": "All declarations of an object or function shall use the same names and type qualifiers"
    },
    {
      "name": "MISRA C-2023 Rule 8.4",
      "category": "Required",
      "description": "A compatible declaration shall be visible when an object or function with external linkage is defined"
    },
    {
      "name": "MISRA C-2023 Rule 8.5",
      "category": "Required",
      "description": "An external object or function shall be declared once in one and only one file"
    },
    {
      "name": "MISRA C-2023 Rule 8.6",
      "category": "Required",
      "description": "An identifier with external linkage shall have exactly one external definition"
    },
    {
      "name": "MISRA C-2023 Rule 8.7",
      "category": "Advisory",
      "description": "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit"
    },
    {
      "name": "MISRA C-2023 Rule 8.8",
      "category": "Required",
      "description": "The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage"
    },
    {
      "name": "MISRA C-2023 Rule 8.9",
      "category": "Advisory",
      "description": "An object should be defined at block scope if its identifier only appears in a single function"
    },
    {
      "name": "MISRA C-2023 Rule 8.10",
      "category": "Required",
      "description": "An inline function shall be declared with the static storage class"
    },
    {
      "name": "MISRA C-2023 Rule 8.11",
      "category": "Advisory",
      "description": "When an array with external linkage is declared, its size should be explicitly specified"
    },
    {
      "name": "MISRA C-2023 Rule 8.12",
      "category": "Required",
      "description": "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique"
    },
    {
      "name": "MISRA C-2023 Rule 8.13",
      "category": "Advisory",
      "description": "A pointer should point to a const-qualified type whenever possible"
    },
    {
      "name": "MISRA C-2023 Rule 8.14",
      "category": "Required",
      "description": "The restrict type qualifier shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 9.1",
      "category": "Mandatory",
      "description": "The value of an object with automatic storage duration shall not be read before it has been set"
    },
    {
      "name": "MISRA C-2023 Rule 9.2",
      "category": "Required",
      "description": "The initializer for an aggregate or union shall be enclosed in braces"
    },
    {
      "name": "MISRA C-2023 Rule 9.3",
      "category": "Required",
      "description": "Arrays shall not be partially initialized"
    },
    {
      "name": "MISRA C-2023 Rule 9.4",
      "category": "Required",
      "description": "An element of an object shall not be initialized more than once"
    },
    {
      "name": "MISRA C-2023 Rule 9.5",
      "category": "Required",
      "description": "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly"
    },
    {
      "name": "MISRA C-2023 Rule 10.1",
      "category": "Required",
      "description": "Operands shall not be of an inappropriate essential type"
    },
    {
      "name": "MISRA C-2023 Rule 10.2",
      "category": "Required",
      "description": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations"
    },
    {
      "name": "MISRA C-2023 Rule 10.3",
      "category": "Required",
      "description": "The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category"
    },
    {
      "name": "MISRA C-2023 Rule 10.4",
      "category": "Required",
      "description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category"
    },
    {
      "name": "MISRA C-2023 Rule 10.5",
      "category": "Advisory",
      "description": "The value of an expression should not be cast to an inappropriate essential type"
    },
    {
      "name": "MISRA C-2023 Rule 10.6",
      "category": "Required",
      "description": "The value of a composite expression shall not be assigned to an object with wider essential type"
    },
    {
      "name": "MISRA C-2023 Rule 10.7",
      "category": "Required",
      "description": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type"
    },
    {
      "name": "MISRA C-2023 Rule 10.8",
      "category": "Required",
      "description": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type"
    },
    {
      "name": "MISRA C-2023 Rule 11.1",
      "category": "Required",
      "description": "Conversions shall not be performed between a pointer to a function and any other type"
    },
    {
      "name": "MISRA C-2023 Rule 11.2",
      "category": "Required",
      "description": "Conversions shall not be performed between a pointer to an incomplete type and any other type"
    },
    {
      "name": "MISRA C-2023 Rule 11.3",
      "category": "Required",
      "description": "A cast shall not be performed between a pointer to object type and a pointer to a different object type"
    },
    {
      "name": "MISRA C-2023 Rule 11.4",
      "category": "Advisory",
      "description": "A conversion should not be performed between a pointer to object and an integer type"
    },
    {
      "name": "MISRA C-2023 Rule 11.5",
      "category": "Advisory",
      "description": "A conversion should not be performed from pointer to void into pointer to object"
    },
    {
      "name": "MISRA C-2023 Rule 11.6",
      "category": "Required",
      "description": "A cast shall not be performed between pointer to void and an arithmetic type"
    },
    {
      "name": "MISRA C-2023 Rule 11.7",
      "category": "Required",
      "description": "A cast shall not be performed between pointer to object and a non- integer arithmetic type"
    },
    {
      "name": "MISRA C-2023 Rule 11.8",
      "category": "Required",
      "description": "A cast shall not remove any const or volatile qualification from the type pointed to by a pointer"
    },
    {
      "name": "MISRA C-2023 Rule 11.9",
      "category": "Required",
      "description": "The macro NULL shall be the only permitted form of integer null pointer constant"
    },
    {
      "name": "MISRA C-2023 Rule 12.1",
      "category": "Advisory",
      "description": "The precedence of operators within expressions should be made explicit"
    },
    {
      "name": "MISRA C-2023 Rule 12.2",
      "category": "Required",
      "description": "The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand"
    },
    {
      "name": "MISRA C-2023 Rule 12.3",
      "category": "Advisory",
      "description": "The comma operator should not be used"
    },
    {
      "name": "MISRA C-2023 Rule 12.4",
      "category": "Advisory",
      "description": "Evaluation of constant expressions should not lead to unsigned integer wrap-around"
    },
    {
      "name": "MISRA C-2023 Rule 12.5",
      "category": "Mandatory",
      "description": "The sizeof operator shall not have an operand which is a function parameter declared as \"array of type\""
    },
    {
      "name": "MISRA C-2023 Rule 13.1",
      "category": "Required",
      "description": "Initializer lists shall not contain persistent side effects"
    },
    {
      "name": "MISRA C-2023 Rule 13.2",
      "category": "Required",
      "description": "The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders"
    },
    {
      "name": "MISRA C-2023 Rule 13.3",
      "category": "Advisory",
      "description": "A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator"
    },
    {
      "name": "MISRA C-2023 Rule 13.4",
      "category": "Advisory",
      "description": "The result of an assignment operator should not be used"
    },
    {
      "name": "MISRA C-2023 Rule 13.5",
      "category": "Required",
      "description": "The right hand operand of a logical && or || operator shall not contain persistent side effects"
    },
    {
      "name": "MISRA C-2023 Rule 13.6",
      "category": "Mandatory",
      "description": "The operand of the sizeof operator shall not contain any expression which has potential side effects"
    },
    {
      "name": "MISRA C-2023 Rule 14.1",
      "category": "Required",
      "description": "A loop counter shall not have essentially floating type"
    },
    {
      "name": "MISRA C-2023 Rule 14.2",
      "category": "Required",
      "description": "A for loop shall be well-formed"
    },
    {
      "name": "MISRA C-2023 Rule 14.3",
      "category": "Required",
      "description": "Controlling expressions shall not be invariant"
    },
    {
      "name": "MISRA C-2023 Rule 14.4",
      "category": "Required",
      "description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type"
    },
    {
      "name": "MISRA C-2023 Rule 15.1",
      "category": "Advisory",
      "description": "The goto statement should not be used"
    },
    {
      "name": "MISRA C-2023 Rule 15.2",
      "category": "Required",
      "description": "The goto statement shall jump to a label declared later in the same function"
    },
    {
      "name": "MISRA C-2023 Rule 15.3",
      "category": "Required",
      "description": "Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement"
    },
    {
      "name": "MISRA C-2023 Rule 15.4",
      "category": "Advisory",
      "description": "There should be no more than one break or goto statement used to terminate any iteration statement"
    },
    {
      "name": "MISRA C-2023 Rule 15.5",
      "category": "Advisory",
      "description": "A function should have a single point of exit at the end"
    },
    {
      "name": "MISRA C-2023 Rule 15.6",
      "category": "Required",
      "description": "The body of an iteration-statement or a selection-statement shall be a compound-statement"
    },
    {
      "name": "MISRA C-2023 Rule 15.7",
      "category": "Required",
      "description": "All if ... else if constructs shall be terminated with an else statement"
    },
    {
      "name": "MISRA C-2023 Rule 16.1",
      "category": "Required",
      "description": "All switch statements shall be well-formed"
    },
    {
      "name": "MISRA C-2023 Rule 16.2",
      "category": "Required",
      "description": "A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement"
    },
    {
      "name": "MISRA C-2023 Rule 16.3",
      "category": "Required",
      "description": "An unconditional break statement shall terminate every switch-clause"
    },
    {
      "name": "MISRA C-2023 Rule 16.4",
      "category": "Required",
      "description": "Every switch statement shall have a default label"
    },
    {
      "name": "MISRA C-2023 Rule 16.5",
      "category": "Required",
      "description": "A default label shall appear as either the first or the last switch label of a switch statement"
    },
    {
      "name": "MISRA C-2023 Rule 16.6",
      "category": "Required",
      "description": "Every switch statement shall have at least two switch-clauses"
    },
    {
      "name": "MISRA C-2023 Rule 16.7",
      "category": "Required",
      "description": "A switch-expression shall not have essentially Boolean type"
    },
    {
      "name": "MISRA C-2023 Rule 17.1",
      "category": "Required",
      "description": "The features of <stdarg.h> shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 17.2",
      "category": "Required",
      "description": "Functions shall not call themselves, either directly or indirectly"
    },
    {
      "name": "MISRA C-2023 Rule 17.3",
      "category": "Mandatory",
      "description": "A function shall not be declared implicitly"
    },
    {
      "name": "MISRA C-2023 Rule 17.4",
      "category": "Mandatory",
      "description": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression"
    },
    {
      "name": "MISRA C-2023 Rule 17.5",
      "category": "Advisory",
      "description": "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements"
    },
    {
      "name": "MISRA C-2023 Rule 17.6",
      "category": "Mandatory",
      "description": "The declaration of an array parameter shall not contain the static keyword between the [ ]"
    },
    {
      "name": "MISRA C-2023 Rule 17.7",
      "category": "Required",
      "description": "The value returned by a function having non-void return type shall be used"
    },
    {
      "name": "MISRA C-2023 Rule 17.8",
      "category": "Advisory",
      "description": "A function parameter should not be modified"
    },
    {
      "name": "MISRA C-2023 Rule 18.1",
      "category": "Required",
      "description": "A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand"
    },
    {
      "name": "MISRA C-2023 Rule 18.2",
      "category": "Required",
      "description": "Subtraction between pointers shall only be applied to pointers that address elements of the same array"
    },
    {
      "name": "MISRA C-2023 Rule 18.3",
      "category": "Required",
      "description": "The relational operators >, >=, < and <= shall not be applied to objects of pointer type except where they point into the same object"
    },
    {
      "name": "MISRA C-2023 Rule 18.4",
      "category": "Advisory",
      "description": "The +, -, += and -= operators should not be applied to an expression of pointer type"
    },
    {
      "name": "MISRA C-2023 Rule 18.5",
      "category": "Advisory",
      "description": "Declarations should contain no more than two levels of pointer nesting"
    },
    {
      "name": "MISRA C-2023 Rule 18.6",
      "category": "Required",
      "description": "The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist"
    },
    {
      "name": "MISRA C-2023 Rule 18.7",
      "category": "Required",
      "description": "Flexible array members shall not be declared"
    },
    {
      "name": "MISRA C-2023 Rule 18.8",
      "category": "Required",
      "description": "Variable-length array types shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 19.1",
      "category": "Mandatory",
      "description": "An object shall not be assigned or copied to an overlapping object"
    },
    {
      "name": "MISRA C-2023 Rule 19.2",
      "category": "Advisory",
      "description": "The union keyword should not be used"
    },
    {
      "name": "MISRA C-2023 Rule 20.1",
      "category": "Advisory",
      "description": "#include directives should only be preceded by preprocessor directives or comments"
    },
    {
      "name": "MISRA C-2023 Rule 20.2",
      "category": "Required",
      "description": "The ', \" or \\ characters and the /* or // character sequences shall not occur in a header file name"
    },
    {
      "name": "MISRA C-2023 Rule 20.3",
      "category": "Required",
      "description": "The #include directive shall be followed by either a <filename> or \"filename\" sequence"
    },
    {
      "name": "MISRA C-2023 Rule 20.4",
      "category": "Required",
      "description": "A macro shall not be defined with the same name as a keyword"
    },
    {
      "name": "MISRA C-2023 Rule 20.5",
      "category": "Advisory",
      "description": "#undef should not be used"
    },
    {
      "name": "MISRA C-2023 Rule 20.6",
      "category": "Required",
      "description": "Tokens that look like a preprocessing directive shall not occur within a macro argument"
    },
    {
      "name": "MISRA C-2023 Rule 20.7",
      "category": "Required",
      "description": "Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses"
    },
    {
      "name": "MISRA C-2023 Rule 20.8",
      "category": "Required",
      "description": "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1"
    },
    {
      "name": "MISRA C-2023 Rule 20.9",
      "category": "Required",
      "description": "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation"
    },
    {
      "name": "MISRA C-2023 Rule 20.10",
      "category": "Advisory",
      "description": "The # and ## preprocessor operators should not be used"
    },
    {
      "name": "MISRA C-2023 Rule 20.11",
      "category": "Required",
      "description": "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator"
    },
    {
      "name": "MISRA C-2023 Rule 20.12",
      "category": "Required",
      "description": "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators"
    },
    {
      "name": "MISRA C-2023 Rule 20.13",
      "category": "Required",
      "description": "A line whose first token is # shall be a valid preprocessing directive"
    },
    {
      "name": "MISRA C-2023 Rule 20.14",
      "category": "Required",
      "description": "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related"
    },
    {
      "name": "MISRA C-2023 Rule 21.1",
      "category": "Required",
      "description": "#define and #undef shall not be used on a reserved identifier or reserved macro name"
    },
    {
      "name": "MISRA C-2023 Rule 21.2",
      "category": "Required",
      "description": "A reserved identifier or reserved macro name shall not be declared"
    },
    {
      "name": "MISRA C-2023 Rule 21.3",
      "category": "Required",
      "description": "The memory allocation and deallocation functions of <stdlib.h> shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 21.4",
      "category": "Required",
      "description": "The standard header file <setjmp.h> shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 21.5",
      "category": "Required",
      "description": "The standard header file <signal.h> shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 21.6",
      "category": "Required",
      "description": "The Standard Library input/output functions shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 21.7",
      "category": "Required",
      "description": "The Standard Library functions atof, atoi, atol and atoll functions of <stdlib.h> shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 21.8",
      "category": "Required",
      "description": "The Standard Library functions abort, exit, getenv and system of <stdlib.h> shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 21.9",
      "category": "Required",
      "description": "The Standard Library functions bsearch and qsort of <stdlib.h> shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 21.10",
      "category": "Required",
      "description": "The Standard Library time and date functions shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 21.11",
      "category": "Required",
      "description": "The standard header file <tgmath.h> shall not be used"
    },
    {
      "name": "MISRA C-2023 Rule 21.12",
      "category": "Advisory",
      "description": "The exception handling features of <fenv.h> should not be used"
    },
    {
      "name": "MISRA C-2023 Rule 21.13",
      "category": "Mandatory",
      "description": "Any value passed to a function in <ctype.h> shall be representable as an unsigned char or be the value EOF"
    },
    {
      "name": "MISRA C-2023 Rule 21.14",
      "category": "Required",
      "description": "The Standard Library function memcmp shall not be used to compare null terminated strings"
    },
    {
      "name": "MISRA C-2023 Rule 21.15",
      "category": "Required",
      "description": "The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types"
    },
    {
      "name": "MISRA C-2023 Rule 21.16",
      "category": "Required",
      "description": "The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type"
    },
    {
      "name": "MISRA C-2023 Rule 21.17",
      "category": "Mandatory",
      "description": "Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters"
    },
    {
      "name": "MISRA C-2023 Rule 21.18",
      "category": "Mandatory",
      "description": "The size_t argument passed to any function in <string.h> shall have an appropriate value"
    },
    {
      "name": "MISRA C-2023 Rule 21.19",
      "category": "Mandatory",
      "description": "The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type"
    },
    {
      "name": "MISRA C-2023 Rule 21.20",
      "category": "Mandatory",
      "description": "The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function"
    },
    {
      "name": "MISRA C-2023 Rule 22.1",
      "category": "Required",
      "description": "All resources obtained dynamically by means of Standard Library functions shall be explicitly released"
    },
    {
      "name": "MISRA C-2023 Rule 22.2",
      "category": "Mandatory",
      "description": "A block of memory shall only be freed if it was allocated by means of a Standard Library function"
    },
    {
      "name": "MISRA C-2023 Rule 22.3",
      "category": "Required",
      "description": "The same file shall not be open for read and write access at the same time on different streams"
    },
    {
      "name": "MISRA C-2023 Rule 22.4",
      "category": "Mandatory",
      "description": "There shall be no attempt to write to a stream which has been opened as read-only"
    },
    {
      "name": "MISRA C-2023 Rule 22.5",
      "category": "Mandatory",
      "description": "A pointer to a FILE object shall not be dereferenced"
    },
    {
      "name": "MISRA C-2023 Rule 22.6",
      "category": "Mandatory",
      "description": "The value of a pointer to a FILE shall not be used after the associated stream has been closed"
    },
    {
      "name": "MISRA C-2023 Rule 22.7",
      "category": "Required",
      "description": "The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF"
    },
    {
      "name": "MISRA C-2023 Rule 22.8",
      "category": "Required",
      "description": "The value of errno shall be set to zero prior to a call to an errno-setting- function"
    },
    {
      "name": "MISRA C-2023 Rule 22.9",
      "category": "Required",
      "description": "The value of errno shall be tested against zero after calling an errno- setting-function"
    },
    {
      "name": "MISRA C-2023 Rule 22.10",
      "category": "Required",
      "description": "The value of errno shall only be tested when the last function to be called was an errno-setting-function"
    }
  ]
}
