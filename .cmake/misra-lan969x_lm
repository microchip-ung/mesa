#!/usr/bin/env ruby

# Copyright (c) 2004-2020 Microchip Technology Inc. and its subsidiaries.
# SPDX-License-Identifier: MIT

require 'pp'
require 'json'
require 'open3'
require 'pathname'
require 'optparse'

def run cmd, flags = []
  if $verbose
    STDOUT.print "RUN: #{cmd}"
    STDOUT.flush
  end

  a = Time.now
  o, e, s = Open3.capture3(cmd)
  b = Time.now

  if $verbose
    STDOUT.print " -> #{s} in %1.3fs\n" % [b - a]
    STDOUT.flush
  end

  failed = false
  if s.to_i != 0 and not flags.include? :allow_non_zero_return
    failed = true
  end

  if e.size > 0 and not flags.include? :allow_std_err
    failed = true
  end


  if failed
    raise "CMD: #{cmd} status: #{s.to_i}, std-err: #{e}"
  end

  return o, e, s
end

def cd path
  puts "cd #{path}  (was: #{Dir.pwd})" if $verbose
  Dir.chdir(path)
  puts "# new path: #{Dir.pwd}" if $verbose
end

def sys cmd, flags = []
  if $verbose
    puts "Running: #{cmd}"
  end

  a = Time.now
  system cmd
  b = Time.now

  if $verbose
    STDOUT.print " -> #{$?} in %1.3fs\n" % [b - a]
    STDOUT.flush
  end

  failed = false
  if $?.to_i != 0 and not flags.include? :allow_non_zero_return
    failed = true
  end

  if failed
    raise "CMD: #{cmd} status: #{$?.to_i}"
  end
end

$top = File.dirname(File.dirname(File.expand_path(__FILE__)))
cd $top

$opt = { }
global = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"

  opts.on("-c", "--clean", "Do clean start") do
    $clean = true
  end

  opts.on("-v", "--verbose", "Enable verbose printing") do
    $verbose = true
  end

end.order!

$verbose = true

if $clean
  run "rm -rf misra-lan969x-lm"
end

u = JSON.load_file(".cmake/deps-lmstax.json").first["generic-file-url"]

puts "org env"
puts run "env"

puts "Using: #{u}"
sys "curl --show-error --fail \"#{u}\" -o lm.tar.gz"
run "mkdir lm"
run "tar -C lm -xf lm.tar.gz"
run "rm -rf lm/third-party/mesa"
run "mkdir lm/third-party/mesa"
run "tar -C lm/third-party/mesa -xf ws.tar"

puts "new env"
sys ".cmake/chenv -l support/scripts -p lm -- env"
sys ".cmake/chenv -l support/scripts -p lm -- pwd"
sys ".cmake/chenv -l support/scripts -p lm -- bc2cbor --help"
sys ".cmake/chenv -l support/scripts -p lm -- cmake --workflow --preset lan969x"
sys ".cmake/chenv -l support/scripts -p lm -- lm-cov-runner -b build-lan969x -t VDSP_BIN_LAN969x_AUTO_elf"

