// Copyright (c) 2004-2020 Microchip Technology Inc. and its subsidiaries.
// SPDX-License-Identifier: MIT

#ifndef _LAN80XX_MALIBU25G_REGS_HOST_PCS25G_H_
#define _LAN80XX_MALIBU25G_REGS_HOST_PCS25G_H_

#include "regs_lan8042_common.h"

/***********************************************************************
 *
 * Target: \a HOST_PCS25G
 *
 * PCS Control, Configuration and Status Registers; All registers are 16-bit
 * wide only.
 *
 ***********************************************************************/

/**
 * Register Group: \a HOST_PCS25G:PCS_REGISTERS
 *
 * PCS Control Registers.
 */


/**
 * \brief PCS Control.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:CONTROL1
 */
#define LAN80XX_HOST_PCS25G_CONTROL1            LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x0)

/**
 * \brief
 * 0101=25G; 0000=10G. Read value depends on currently active
 * configuration. When FEC91 is turn on or HI_BER25(VENDOR_PCS_MODE
 * register bit2) is set to 1, PCS run with 25G. When FEC91 is off and
 * HI_BER25 is 0, PCS run with 10G.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_CONTROL1 . SPEED_SELECTION
 */
#define  LAN80XX_F_HOST_PCS25G_CONTROL1_SPEED_SELECTION(x)  LAN80XX_ENCODE_BITFIELD(x,2,4)
#define  LAN80XX_M_HOST_PCS25G_CONTROL1_SPEED_SELECTION     LAN80XX_ENCODE_BITMASK(2,4)
#define  LAN80XX_X_HOST_PCS25G_CONTROL1_SPEED_SELECTION(x)  LAN80XX_EXTRACT_BITFIELD(x,2,4)

/**
 * \brief
 * Always 1.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_CONTROL1 . SPEED_ALWAYS1
 */
#define  LAN80XX_F_HOST_PCS25G_CONTROL1_SPEED_ALWAYS1(x)  LAN80XX_ENCODE_BITFIELD(!!(x),6,1)
#define  LAN80XX_M_HOST_PCS25G_CONTROL1_SPEED_ALWAYS1  LAN80XX_BIT(6)
#define  LAN80XX_X_HOST_PCS25G_CONTROL1_SPEED_ALWAYS1(x)  LAN80XX_EXTRACT_BITFIELD(x,6,1)

/**
 * \brief
 * 0=normal operation (Always 0).
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_CONTROL1 . LOW_POWER
 */
#define  LAN80XX_F_HOST_PCS25G_CONTROL1_LOW_POWER(x)  LAN80XX_ENCODE_BITFIELD(!!(x),11,1)
#define  LAN80XX_M_HOST_PCS25G_CONTROL1_LOW_POWER  LAN80XX_BIT(11)
#define  LAN80XX_X_HOST_PCS25G_CONTROL1_LOW_POWER(x)  LAN80XX_EXTRACT_BITFIELD(x,11,1)

/**
 * \brief
 * Always 1.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_CONTROL1 . SPEED_SELECT_ALWAYS1
 */
#define  LAN80XX_F_HOST_PCS25G_CONTROL1_SPEED_SELECT_ALWAYS1(x)  LAN80XX_ENCODE_BITFIELD(!!(x),13,1)
#define  LAN80XX_M_HOST_PCS25G_CONTROL1_SPEED_SELECT_ALWAYS1  LAN80XX_BIT(13)
#define  LAN80XX_X_HOST_PCS25G_CONTROL1_SPEED_SELECT_ALWAYS1(x)  LAN80XX_EXTRACT_BITFIELD(x,13,1)

/**
 * \brief
 * 1=Enable loopback, 0=disable loopback.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_CONTROL1 . LOOPBACK
 */
#define  LAN80XX_F_HOST_PCS25G_CONTROL1_LOOPBACK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),14,1)
#define  LAN80XX_M_HOST_PCS25G_CONTROL1_LOOPBACK  LAN80XX_BIT(14)
#define  LAN80XX_X_HOST_PCS25G_CONTROL1_LOOPBACK(x)  LAN80XX_EXTRACT_BITFIELD(x,14,1)

/**
 * \brief
 * 1=PCS reset, 0=normal; Self clear.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_CONTROL1 . RESET
 */
#define  LAN80XX_F_HOST_PCS25G_CONTROL1_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),15,1)
#define  LAN80XX_M_HOST_PCS25G_CONTROL1_RESET    LAN80XX_BIT(15)
#define  LAN80XX_X_HOST_PCS25G_CONTROL1_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,15,1)


/**
 * \brief PCS Status.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:STATUS1
 */
#define LAN80XX_HOST_PCS25G_STATUS1             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x1)

/**
 * \brief
 * When 1, indicates that the PCS implements a low power mode.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS1 . LOW_POWER_ABILITY
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS1_LOW_POWER_ABILITY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS1_LOW_POWER_ABILITY  LAN80XX_BIT(1)
#define  LAN80XX_X_HOST_PCS25G_STATUS1_LOW_POWER_ABILITY(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * When 1, indicates PCS receive link up; When 0, indicates PCS receive
 * link is or was down (latching low).
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS1 . PCS_RECEIVE_LINK
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS1_PCS_RECEIVE_LINK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS1_PCS_RECEIVE_LINK  LAN80XX_BIT(2)
#define  LAN80XX_X_HOST_PCS25G_STATUS1_PCS_RECEIVE_LINK(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * When 1, indicates a fault condition detected; When 0, indicates that no
 * fault condition is detected.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS1 . FAULT
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS1_FAULT(x)  LAN80XX_ENCODE_BITFIELD(!!(x),7,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS1_FAULT     LAN80XX_BIT(7)
#define  LAN80XX_X_HOST_PCS25G_STATUS1_FAULT(x)  LAN80XX_EXTRACT_BITFIELD(x,7,1)

/**
 * \brief
 * 1: receive is currently in LPI state; 0: normal operation.

 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS1 . RX_LPI_ACTIVE
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS1_RX_LPI_ACTIVE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),8,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS1_RX_LPI_ACTIVE  LAN80XX_BIT(8)
#define  LAN80XX_X_HOST_PCS25G_STATUS1_RX_LPI_ACTIVE(x)  LAN80XX_EXTRACT_BITFIELD(x,8,1)

/**
 * \brief
 * 1: transmit is currently in LPI state; 0: normal operation.

 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS1 . TX_LPI_ACTIVE
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS1_TX_LPI_ACTIVE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),9,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS1_TX_LPI_ACTIVE  LAN80XX_BIT(9)
#define  LAN80XX_X_HOST_PCS25G_STATUS1_TX_LPI_ACTIVE(x)  LAN80XX_EXTRACT_BITFIELD(x,9,1)

/**
 * \brief
 * 1: receive is or was in LPI state; 0: normal operation; Latching high.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS1 . RX_LPI
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS1_RX_LPI(x)  LAN80XX_ENCODE_BITFIELD(!!(x),10,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS1_RX_LPI    LAN80XX_BIT(10)
#define  LAN80XX_X_HOST_PCS25G_STATUS1_RX_LPI(x)  LAN80XX_EXTRACT_BITFIELD(x,10,1)

/**
 * \brief
 * 1: transmit is or was in LPI state; 0: normal operation; Latching high.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS1 . TX_LPI
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS1_TX_LPI(x)  LAN80XX_ENCODE_BITFIELD(!!(x),11,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS1_TX_LPI    LAN80XX_BIT(11)
#define  LAN80XX_X_HOST_PCS25G_STATUS1_TX_LPI(x)  LAN80XX_EXTRACT_BITFIELD(x,11,1)


/**
 * \brief Bits 15:0 Device Identifier
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:DEVICE_ID0
 */
#define LAN80XX_HOST_PCS25G_DEVICE_ID0          LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x2)

/**
 * \brief
 * Upper 16 bits of a 32-bit unique PCS device identifier. Bits 3-18 of the
 * device manufacturer's OUI
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_DEVICE_ID0 . DEVICE_ID0_IDENTIFIER
 */
#define  LAN80XX_F_HOST_PCS25G_DEVICE_ID0_DEVICE_ID0_IDENTIFIER(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_DEVICE_ID0_DEVICE_ID0_IDENTIFIER     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_DEVICE_ID0_DEVICE_ID0_IDENTIFIER(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Bits 31:16 Device Identifier
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:DEVICE_ID1
 */
#define LAN80XX_HOST_PCS25G_DEVICE_ID1          LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x3)

/**
 * \brief
 * Lower 16 bits of a 32-bit unique PCS device identifier. Bits 19-24 of
 * the device manufacturer's OUI. Six-bit model number, and a four-bit
 * revision number
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_DEVICE_ID1 . DEVICE_ID1_IDENTIFIER
 */
#define  LAN80XX_F_HOST_PCS25G_DEVICE_ID1_DEVICE_ID1_IDENTIFIER(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_DEVICE_ID1_DEVICE_ID1_IDENTIFIER     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_DEVICE_ID1_DEVICE_ID1_IDENTIFIER(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief PCS supported speeds (values as defined by standard only, no proprietary speeds).
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:SPEED_ABILITY
 */
#define LAN80XX_HOST_PCS25G_SPEED_ABILITY       LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x4)

/**
 * \brief
 * When 1, this PCS is 10Geth capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_SPEED_ABILITY . C10GETH
 */
#define  LAN80XX_F_HOST_PCS25G_SPEED_ABILITY_C10GETH(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_HOST_PCS25G_SPEED_ABILITY_C10GETH  LAN80XX_BIT(0)
#define  LAN80XX_X_HOST_PCS25G_SPEED_ABILITY_C10GETH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * When 1, this PCS is 25G capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_SPEED_ABILITY . C25G
 */
#define  LAN80XX_F_HOST_PCS25G_SPEED_ABILITY_C25G(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_HOST_PCS25G_SPEED_ABILITY_C25G  LAN80XX_BIT(4)
#define  LAN80XX_X_HOST_PCS25G_SPEED_ABILITY_C25G(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)


/**
 * \brief Constant indicating PCS presence.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:DEVICES_IN_PKG1
 */
#define LAN80XX_HOST_PCS25G_DEVICES_IN_PKG1     LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x5)

/**
 * \brief
 * PMD/PMA present when 1.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_DEVICES_IN_PKG1 . PMD_PMA
 */
#define  LAN80XX_F_HOST_PCS25G_DEVICES_IN_PKG1_PMD_PMA(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_HOST_PCS25G_DEVICES_IN_PKG1_PMD_PMA  LAN80XX_BIT(1)
#define  LAN80XX_X_HOST_PCS25G_DEVICES_IN_PKG1_PMD_PMA(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * PCS present when 1.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_DEVICES_IN_PKG1 . PCS_PRES
 */
#define  LAN80XX_F_HOST_PCS25G_DEVICES_IN_PKG1_PCS_PRES(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_HOST_PCS25G_DEVICES_IN_PKG1_PCS_PRES  LAN80XX_BIT(3)
#define  LAN80XX_X_HOST_PCS25G_DEVICES_IN_PKG1_PCS_PRES(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)


/**
 * \brief Operating speed indication/control.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:CONTROL2
 */
#define LAN80XX_HOST_PCS25G_CONTROL2            LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x7)

/**
 * \brief
 * Not writeable; Reflects PCS mode from VENDOR_PCS_MODE. When FEC91 is
 * turn on or HI_BER25(VENDOR_PCS_MODE register bit2) is set to 1, PCS is
 * 25GBASE-R. When FEC91 is off and HI_BER25 is 0, PCS run with 10GBASE-R.
 *
 * \details
 * 0000 = 10GBASE-R
 *     0111 = 25GBASE-R
 *
 * Field: ::LAN80XX_HOST_PCS25G_CONTROL2 . PCS_TYPE
 */
#define  LAN80XX_F_HOST_PCS25G_CONTROL2_PCS_TYPE(x)  LAN80XX_ENCODE_BITFIELD(x,0,4)
#define  LAN80XX_M_HOST_PCS25G_CONTROL2_PCS_TYPE     LAN80XX_ENCODE_BITMASK(0,4)
#define  LAN80XX_X_HOST_PCS25G_CONTROL2_PCS_TYPE(x)  LAN80XX_EXTRACT_BITFIELD(x,0,4)


/**
 * \brief Fault status; Device capabilities
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:STATUS2
 */
#define LAN80XX_HOST_PCS25G_STATUS2             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x8)

/**
 * \brief
 * When 1, this PCS is 10GBASE-R capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . IEEE_C10GBASE_R
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_IEEE_C10GBASE_R(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_IEEE_C10GBASE_R  LAN80XX_BIT(0)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_IEEE_C10GBASE_R(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * When 1, this PCS is 10GBASE-X capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . IEEE_C10GBASE_X
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_IEEE_C10GBASE_X(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_IEEE_C10GBASE_X  LAN80XX_BIT(1)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_IEEE_C10GBASE_X(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * When 1, this PCS is 10GBASE-W capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . IEEE_C10GBASE_W
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_IEEE_C10GBASE_W(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_IEEE_C10GBASE_W  LAN80XX_BIT(2)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_IEEE_C10GBASE_W(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * When 1, this PCS is 10GBASE-T capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . IEEE_C10GBASE_T
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_IEEE_C10GBASE_T(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_IEEE_C10GBASE_T  LAN80XX_BIT(3)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_IEEE_C10GBASE_T(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * When 1, this PCS is 40GBASE-R capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . IEEE_C40GBASE_R
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_IEEE_C40GBASE_R(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_IEEE_C40GBASE_R  LAN80XX_BIT(4)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_IEEE_C40GBASE_R(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * When 1, this PCS is 100GBASE-R capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . IEEE_C100GBASE_R
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_IEEE_C100GBASE_R(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_IEEE_C100GBASE_R  LAN80XX_BIT(5)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_IEEE_C100GBASE_R(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * When 1, this PCS is 40GBASE-T capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . IEEE_40GBASE_T
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_IEEE_40GBASE_T(x)  LAN80XX_ENCODE_BITFIELD(!!(x),6,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_IEEE_40GBASE_T  LAN80XX_BIT(6)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_IEEE_40GBASE_T(x)  LAN80XX_EXTRACT_BITFIELD(x,6,1)

/**
 * \brief
 * When 1, this PCS is 25GBASE-R capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . IEEE_C25GBASE_R
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_IEEE_C25GBASE_R(x)  LAN80XX_ENCODE_BITFIELD(!!(x),7,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_IEEE_C25GBASE_R  LAN80XX_BIT(7)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_IEEE_C25GBASE_R(x)  LAN80XX_EXTRACT_BITFIELD(x,7,1)

/**
 * \brief
 * When 1, this PCS is 25GBASE-T capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . IEEE_25GBASE_T
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_IEEE_25GBASE_T(x)  LAN80XX_ENCODE_BITFIELD(!!(x),9,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_IEEE_25GBASE_T  LAN80XX_BIT(9)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_IEEE_25GBASE_T(x)  LAN80XX_EXTRACT_BITFIELD(x,9,1)

/**
 * \brief
 * Receive fault. 1=Fault condition on receive path. Latched high
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . RECEIVE_FAULT
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_RECEIVE_FAULT(x)  LAN80XX_ENCODE_BITFIELD(!!(x),10,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_RECEIVE_FAULT  LAN80XX_BIT(10)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_RECEIVE_FAULT(x)  LAN80XX_EXTRACT_BITFIELD(x,10,1)

/**
 * \brief
 * Transmit fault. 1=Fault condition on transmit path. Latched high
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . TRANSMIT_FAULT
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_TRANSMIT_FAULT(x)  LAN80XX_ENCODE_BITFIELD(!!(x),11,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_TRANSMIT_FAULT  LAN80XX_BIT(11)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_TRANSMIT_FAULT(x)  LAN80XX_EXTRACT_BITFIELD(x,11,1)

/**
 * \brief
 * When 1, this PCS is 2P5GBASE-T capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . IEEE_2P5GBASE_T
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_IEEE_2P5GBASE_T(x)  LAN80XX_ENCODE_BITFIELD(!!(x),12,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_IEEE_2P5GBASE_T  LAN80XX_BIT(12)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_IEEE_2P5GBASE_T(x)  LAN80XX_EXTRACT_BITFIELD(x,12,1)

/**
 * \brief
 * When 1, this PCS is 5GBASE-T capable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . IEEE_5GBASE_T
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_IEEE_5GBASE_T(x)  LAN80XX_ENCODE_BITFIELD(!!(x),13,1)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_IEEE_5GBASE_T  LAN80XX_BIT(13)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_IEEE_5GBASE_T(x)  LAN80XX_EXTRACT_BITFIELD(x,13,1)

/**
 * \brief
 * Device present. When bits are 10 = device responding at this address.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_STATUS2 . DEVICE_PRESENT
 */
#define  LAN80XX_F_HOST_PCS25G_STATUS2_DEVICE_PRESENT(x)  LAN80XX_ENCODE_BITFIELD(x,14,2)
#define  LAN80XX_M_HOST_PCS25G_STATUS2_DEVICE_PRESENT     LAN80XX_ENCODE_BITMASK(14,2)
#define  LAN80XX_X_HOST_PCS25G_STATUS2_DEVICE_PRESENT(x)  LAN80XX_EXTRACT_BITFIELD(x,14,2)


/**
 * \brief Bits 15:0 Package Identifier
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:PKG_ID0
 */
#define LAN80XX_HOST_PCS25G_PKG_ID0             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0xe)

/**
 * \brief
 * PCS package identifier 1
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_PKG_ID0 . PKG_ID0_IDENTIFIER
 */
#define  LAN80XX_F_HOST_PCS25G_PKG_ID0_PKG_ID0_IDENTIFIER(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_PKG_ID0_PKG_ID0_IDENTIFIER     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_PKG_ID0_PKG_ID0_IDENTIFIER(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Bits 31:16 Package Identifier
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:PKG_ID1
 */
#define LAN80XX_HOST_PCS25G_PKG_ID1             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0xf)

/**
 * \brief
 * PCS package identifier 2
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_PKG_ID1 . PKG_ID1_IDENTIFIER
 */
#define  LAN80XX_F_HOST_PCS25G_PKG_ID1_PKG_ID1_IDENTIFIER(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_PKG_ID1_PKG_ID1_IDENTIFIER     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_PKG_ID1_PKG_ID1_IDENTIFIER(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief EEE Control and Capabilities (exists only if EEE is available).
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:EEE_CTRL_CAPABILITY
 */
#define LAN80XX_HOST_PCS25G_EEE_CTRL_CAPABILITY  LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x14)

/**
 * \brief
 * Mode for selecting select 40G EEE mode; 1 = Fast wake mode; 0 = Deep
 * sleep for LPI function.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_EEE_CTRL_CAPABILITY . LPI_FW
 */
#define  LAN80XX_F_HOST_PCS25G_EEE_CTRL_CAPABILITY_LPI_FW(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_HOST_PCS25G_EEE_CTRL_CAPABILITY_LPI_FW  LAN80XX_BIT(0)
#define  LAN80XX_X_HOST_PCS25G_EEE_CTRL_CAPABILITY_LPI_FW(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * When 1, EEE is supported for 10GBASE-KR.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_EEE_CTRL_CAPABILITY . EEE_10GBASE_KR
 */
#define  LAN80XX_F_HOST_PCS25G_EEE_CTRL_CAPABILITY_EEE_10GBASE_KR(x)  LAN80XX_ENCODE_BITFIELD(!!(x),6,1)
#define  LAN80XX_M_HOST_PCS25G_EEE_CTRL_CAPABILITY_EEE_10GBASE_KR  LAN80XX_BIT(6)
#define  LAN80XX_X_HOST_PCS25G_EEE_CTRL_CAPABILITY_EEE_10GBASE_KR(x)  LAN80XX_EXTRACT_BITFIELD(x,6,1)

/**
 * \brief
 * When 1, EEE fast wake is supported for 25GBASE-R.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_EEE_CTRL_CAPABILITY . EEE_25GBASE_RAWAKE
 */
#define  LAN80XX_F_HOST_PCS25G_EEE_CTRL_CAPABILITY_EEE_25GBASE_RAWAKE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),10,1)
#define  LAN80XX_M_HOST_PCS25G_EEE_CTRL_CAPABILITY_EEE_25GBASE_RAWAKE  LAN80XX_BIT(10)
#define  LAN80XX_X_HOST_PCS25G_EEE_CTRL_CAPABILITY_EEE_25GBASE_RAWAKE(x)  LAN80XX_EXTRACT_BITFIELD(x,10,1)

/**
 * \brief
 * When 1, EEE deep sleep is supported for 25GBASE-R.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_EEE_CTRL_CAPABILITY . EEE_25GBASE_RSLEEP
 */
#define  LAN80XX_F_HOST_PCS25G_EEE_CTRL_CAPABILITY_EEE_25GBASE_RSLEEP(x)  LAN80XX_ENCODE_BITFIELD(!!(x),11,1)
#define  LAN80XX_M_HOST_PCS25G_EEE_CTRL_CAPABILITY_EEE_25GBASE_RSLEEP  LAN80XX_BIT(11)
#define  LAN80XX_X_HOST_PCS25G_EEE_CTRL_CAPABILITY_EEE_25GBASE_RSLEEP(x)  LAN80XX_EXTRACT_BITFIELD(x,11,1)


/**
 * \brief Link Status Information.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:BASER_STATUS1
 */
#define LAN80XX_HOST_PCS25G_BASER_STATUS1       LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x20)

/**
 * \brief
 * 1=PCS locked to received blocks.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_STATUS1 . BASER_STATUS1_BLOCK_LOCK
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_STATUS1_BASER_STATUS1_BLOCK_LOCK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_HOST_PCS25G_BASER_STATUS1_BASER_STATUS1_BLOCK_LOCK  LAN80XX_BIT(0)
#define  LAN80XX_X_HOST_PCS25G_BASER_STATUS1_BASER_STATUS1_BLOCK_LOCK(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * 1=PCS reporting a high BER.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_STATUS1 . BASER_STATUS1_HIGH_BER
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_STATUS1_BASER_STATUS1_HIGH_BER(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_HOST_PCS25G_BASER_STATUS1_BASER_STATUS1_HIGH_BER  LAN80XX_BIT(1)
#define  LAN80XX_X_HOST_PCS25G_BASER_STATUS1_BASER_STATUS1_HIGH_BER(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Receive link status. 1=Link up; 0=link down.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_STATUS1 . RECEIVE_LINK
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_STATUS1_RECEIVE_LINK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),12,1)
#define  LAN80XX_M_HOST_PCS25G_BASER_STATUS1_RECEIVE_LINK  LAN80XX_BIT(12)
#define  LAN80XX_X_HOST_PCS25G_BASER_STATUS1_RECEIVE_LINK(x)  LAN80XX_EXTRACT_BITFIELD(x,12,1)


/**
 * \brief Link Status latches and error counters.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:BASER_STATUS2
 */
#define LAN80XX_HOST_PCS25G_BASER_STATUS2       LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x21)

/**
 * \brief
 * Errored blocks counter; Non Roll-over. Cleared on read. When this
 * register is read, bits 21:8 of the internal Error Blocks counter are
 * latched for reading from the ERR_BLK_HIGH_ORDER_CNT register and the
 * entire 22-bit internal Error Blocks counter is reset.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_STATUS2 . ERRORED_CNT
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_STATUS2_ERRORED_CNT(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_HOST_PCS25G_BASER_STATUS2_ERRORED_CNT     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_HOST_PCS25G_BASER_STATUS2_ERRORED_CNT(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)

/**
 * \brief
 * BER counter; Non Roll-over. Cleared on read. When this register is read,
 * bits 21:6 of the internal BER counter are latched for reading from the
 * BER_HIGH_ORDER_CNT register and the entire 22-bit internal BER counter
 * is reset.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_STATUS2 . BASER_STATUS2_BER_COUNTER
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_STATUS2_BASER_STATUS2_BER_COUNTER(x)  LAN80XX_ENCODE_BITFIELD(x,8,6)
#define  LAN80XX_M_HOST_PCS25G_BASER_STATUS2_BASER_STATUS2_BER_COUNTER     LAN80XX_ENCODE_BITMASK(8,6)
#define  LAN80XX_X_HOST_PCS25G_BASER_STATUS2_BASER_STATUS2_BER_COUNTER(x)  LAN80XX_EXTRACT_BITFIELD(x,8,6)

/**
 * \brief
 * BER flag; Latched high.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_STATUS2 . BASER_STATUS2_HIGH_BER
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_STATUS2_BASER_STATUS2_HIGH_BER(x)  LAN80XX_ENCODE_BITFIELD(!!(x),14,1)
#define  LAN80XX_M_HOST_PCS25G_BASER_STATUS2_BASER_STATUS2_HIGH_BER  LAN80XX_BIT(14)
#define  LAN80XX_X_HOST_PCS25G_BASER_STATUS2_BASER_STATUS2_HIGH_BER(x)  LAN80XX_EXTRACT_BITFIELD(x,14,1)

/**
 * \brief
 * Block Lock; Latched low.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_STATUS2 . BASER_STATUS2_BLOCK_LOCK
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_STATUS2_BASER_STATUS2_BLOCK_LOCK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),15,1)
#define  LAN80XX_M_HOST_PCS25G_BASER_STATUS2_BASER_STATUS2_BLOCK_LOCK  LAN80XX_BIT(15)
#define  LAN80XX_X_HOST_PCS25G_BASER_STATUS2_BASER_STATUS2_BLOCK_LOCK(x)  LAN80XX_EXTRACT_BITFIELD(x,15,1)


/**
 * \brief 10/25GBASE-R Test Pattern Seed A bits 15:0.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:SEED_A0
 */
#define LAN80XX_HOST_PCS25G_SEED_A0             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x22)

/**
 * \brief
 * 10/25GBASE-R Test Pattern Seed A: Bits 15:0.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_SEED_A0 . SEED_A0_SEED
 */
#define  LAN80XX_F_HOST_PCS25G_SEED_A0_SEED_A0_SEED(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_SEED_A0_SEED_A0_SEED     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_SEED_A0_SEED_A0_SEED(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief 10/25GBBASE-R Test Pattern Seed A bits 31:16.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:SEED_A1
 */
#define LAN80XX_HOST_PCS25G_SEED_A1             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x23)

/**
 * \brief
 * 10/25GBASE-R Test Pattern Seed A: Bits 31:16.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_SEED_A1 . SEED_A1_SEED
 */
#define  LAN80XX_F_HOST_PCS25G_SEED_A1_SEED_A1_SEED(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_SEED_A1_SEED_A1_SEED     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_SEED_A1_SEED_A1_SEED(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief 10/25GBASE-R Test Pattern Seed A bits 47:32.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:SEED_A2
 */
#define LAN80XX_HOST_PCS25G_SEED_A2             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x24)

/**
 * \brief
 * 10/25GBASE-R Test Pattern Seed A: Bits 47:32.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_SEED_A2 . SEED_A2_SEED
 */
#define  LAN80XX_F_HOST_PCS25G_SEED_A2_SEED_A2_SEED(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_SEED_A2_SEED_A2_SEED     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_SEED_A2_SEED_A2_SEED(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief 10/25GBASE-R Test Pattern Seed A bits 57:48.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:SEED_A3
 */
#define LAN80XX_HOST_PCS25G_SEED_A3             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x25)

/**
 * \brief
 * 10/25GBASE-R Test Pattern Seed A: Bits 57:48.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_SEED_A3 . SEED_A3_SEED
 */
#define  LAN80XX_F_HOST_PCS25G_SEED_A3_SEED_A3_SEED(x)  LAN80XX_ENCODE_BITFIELD(x,0,10)
#define  LAN80XX_M_HOST_PCS25G_SEED_A3_SEED_A3_SEED     LAN80XX_ENCODE_BITMASK(0,10)
#define  LAN80XX_X_HOST_PCS25G_SEED_A3_SEED_A3_SEED(x)  LAN80XX_EXTRACT_BITFIELD(x,0,10)


/**
 * \brief 10/25GBASE-R Test Pattern Seed B bits 15:0.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:SEED_B0
 */
#define LAN80XX_HOST_PCS25G_SEED_B0             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x26)

/**
 * \brief
 * 10/25GBASE-R Test Pattern Seed B: Bits 15:0.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_SEED_B0 . SEED_B0_SEED
 */
#define  LAN80XX_F_HOST_PCS25G_SEED_B0_SEED_B0_SEED(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_SEED_B0_SEED_B0_SEED     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_SEED_B0_SEED_B0_SEED(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief 10/25GBASE-R Test Pattern Seed B bits 31:16.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:SEED_B1
 */
#define LAN80XX_HOST_PCS25G_SEED_B1             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x27)

/**
 * \brief
 * 10/25GBASE-R Test Pattern Seed B: Bits 31:16.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_SEED_B1 . SEED_B1_SEED
 */
#define  LAN80XX_F_HOST_PCS25G_SEED_B1_SEED_B1_SEED(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_SEED_B1_SEED_B1_SEED     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_SEED_B1_SEED_B1_SEED(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief 10/25GBASE-R Test Pattern Seed B bits 47:32.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:SEED_B2
 */
#define LAN80XX_HOST_PCS25G_SEED_B2             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x28)

/**
 * \brief
 * 10/25GBASE-R Test Pattern Seed B: Bits 47:32.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_SEED_B2 . SEED_B2_SEED
 */
#define  LAN80XX_F_HOST_PCS25G_SEED_B2_SEED_B2_SEED(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_SEED_B2_SEED_B2_SEED     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_SEED_B2_SEED_B2_SEED(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief 10/25GBASEe-R Test Pattern Seed B bits 57:48.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:SEED_B3
 */
#define LAN80XX_HOST_PCS25G_SEED_B3             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x29)

/**
 * \brief
 * 10/25GBASE-R Test Pattern Seed B: Bits 57:48.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_SEED_B3 . SEED_B3_SEED
 */
#define  LAN80XX_F_HOST_PCS25G_SEED_B3_SEED_B3_SEED(x)  LAN80XX_ENCODE_BITFIELD(x,0,10)
#define  LAN80XX_M_HOST_PCS25G_SEED_B3_SEED_B3_SEED     LAN80XX_ENCODE_BITMASK(0,10)
#define  LAN80XX_X_HOST_PCS25G_SEED_B3_SEED_B3_SEED(x)  LAN80XX_EXTRACT_BITFIELD(x,0,10)


/**
 * \brief Test Pattern Generator and Checker controls.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:BASER_TEST_CONTROL
 */
#define LAN80XX_HOST_PCS25G_BASER_TEST_CONTROL  LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x2a)

/**
 * \brief
 * Data Pattern Select: 1=all Zero, 0=2x Local Fault; 10G only.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_TEST_CONTROL . DATA_PATTERN_SEL
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_TEST_CONTROL_DATA_PATTERN_SEL(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_HOST_PCS25G_BASER_TEST_CONTROL_DATA_PATTERN_SEL  LAN80XX_BIT(0)
#define  LAN80XX_X_HOST_PCS25G_BASER_TEST_CONTROL_DATA_PATTERN_SEL(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * Select Square Wave (1) or Pseudo Random (0) test pattern; 10G only.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_TEST_CONTROL . SELECT_SQUARE
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_TEST_CONTROL_SELECT_SQUARE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_HOST_PCS25G_BASER_TEST_CONTROL_SELECT_SQUARE  LAN80XX_BIT(1)
#define  LAN80XX_X_HOST_PCS25G_BASER_TEST_CONTROL_SELECT_SQUARE(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Receive test-pattern enable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_TEST_CONTROL . RX_TESTPATTERN
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_TEST_CONTROL_RX_TESTPATTERN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_HOST_PCS25G_BASER_TEST_CONTROL_RX_TESTPATTERN  LAN80XX_BIT(2)
#define  LAN80XX_X_HOST_PCS25G_BASER_TEST_CONTROL_RX_TESTPATTERN(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * Transmit test-pattern enable.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_TEST_CONTROL . TX_TESTPATTERN
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_TEST_CONTROL_TX_TESTPATTERN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_HOST_PCS25G_BASER_TEST_CONTROL_TX_TESTPATTERN  LAN80XX_BIT(3)
#define  LAN80XX_X_HOST_PCS25G_BASER_TEST_CONTROL_TX_TESTPATTERN(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Select Scrambled Idle test pattern (25G only); Overrides bits 1:0 when
 * set.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_TEST_CONTROL . SCRAMBLED_IDLE
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_TEST_CONTROL_SCRAMBLED_IDLE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),7,1)
#define  LAN80XX_M_HOST_PCS25G_BASER_TEST_CONTROL_SCRAMBLED_IDLE  LAN80XX_BIT(7)
#define  LAN80XX_X_HOST_PCS25G_BASER_TEST_CONTROL_SCRAMBLED_IDLE(x)  LAN80XX_EXTRACT_BITFIELD(x,7,1)


/**
 * \brief Test Pattern Error Counter; Clears on read; Non Roll-over.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:BASER_TEST_ERR_CNT
 */
#define LAN80XX_HOST_PCS25G_BASER_TEST_ERR_CNT  LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x2b)

/**
 * \brief
 * Test pattern error counter; Clears on read; Non Roll-over.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BASER_TEST_ERR_CNT . BASER_TEST_ERR_CNT_COUNTER
 */
#define  LAN80XX_F_HOST_PCS25G_BASER_TEST_ERR_CNT_BASER_TEST_ERR_CNT_COUNTER(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_BASER_TEST_ERR_CNT_BASER_TEST_ERR_CNT_COUNTER     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_BASER_TEST_ERR_CNT_BASER_TEST_ERR_CNT_COUNTER(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief BER High Order Counter of BER bits 21:6; Non Roll-over.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:BER_HIGH_ORDER_CNT
 */
#define LAN80XX_HOST_PCS25G_BER_HIGH_ORDER_CNT  LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x2c)

/**
 * \brief
 * Bits 21:6 of BER counter; Non Roll-over. When BASER_STATUS2 is read bits
 * 21:6 of the internal BER counter are latched for reading from this
 * register and the entire 22-bit internal BER counter is reset
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_BER_HIGH_ORDER_CNT . BER_HIGH_ORDER_CNT_BER_COUNTER
 */
#define  LAN80XX_F_HOST_PCS25G_BER_HIGH_ORDER_CNT_BER_HIGH_ORDER_CNT_BER_COUNTER(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_BER_HIGH_ORDER_CNT_BER_HIGH_ORDER_CNT_BER_COUNTER     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_BER_HIGH_ORDER_CNT_BER_HIGH_ORDER_CNT_BER_COUNTER(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Error Blocks High Order Counter bits 21:8; Non Roll-over.
 *
 * \details
 * Register: \a HOST_PCS25G:PCS_REGISTERS:ERR_BLK_HIGH_ORDER_CNT
 */
#define LAN80XX_HOST_PCS25G_ERR_BLK_HIGH_ORDER_CNT  LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x2d)

/**
 * \brief
 * Bits 21:8 of Error Blocks counter; Non Roll-over. When BASER_STATUS2 is
 * read bits 21:8 of the internal Error Blocks counter are latched for
 * reading from this register and the entire 22-bit internal Error Blocks
 * counter is reset
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_ERR_BLK_HIGH_ORDER_CNT . ERRORED_BLOCKS_COUNTER
 */
#define  LAN80XX_F_HOST_PCS25G_ERR_BLK_HIGH_ORDER_CNT_ERRORED_BLOCKS_COUNTER(x)  LAN80XX_ENCODE_BITFIELD(x,0,14)
#define  LAN80XX_M_HOST_PCS25G_ERR_BLK_HIGH_ORDER_CNT_ERRORED_BLOCKS_COUNTER     LAN80XX_ENCODE_BITMASK(0,14)
#define  LAN80XX_X_HOST_PCS25G_ERR_BLK_HIGH_ORDER_CNT_ERRORED_BLOCKS_COUNTER(x)  LAN80XX_EXTRACT_BITFIELD(x,0,14)

/**
 * \brief
 * High order counter present; Always 1.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_ERR_BLK_HIGH_ORDER_CNT . HIGH_ORDER_PRESENT
 */
#define  LAN80XX_F_HOST_PCS25G_ERR_BLK_HIGH_ORDER_CNT_HIGH_ORDER_PRESENT(x)  LAN80XX_ENCODE_BITFIELD(!!(x),15,1)
#define  LAN80XX_M_HOST_PCS25G_ERR_BLK_HIGH_ORDER_CNT_HIGH_ORDER_PRESENT  LAN80XX_BIT(15)
#define  LAN80XX_X_HOST_PCS25G_ERR_BLK_HIGH_ORDER_CNT_HIGH_ORDER_PRESENT(x)  LAN80XX_EXTRACT_BITFIELD(x,15,1)

/**
 * Register Group: \a HOST_PCS25G:VENDOR_PCS_REGISTERS
 *
 * VENDOR PCS Control Registers.
 */


/**
 * \brief Vendor Specific Reg; Scratch Register.
 *
 * \details
 * Register: \a HOST_PCS25G:VENDOR_PCS_REGISTERS:VENDOR_SCRATCH
 */
#define LAN80XX_HOST_PCS25G_VENDOR_SCRATCH      LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x8000)

/**
 * \brief
 * Scratch Register; Register address to test read and write operation.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_SCRATCH . SCRATCH
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_SCRATCH_SCRATCH(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_SCRATCH_SCRATCH     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_SCRATCH_SCRATCH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Vendor Specific Reg; Core Revision
 *
 * \details
 * Register: \a HOST_PCS25G:VENDOR_PCS_REGISTERS:VENDOR_CORE_REV
 */
#define LAN80XX_HOST_PCS25G_VENDOR_CORE_REV     LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x8001)

/**
 * \brief
 * Core Design version
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_CORE_REV . REVISION
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_CORE_REV_REVISION(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_CORE_REV_REVISION     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_CORE_REV_REVISION(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Vendor Specific Reg; Set the amount of data between markers. (I.e. distance of markers-1).
 *
 * \details
 * Register: \a HOST_PCS25G:VENDOR_PCS_REGISTERS:VENDOR_VL_INTVL
 */
#define LAN80XX_HOST_PCS25G_VENDOR_VL_INTVL     LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x8002)

/**
 * \brief
 * A 16-bit value defining the amount of data between markers; (distance of
 * markers-1).
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_VL_INTVL . MARKER_COUNTER
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_VL_INTVL_MARKER_COUNTER(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_VL_INTVL_MARKER_COUNTER     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_VL_INTVL_MARKER_COUNTER(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Vendor Specific Reg; Defines the transmit line decoupling FIFOs almost full threshold.
 *
 * \details
 * Register: \a HOST_PCS25G:VENDOR_PCS_REGISTERS:VENDOR_TXLANE_THRESH
 */
#define LAN80XX_HOST_PCS25G_VENDOR_TXLANE_THRESH  LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x8003)

/**
 * \brief
 * A 4-bit value to define the transmit line decoupling FIFOs almost full
 * threshold; Valid values are 4..9.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_TXLANE_THRESH . THRESHOLD
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_TXLANE_THRESH_THRESHOLD(x)  LAN80XX_ENCODE_BITFIELD(x,0,4)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_TXLANE_THRESH_THRESHOLD     LAN80XX_ENCODE_BITMASK(0,4)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_TXLANE_THRESH_THRESHOLD(x)  LAN80XX_EXTRACT_BITFIELD(x,0,4)


/**
 * \brief Vendor Specific Reg; Marker pattern for PCS Virtual Lane 0.
 *
 * \details
 * Register: \a HOST_PCS25G:VENDOR_PCS_REGISTERS:VENDOR_VL0_0
 */
#define LAN80XX_HOST_PCS25G_VENDOR_VL0_0        LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x8008)

/**
 * \brief
 * Lane 0 Marker pattern for m0.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_VL0_0 . VENDOR_VL0_0_M0
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_VL0_0_VENDOR_VL0_0_M0(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_VL0_0_VENDOR_VL0_0_M0     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_VL0_0_VENDOR_VL0_0_M0(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)

/**
 * \brief
 * Lane 0 Marker pattern for m1.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_VL0_0 . VENDOR_VL0_0_M1
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_VL0_0_VENDOR_VL0_0_M1(x)  LAN80XX_ENCODE_BITFIELD(x,8,8)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_VL0_0_VENDOR_VL0_0_M1     LAN80XX_ENCODE_BITMASK(8,8)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_VL0_0_VENDOR_VL0_0_M1(x)  LAN80XX_EXTRACT_BITFIELD(x,8,8)


/**
 * \brief Vendor Specific Reg; Last byte of PCS Virtual Lane 0 marker pattern.
 *
 * \details
 * Register: \a HOST_PCS25G:VENDOR_PCS_REGISTERS:VENDOR_VL0_1
 */
#define LAN80XX_HOST_PCS25G_VENDOR_VL0_1        LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x8009)

/**
 * \brief
 * Lane 0 Marker pattern for m2.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_VL0_1 . VENDOR_VL0_1_M2
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_VL0_1_VENDOR_VL0_1_M2(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_VL0_1_VENDOR_VL0_1_M2     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_VL0_1_VENDOR_VL0_1_M2(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)


/**
 * \brief Vendor Specific Reg; Configure PCS supporting Clause 49 or 82 Encoder/Decoder, MLD.
 *
 * \details
 * Register: \a HOST_PCS25G:VENDOR_PCS_REGISTERS:VENDOR_PCS_MODE
 */
#define LAN80XX_HOST_PCS25G_VENDOR_PCS_MODE     LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x8010)

/**
 * \brief
 * When 0 PCS uses Clause 82 encoder/decoder functions; When 1 PCS uses
 * Clause 49 encoder/decoder functions.Value must be kept at 1
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_PCS_MODE . ENA_CLAUSE49
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_PCS_MODE_ENA_CLAUSE49(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_PCS_MODE_ENA_CLAUSE49  LAN80XX_BIT(0)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_PCS_MODE_ENA_CLAUSE49(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * When 1 PCS implements 25G Hi-Ber (2ms, 97 errors). When 0 PCS implements
 * 10G Hi-Ber (125us, 16 errors);
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_PCS_MODE . HI_BER25
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_PCS_MODE_HI_BER25(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_PCS_MODE_HI_BER25  LAN80XX_BIT(2)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_PCS_MODE_HI_BER25(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * When 1 PCS implements 5G Hi-Ber (2ms, 97 errors). When 0 PCS implements
 * 10G Hi-Ber (125us, 16 errors);
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_PCS_MODE . HI_BER5
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_PCS_MODE_HI_BER5(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_PCS_MODE_HI_BER5  LAN80XX_BIT(3)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_PCS_MODE_HI_BER5(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Current status of Clause 49 setting.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_PCS_MODE . ST_ENA_CLAUSE49
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_PCS_MODE_ST_ENA_CLAUSE49(x)  LAN80XX_ENCODE_BITFIELD(!!(x),8,1)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_PCS_MODE_ST_ENA_CLAUSE49  LAN80XX_BIT(8)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_PCS_MODE_ST_ENA_CLAUSE49(x)  LAN80XX_EXTRACT_BITFIELD(x,8,1)

/**
 * \brief
 * Current status of MLD setting.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_VENDOR_PCS_MODE . ST_DISABLE_MLD
 */
#define  LAN80XX_F_HOST_PCS25G_VENDOR_PCS_MODE_ST_DISABLE_MLD(x)  LAN80XX_ENCODE_BITFIELD(!!(x),9,1)
#define  LAN80XX_M_HOST_PCS25G_VENDOR_PCS_MODE_ST_DISABLE_MLD  LAN80XX_BIT(9)
#define  LAN80XX_X_HOST_PCS25G_VENDOR_PCS_MODE_ST_DISABLE_MLD(x)  LAN80XX_EXTRACT_BITFIELD(x,9,1)


/**
 * \brief Vendor Specific Reg; Value shifted for block lock.
 *
 * \details
 * Register: \a HOST_PCS25G:VENDOR_PCS_REGISTERS:GB_SHIFT
 */
#define LAN80XX_HOST_PCS25G_GB_SHIFT            LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x8011)

/**
 * \brief
 * Number of bits SERDES input is shifted for block lock.
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_GB_SHIFT . GB_SHIFT_1
 */
#define  LAN80XX_F_HOST_PCS25G_GB_SHIFT_GB_SHIFT_1(x)  LAN80XX_ENCODE_BITFIELD(x,0,7)
#define  LAN80XX_M_HOST_PCS25G_GB_SHIFT_GB_SHIFT_1     LAN80XX_ENCODE_BITMASK(0,7)
#define  LAN80XX_X_HOST_PCS25G_GB_SHIFT_GB_SHIFT_1(x)  LAN80XX_EXTRACT_BITFIELD(x,0,7)


/**
 * \brief Vendor Specific Reg; Latency measurement.
 *
 * \details
 * Register: \a HOST_PCS25G:VENDOR_PCS_REGISTERS:LATENCY
 */
#define LAN80XX_HOST_PCS25G_LATENCY             LAN80XX_IOREG(MMD_ID_HOST_PCS25G, 0, 0x8012)

/**
 * \brief
 * PCS Rx and Tx latency w.r.t SERDES clock. TX latency is on 15:9 and RX
 * latency is on 8:0
 *
 * \details
 * Field: ::LAN80XX_HOST_PCS25G_LATENCY . LATENCY_1
 */
#define  LAN80XX_F_HOST_PCS25G_LATENCY_LATENCY_1(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_HOST_PCS25G_LATENCY_LATENCY_1     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_HOST_PCS25G_LATENCY_LATENCY_1(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


#endif /* _LAN80XX_MALIBU25G_REGS_HOST_PCS25G_H_ */
