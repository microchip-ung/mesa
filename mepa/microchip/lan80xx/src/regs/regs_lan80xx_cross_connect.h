// Copyright (c) 2004-2020 Microchip Technology Inc. and its subsidiaries.
// SPDX-License-Identifier: MIT

#ifndef _LAN80XX_MALIBU25G_REGS_CROSS_CONNECT_H_
#define _LAN80XX_MALIBU25G_REGS_CROSS_CONNECT_H_

#include "regs_lan8042_common.h"

/***********************************************************************
 *
 * Target: \a CROSS_CONNECT
 *
 *
 *
 ***********************************************************************/

/**
 * Register Group: \a CROSS_CONNECT:EXP_CFG
 *
 * EXP configuration registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:EXP_CFG:CFG1
 */
#define LAN80XX_CROSS_CONNECT_CFG1              LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf100)

/**
 * \brief
 * Additional offset to FIFO centering
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_CFG1 . CENTER
 */
#define  LAN80XX_F_CROSS_CONNECT_CFG1_CENTER(x)  LAN80XX_ENCODE_BITFIELD(x,16,4)
#define  LAN80XX_M_CROSS_CONNECT_CFG1_CENTER     LAN80XX_ENCODE_BITMASK(16,4)
#define  LAN80XX_X_CROSS_CONNECT_CFG1_CENTER(x)  LAN80XX_EXTRACT_BITFIELD(x,16,4)

/**
 * \brief
 * Bypass cross-connect functionality and pass data directly through

 * Note condition logic is still active in bypass mode
 *
 * \details
 * 0: Enable Cross-connect
 * 1: Bypass Cross-connect
 *
 * Field: ::LAN80XX_CROSS_CONNECT_CFG1 . BYPASS
 */
#define  LAN80XX_F_CROSS_CONNECT_CFG1_BYPASS(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_CROSS_CONNECT_CFG1_BYPASS     LAN80XX_BIT(0)
#define  LAN80XX_X_CROSS_CONNECT_CFG1_BYPASS(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \details
 * Register: \a CROSS_CONNECT:EXP_CFG:COND_CFG
 */
#define LAN80XX_CROSS_CONNECT_COND_CFG          LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf101)

/**
 * \brief
 * Invert corresponding GPIO input when used as a switch condition;

One
 * bit for each external input to the cross connect control function.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_COND_CFG . INVERT_GPIO
 */
#define  LAN80XX_F_CROSS_CONNECT_COND_CFG_INVERT_GPIO(x)  LAN80XX_ENCODE_BITFIELD(x,8,8)
#define  LAN80XX_M_CROSS_CONNECT_COND_CFG_INVERT_GPIO     LAN80XX_ENCODE_BITMASK(8,8)
#define  LAN80XX_X_CROSS_CONNECT_COND_CFG_INVERT_GPIO(x)  LAN80XX_EXTRACT_BITFIELD(x,8,8)

/**
 * \brief
 * Invert EWIS LOF indicator when used as a switch condition
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_COND_CFG . INVERT_LOF
 */
#define  LAN80XX_F_CROSS_CONNECT_COND_CFG_INVERT_LOF(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_CROSS_CONNECT_COND_CFG_INVERT_LOF  LAN80XX_BIT(3)
#define  LAN80XX_X_CROSS_CONNECT_COND_CFG_INVERT_LOF(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Invert PMA LOS indicator when used as a switch condition
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_COND_CFG . INVERT_LOS
 */
#define  LAN80XX_F_CROSS_CONNECT_COND_CFG_INVERT_LOS(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_CROSS_CONNECT_COND_CFG_INVERT_LOS  LAN80XX_BIT(2)
#define  LAN80XX_X_CROSS_CONNECT_COND_CFG_INVERT_LOS(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * Invert 1000Base-X PCS link_status indication when used as a switrch
 * condition
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_COND_CFG . INVERT_LINK_STATUS
 */
#define  LAN80XX_F_CROSS_CONNECT_COND_CFG_INVERT_LINK_STATUS(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_CROSS_CONNECT_COND_CFG_INVERT_LINK_STATUS  LAN80XX_BIT(1)
#define  LAN80XX_X_CROSS_CONNECT_COND_CFG_INVERT_LINK_STATUS(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)


/**
 * \brief M25 SW reset for HOST/LINE read port and read port FIFO
 *
 * \details
 * Register: \a CROSS_CONNECT:EXP_CFG:RESET
 */
#define LAN80XX_CROSS_CONNECT_RESET             LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf102)

/**
 * \brief
 * Reset the Host 0 read ports of all four Line FIFOs
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . H0_RD_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_H0_RD_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_H0_RD_RESET  LAN80XX_BIT(0)
#define  LAN80XX_X_CROSS_CONNECT_RESET_H0_RD_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * Reset the Host 1 read ports of all four Line FIFOs
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . H1_RD_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_H1_RD_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_H1_RD_RESET  LAN80XX_BIT(1)
#define  LAN80XX_X_CROSS_CONNECT_RESET_H1_RD_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Reset the Host 2 read ports of all four Line FIFOs
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . H2_RD_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_H2_RD_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_H2_RD_RESET  LAN80XX_BIT(2)
#define  LAN80XX_X_CROSS_CONNECT_RESET_H2_RD_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * Reset the Host 3 read ports of all four Line FIFOs
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . H3_RD_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_H3_RD_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_H3_RD_RESET  LAN80XX_BIT(3)
#define  LAN80XX_X_CROSS_CONNECT_RESET_H3_RD_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Reset the Line 0 read ports of all four Host FIFOs
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . L0_RD_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_L0_RD_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_L0_RD_RESET  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_RESET_L0_RD_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Reset the Line 1 read ports of all four Host FIFOs
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . L1_RD_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_L1_RD_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_L1_RD_RESET  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_RESET_L1_RD_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Reset the Line 2 read ports of all four Host FIFOs
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . L2_RD_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_L2_RD_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),6,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_L2_RD_RESET  LAN80XX_BIT(6)
#define  LAN80XX_X_CROSS_CONNECT_RESET_L2_RD_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,6,1)

/**
 * \brief
 * Reset the Line 3 read ports of all four Host FIFOs
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . L3_RD_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_L3_RD_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),7,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_L3_RD_RESET  LAN80XX_BIT(7)
#define  LAN80XX_X_CROSS_CONNECT_RESET_L3_RD_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,7,1)

/**
 * \brief
 * Reset the write port and all four read ports of the Host 0 FIFO
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . H0_FIFO_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_H0_FIFO_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),8,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_H0_FIFO_RESET  LAN80XX_BIT(8)
#define  LAN80XX_X_CROSS_CONNECT_RESET_H0_FIFO_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,8,1)

/**
 * \brief
 * Reset the write port and all four read ports of the Host 1 FIFO
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . H1_FIFO_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_H1_FIFO_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),9,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_H1_FIFO_RESET  LAN80XX_BIT(9)
#define  LAN80XX_X_CROSS_CONNECT_RESET_H1_FIFO_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,9,1)

/**
 * \brief
 * Reset the write port and all four read ports of the Host 2 FIFO
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . H2_FIFO_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_H2_FIFO_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),10,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_H2_FIFO_RESET  LAN80XX_BIT(10)
#define  LAN80XX_X_CROSS_CONNECT_RESET_H2_FIFO_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,10,1)

/**
 * \brief
 * Reset the write port and all four read ports of the Host 3 FIFO
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . H3_FIFO_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_H3_FIFO_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),11,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_H3_FIFO_RESET  LAN80XX_BIT(11)
#define  LAN80XX_X_CROSS_CONNECT_RESET_H3_FIFO_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,11,1)

/**
 * \brief
 * Reset the write port and all four read ports of the Line 0 FIFO
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . L0_FIFO_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_L0_FIFO_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),12,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_L0_FIFO_RESET  LAN80XX_BIT(12)
#define  LAN80XX_X_CROSS_CONNECT_RESET_L0_FIFO_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,12,1)

/**
 * \brief
 * Reset the write port and all four read ports of the Line 1 FIFO
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . L1_FIFO_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_L1_FIFO_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),13,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_L1_FIFO_RESET  LAN80XX_BIT(13)
#define  LAN80XX_X_CROSS_CONNECT_RESET_L1_FIFO_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,13,1)

/**
 * \brief
 * Reset the write port and all four read ports of the Line 2 FIFO
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . L2_FIFO_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_L2_FIFO_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),14,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_L2_FIFO_RESET  LAN80XX_BIT(14)
#define  LAN80XX_X_CROSS_CONNECT_RESET_L2_FIFO_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,14,1)

/**
 * \brief
 * Reset the write port and all four read ports of the Line 3 FIFO
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_RESET . L3_FIFO_RESET
 */
#define  LAN80XX_F_CROSS_CONNECT_RESET_L3_FIFO_RESET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),15,1)
#define  LAN80XX_M_CROSS_CONNECT_RESET_L3_FIFO_RESET  LAN80XX_BIT(15)
#define  LAN80XX_X_CROSS_CONNECT_RESET_L3_FIFO_RESET(x)  LAN80XX_EXTRACT_BITFIELD(x,15,1)

/**
 * Register Group: \a CROSS_CONNECT:EXP_STATUS
 *
 * EXP status registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:EXP_STATUS:STAT1
 */
#define LAN80XX_CROSS_CONNECT_STAT1             LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf103)

/**
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_STAT1 . L3_SEL
 */
#define  LAN80XX_F_CROSS_CONNECT_STAT1_L3_SEL(x)  LAN80XX_ENCODE_BITFIELD(x,14,2)
#define  LAN80XX_M_CROSS_CONNECT_STAT1_L3_SEL     LAN80XX_ENCODE_BITMASK(14,2)
#define  LAN80XX_X_CROSS_CONNECT_STAT1_L3_SEL(x)  LAN80XX_EXTRACT_BITFIELD(x,14,2)

/**
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_STAT1 . L2_SEL
 */
#define  LAN80XX_F_CROSS_CONNECT_STAT1_L2_SEL(x)  LAN80XX_ENCODE_BITFIELD(x,12,2)
#define  LAN80XX_M_CROSS_CONNECT_STAT1_L2_SEL     LAN80XX_ENCODE_BITMASK(12,2)
#define  LAN80XX_X_CROSS_CONNECT_STAT1_L2_SEL(x)  LAN80XX_EXTRACT_BITFIELD(x,12,2)

/**
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_STAT1 . L1_SEL
 */
#define  LAN80XX_F_CROSS_CONNECT_STAT1_L1_SEL(x)  LAN80XX_ENCODE_BITFIELD(x,10,2)
#define  LAN80XX_M_CROSS_CONNECT_STAT1_L1_SEL     LAN80XX_ENCODE_BITMASK(10,2)
#define  LAN80XX_X_CROSS_CONNECT_STAT1_L1_SEL(x)  LAN80XX_EXTRACT_BITFIELD(x,10,2)

/**
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_STAT1 . L0_SEL
 */
#define  LAN80XX_F_CROSS_CONNECT_STAT1_L0_SEL(x)  LAN80XX_ENCODE_BITFIELD(x,8,2)
#define  LAN80XX_M_CROSS_CONNECT_STAT1_L0_SEL     LAN80XX_ENCODE_BITMASK(8,2)
#define  LAN80XX_X_CROSS_CONNECT_STAT1_L0_SEL(x)  LAN80XX_EXTRACT_BITFIELD(x,8,2)

/**
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_STAT1 . H3_SEL
 */
#define  LAN80XX_F_CROSS_CONNECT_STAT1_H3_SEL(x)  LAN80XX_ENCODE_BITFIELD(x,6,2)
#define  LAN80XX_M_CROSS_CONNECT_STAT1_H3_SEL     LAN80XX_ENCODE_BITMASK(6,2)
#define  LAN80XX_X_CROSS_CONNECT_STAT1_H3_SEL(x)  LAN80XX_EXTRACT_BITFIELD(x,6,2)

/**
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_STAT1 . H2_SEL
 */
#define  LAN80XX_F_CROSS_CONNECT_STAT1_H2_SEL(x)  LAN80XX_ENCODE_BITFIELD(x,4,2)
#define  LAN80XX_M_CROSS_CONNECT_STAT1_H2_SEL     LAN80XX_ENCODE_BITMASK(4,2)
#define  LAN80XX_X_CROSS_CONNECT_STAT1_H2_SEL(x)  LAN80XX_EXTRACT_BITFIELD(x,4,2)

/**
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_STAT1 . H1_SEL
 */
#define  LAN80XX_F_CROSS_CONNECT_STAT1_H1_SEL(x)  LAN80XX_ENCODE_BITFIELD(x,2,2)
#define  LAN80XX_M_CROSS_CONNECT_STAT1_H1_SEL     LAN80XX_ENCODE_BITMASK(2,2)
#define  LAN80XX_X_CROSS_CONNECT_STAT1_H1_SEL(x)  LAN80XX_EXTRACT_BITFIELD(x,2,2)

/**
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_STAT1 . H0_SEL
 */
#define  LAN80XX_F_CROSS_CONNECT_STAT1_H0_SEL(x)  LAN80XX_ENCODE_BITFIELD(x,0,2)
#define  LAN80XX_M_CROSS_CONNECT_STAT1_H0_SEL     LAN80XX_ENCODE_BITMASK(0,2)
#define  LAN80XX_X_CROSS_CONNECT_STAT1_H0_SEL(x)  LAN80XX_EXTRACT_BITFIELD(x,0,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:EXP_STATUS:INTR_EN
 */
#define LAN80XX_CROSS_CONNECT_INTR_EN           LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf104)

/**
 * \brief
 * Allow L3_FIFO_ERRO_STICKY to propagate to interrupt
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L3_FIFO_ERROR_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L3_FIFO_ERROR_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),31,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L3_FIFO_ERROR_INTR_EN  LAN80XX_BIT(31)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L3_FIFO_ERROR_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,31,1)

/**
 * \brief
 * Allow L2_FIFO_ERRO_STICKY to propagate to interrupt
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L2_FIFO_ERROR_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L2_FIFO_ERROR_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),30,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L2_FIFO_ERROR_INTR_EN  LAN80XX_BIT(30)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L2_FIFO_ERROR_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,30,1)

/**
 * \brief
 * Allow L1_FIFO_ERRO_STICKY to propagate to interrupt
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L1_FIFO_ERROR_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L1_FIFO_ERROR_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),29,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L1_FIFO_ERROR_INTR_EN  LAN80XX_BIT(29)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L1_FIFO_ERROR_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,29,1)

/**
 * \brief
 * Allow L0_FIFO_ERRO_STICKY to propagate to interrupt
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L0_FIFO_ERROR_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L0_FIFO_ERROR_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),28,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L0_FIFO_ERROR_INTR_EN  LAN80XX_BIT(28)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L0_FIFO_ERROR_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,28,1)

/**
 * \brief
 * Allow H3_FIFO_ERRO_STICKY to propagate to interrupt
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H3_FIFO_ERROR_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H3_FIFO_ERROR_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),27,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H3_FIFO_ERROR_INTR_EN  LAN80XX_BIT(27)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H3_FIFO_ERROR_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,27,1)

/**
 * \brief
 * Allow H2_FIFO_ERRO_STICKY to propagate to interrupt
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H2_FIFO_ERROR_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H2_FIFO_ERROR_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),26,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H2_FIFO_ERROR_INTR_EN  LAN80XX_BIT(26)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H2_FIFO_ERROR_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,26,1)

/**
 * \brief
 * Allow H1_FIFO_ERRO_STICKY to propagate to interrupt
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H1_FIFO_ERROR_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H1_FIFO_ERROR_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),25,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H1_FIFO_ERROR_INTR_EN  LAN80XX_BIT(25)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H1_FIFO_ERROR_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,25,1)

/**
 * \brief
 * Allow H0_FIFO_ERRO_STICKY to propagate to interrupt
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H0_FIFO_ERROR_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H0_FIFO_ERROR_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),24,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H0_FIFO_ERROR_INTR_EN  LAN80XX_BIT(24)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H0_FIFO_ERROR_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,24,1)

/**
 * \brief
 * Allow L3_COND_ALT_UNF_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L3_COND_ALT_UNF_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L3_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),23,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L3_COND_ALT_UNF_DET_INTR_EN  LAN80XX_BIT(23)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L3_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,23,1)

/**
 * \brief
 * Allow L2_COND_ALT_UNF_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L2_COND_ALT_UNF_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L2_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),22,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L2_COND_ALT_UNF_DET_INTR_EN  LAN80XX_BIT(22)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L2_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,22,1)

/**
 * \brief
 * Allow L1_COND_ALT_UNF_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L1_COND_ALT_UNF_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L1_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),21,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L1_COND_ALT_UNF_DET_INTR_EN  LAN80XX_BIT(21)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L1_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,21,1)

/**
 * \brief
 * Allow L0_COND_ALT_UNF_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L0_COND_ALT_UNF_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L0_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),20,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L0_COND_ALT_UNF_DET_INTR_EN  LAN80XX_BIT(20)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L0_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,20,1)

/**
 * \brief
 * Allow H3_COND_ALT_UNF_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H3_COND_ALT_UNF_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H3_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),19,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H3_COND_ALT_UNF_DET_INTR_EN  LAN80XX_BIT(19)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H3_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,19,1)

/**
 * \brief
 * Allow H2_COND_ALT_UNF_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H2_COND_ALT_UNF_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H2_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),18,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H2_COND_ALT_UNF_DET_INTR_EN  LAN80XX_BIT(18)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H2_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,18,1)

/**
 * \brief
 * Allow H1_COND_ALT_UNF_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H1_COND_ALT_UNF_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H1_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),17,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H1_COND_ALT_UNF_DET_INTR_EN  LAN80XX_BIT(17)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H1_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,17,1)

/**
 * \brief
 * Allow H0_COND_ALT_UNF_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H0_COND_ALT_UNF_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H0_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),16,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H0_COND_ALT_UNF_DET_INTR_EN  LAN80XX_BIT(16)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H0_COND_ALT_UNF_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,16,1)

/**
 * \brief
 * Allow L3_COND_ALT_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L3_COND_ALT_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L3_COND_ALT_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),15,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L3_COND_ALT_DET_INTR_EN  LAN80XX_BIT(15)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L3_COND_ALT_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,15,1)

/**
 * \brief
 * Allow L2_COND_ALT_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L2_COND_ALT_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L2_COND_ALT_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),14,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L2_COND_ALT_DET_INTR_EN  LAN80XX_BIT(14)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L2_COND_ALT_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,14,1)

/**
 * \brief
 * Allow L1_COND_ALT_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L1_COND_ALT_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L1_COND_ALT_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),13,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L1_COND_ALT_DET_INTR_EN  LAN80XX_BIT(13)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L1_COND_ALT_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,13,1)

/**
 * \brief
 * Allow L0_COND_ALT_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L0_COND_ALT_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L0_COND_ALT_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),12,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L0_COND_ALT_DET_INTR_EN  LAN80XX_BIT(12)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L0_COND_ALT_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,12,1)

/**
 * \brief
 * Allow H3_COND_ALT_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H3_COND_ALT_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H3_COND_ALT_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),11,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H3_COND_ALT_DET_INTR_EN  LAN80XX_BIT(11)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H3_COND_ALT_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,11,1)

/**
 * \brief
 * Allow H2_COND_ALT_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H2_COND_ALT_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H2_COND_ALT_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),10,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H2_COND_ALT_DET_INTR_EN  LAN80XX_BIT(10)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H2_COND_ALT_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,10,1)

/**
 * \brief
 * Allow H1_COND_ALT_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H1_COND_ALT_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H1_COND_ALT_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),9,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H1_COND_ALT_DET_INTR_EN  LAN80XX_BIT(9)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H1_COND_ALT_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,9,1)

/**
 * \brief
 * Allow H0_COND_ALT_DET_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H0_COND_ALT_DET_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H0_COND_ALT_DET_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),8,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H0_COND_ALT_DET_INTR_EN  LAN80XX_BIT(8)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H0_COND_ALT_DET_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,8,1)

/**
 * \brief
 * Enable L3_SWITCH_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L3_SWITCH_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L3_SWITCH_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),7,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L3_SWITCH_INTR_EN  LAN80XX_BIT(7)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L3_SWITCH_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,7,1)

/**
 * \brief
 * Enable L2_SWITCH_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L2_SWITCH_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L2_SWITCH_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),6,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L2_SWITCH_INTR_EN  LAN80XX_BIT(6)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L2_SWITCH_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,6,1)

/**
 * \brief
 * Enable L1_SWITCH_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L1_SWITCH_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L1_SWITCH_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L1_SWITCH_INTR_EN  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L1_SWITCH_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Enable L0_SWITCH_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . L0_SWITCH_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_L0_SWITCH_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_L0_SWITCH_INTR_EN  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_L0_SWITCH_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Enable H3_SWITCH_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H3_SWITCH_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H3_SWITCH_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H3_SWITCH_INTR_EN  LAN80XX_BIT(3)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H3_SWITCH_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Enable H2_SWITCH_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H2_SWITCH_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H2_SWITCH_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H2_SWITCH_INTR_EN  LAN80XX_BIT(2)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H2_SWITCH_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * Enable H1_SWITCH_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H1_SWITCH_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H1_SWITCH_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H1_SWITCH_INTR_EN  LAN80XX_BIT(1)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H1_SWITCH_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Enable H0_SWITCH_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN . H0_SWITCH_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN_H0_SWITCH_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN_H0_SWITCH_INTR_EN  LAN80XX_BIT(0)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN_H0_SWITCH_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \details
 * Register: \a CROSS_CONNECT:EXP_STATUS:INTR
 */
#define LAN80XX_CROSS_CONNECT_INTR              LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf105)

/**
 * \brief
 * Error detected in FIFO on line port 3. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L3_FIFO_ERROR_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L3_FIFO_ERROR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),31,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L3_FIFO_ERROR_STICKY  LAN80XX_BIT(31)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L3_FIFO_ERROR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,31,1)

/**
 * \brief
 * Error detected in FIFO on line port 2. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L2_FIFO_ERROR_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L2_FIFO_ERROR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),30,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L2_FIFO_ERROR_STICKY  LAN80XX_BIT(30)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L2_FIFO_ERROR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,30,1)

/**
 * \brief
 * Error detected in FIFO on line port 1. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L1_FIFO_ERROR_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L1_FIFO_ERROR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),29,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L1_FIFO_ERROR_STICKY  LAN80XX_BIT(29)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L1_FIFO_ERROR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,29,1)

/**
 * \brief
 * Error detected in FIFO on line port 0. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L0_FIFO_ERROR_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L0_FIFO_ERROR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),28,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L0_FIFO_ERROR_STICKY  LAN80XX_BIT(28)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L0_FIFO_ERROR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,28,1)

/**
 * \brief
 * Error detected in FIFO on host port 3. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H3_FIFO_ERROR_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H3_FIFO_ERROR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),27,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H3_FIFO_ERROR_STICKY  LAN80XX_BIT(27)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H3_FIFO_ERROR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,27,1)

/**
 * \brief
 * Error detected in FIFO on host port 2. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H2_FIFO_ERROR_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H2_FIFO_ERROR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),26,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H2_FIFO_ERROR_STICKY  LAN80XX_BIT(26)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H2_FIFO_ERROR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,26,1)

/**
 * \brief
 * Error detected in FIFO on host port 1. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H1_FIFO_ERROR_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H1_FIFO_ERROR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),25,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H1_FIFO_ERROR_STICKY  LAN80XX_BIT(25)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H1_FIFO_ERROR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,25,1)

/**
 * \brief
 * Error detected in FIFO on host port 0. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H0_FIFO_ERROR_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H0_FIFO_ERROR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),24,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H0_FIFO_ERROR_STICKY  LAN80XX_BIT(24)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H0_FIFO_ERROR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,24,1)

/**
 * \brief
 * L3 COND_ALT (unfiltered) change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L3_COND_ALT_UNF_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L3_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),23,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L3_COND_ALT_UNF_DET_STICKY  LAN80XX_BIT(23)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L3_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,23,1)

/**
 * \brief
 * L2 COND_ALT (unfiltered) change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L2_COND_ALT_UNF_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L2_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),22,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L2_COND_ALT_UNF_DET_STICKY  LAN80XX_BIT(22)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L2_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,22,1)

/**
 * \brief
 * L1 COND_ALT (unfiltered) change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L1_COND_ALT_UNF_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L1_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),21,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L1_COND_ALT_UNF_DET_STICKY  LAN80XX_BIT(21)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L1_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,21,1)

/**
 * \brief
 * L0 COND_ALT (unfiltered) change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L0_COND_ALT_UNF_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L0_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),20,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L0_COND_ALT_UNF_DET_STICKY  LAN80XX_BIT(20)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L0_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,20,1)

/**
 * \brief
 * H3 COND_ALT (unfiltered) change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H3_COND_ALT_UNF_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H3_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),19,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H3_COND_ALT_UNF_DET_STICKY  LAN80XX_BIT(19)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H3_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,19,1)

/**
 * \brief
 * H2 COND_ALT (unfiltered) change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H2_COND_ALT_UNF_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H2_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),18,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H2_COND_ALT_UNF_DET_STICKY  LAN80XX_BIT(18)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H2_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,18,1)

/**
 * \brief
 * H1 COND_ALT (unfiltered) change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H1_COND_ALT_UNF_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H1_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),17,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H1_COND_ALT_UNF_DET_STICKY  LAN80XX_BIT(17)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H1_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,17,1)

/**
 * \brief
 * H0 COND_ALT (unfiltered) change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H0_COND_ALT_UNF_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H0_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),16,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H0_COND_ALT_UNF_DET_STICKY  LAN80XX_BIT(16)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H0_COND_ALT_UNF_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,16,1)

/**
 * \brief
 * L3 filetered COND_ALT change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L3_COND_ALT_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L3_COND_ALT_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),15,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L3_COND_ALT_DET_STICKY  LAN80XX_BIT(15)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L3_COND_ALT_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,15,1)

/**
 * \brief
 * L2 filetered COND_ALT change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L2_COND_ALT_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L2_COND_ALT_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),14,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L2_COND_ALT_DET_STICKY  LAN80XX_BIT(14)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L2_COND_ALT_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,14,1)

/**
 * \brief
 * L1 filetered COND_ALT change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L1_COND_ALT_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L1_COND_ALT_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),13,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L1_COND_ALT_DET_STICKY  LAN80XX_BIT(13)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L1_COND_ALT_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,13,1)

/**
 * \brief
 * L0 filetered COND_ALT change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L0_COND_ALT_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L0_COND_ALT_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),12,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L0_COND_ALT_DET_STICKY  LAN80XX_BIT(12)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L0_COND_ALT_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,12,1)

/**
 * \brief
 * H3 filetered COND_ALT change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H3_COND_ALT_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H3_COND_ALT_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),11,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H3_COND_ALT_DET_STICKY  LAN80XX_BIT(11)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H3_COND_ALT_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,11,1)

/**
 * \brief
 * H2 filetered COND_ALT change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H2_COND_ALT_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H2_COND_ALT_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),10,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H2_COND_ALT_DET_STICKY  LAN80XX_BIT(10)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H2_COND_ALT_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,10,1)

/**
 * \brief
 * H1 filetered COND_ALT change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H1_COND_ALT_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H1_COND_ALT_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),9,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H1_COND_ALT_DET_STICKY  LAN80XX_BIT(9)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H1_COND_ALT_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,9,1)

/**
 * \brief
 * H0 filetered COND_ALT change detected. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H0_COND_ALT_DET_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H0_COND_ALT_DET_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),8,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H0_COND_ALT_DET_STICKY  LAN80XX_BIT(8)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H0_COND_ALT_DET_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,8,1)

/**
 * \brief
 * L3 source selection has changed. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L3_SWITCH_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L3_SWITCH_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),7,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L3_SWITCH_STICKY  LAN80XX_BIT(7)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L3_SWITCH_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,7,1)

/**
 * \brief
 * L2 source selection has changed. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L2_SWITCH_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L2_SWITCH_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),6,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L2_SWITCH_STICKY  LAN80XX_BIT(6)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L2_SWITCH_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,6,1)

/**
 * \brief
 * L1 source selection has changed. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L1_SWITCH_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L1_SWITCH_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L1_SWITCH_STICKY  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L1_SWITCH_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * L0 source selection has changed. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . L0_SWITCH_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_L0_SWITCH_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_L0_SWITCH_STICKY  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_INTR_L0_SWITCH_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * H3 source selection has changed. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H3_SWITCH_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H3_SWITCH_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H3_SWITCH_STICKY  LAN80XX_BIT(3)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H3_SWITCH_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * H2 source selection has changed. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H2_SWITCH_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H2_SWITCH_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H2_SWITCH_STICKY  LAN80XX_BIT(2)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H2_SWITCH_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * H1 source selection has changed. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H1_SWITCH_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H1_SWITCH_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H1_SWITCH_STICKY  LAN80XX_BIT(1)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H1_SWITCH_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * H0 source selection has changed. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR . H0_SWITCH_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_H0_SWITCH_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_H0_SWITCH_STICKY  LAN80XX_BIT(0)
#define  LAN80XX_X_CROSS_CONNECT_INTR_H0_SWITCH_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \details
 * Register: \a CROSS_CONNECT:EXP_STATUS:INTR_EN2
 */
#define LAN80XX_CROSS_CONNECT_INTR_EN2          LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf106)

/**
 * \brief
 * Enable WPS_FAILOVER_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN2 . WPS0_FAILOVER_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN2_WPS0_FAILOVER_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN2_WPS0_FAILOVER_INTR_EN  LAN80XX_BIT(0)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN2_WPS0_FAILOVER_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * Enable WPS_FAILOVER_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN2 . WPS1_FAILOVER_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN2_WPS1_FAILOVER_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN2_WPS1_FAILOVER_INTR_EN  LAN80XX_BIT(1)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN2_WPS1_FAILOVER_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Enable WPS_CONN_FAULT_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN2 . WPS0_CONN_FAULT_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN2_WPS0_CONN_FAULT_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN2_WPS0_CONN_FAULT_INTR_EN  LAN80XX_BIT(2)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN2_WPS0_CONN_FAULT_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * Enable WPS_CONN_FAULT_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN2 . WPS1_CONN_FAULT_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN2_WPS1_CONN_FAULT_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN2_WPS1_CONN_FAULT_INTR_EN  LAN80XX_BIT(3)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN2_WPS1_CONN_FAULT_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Enable WPS_FC_ACK_TIMER_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN2 . WPS0_FC_ACK_TIMER_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN2_WPS0_FC_ACK_TIMER_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN2_WPS0_FC_ACK_TIMER_INTR_EN  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN2_WPS0_FC_ACK_TIMER_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Enable WPS_FC_ACK_TIMER_STICKY to propagate to INTR
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR_EN2 . WPS1_FC_ACK_TIMER_INTR_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR_EN2_WPS1_FC_ACK_TIMER_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR_EN2_WPS1_FC_ACK_TIMER_INTR_EN  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_INTR_EN2_WPS1_FC_ACK_TIMER_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)


/**
 * \details
 * Register: \a CROSS_CONNECT:EXP_STATUS:INTR2
 */
#define LAN80XX_CROSS_CONNECT_INTR2             LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf107)

/**
 * \brief
 * WPS FAILOVER is triggered. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR2 . WPS0_FAILOVER_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR2_WPS0_FAILOVER_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR2_WPS0_FAILOVER_STICKY  LAN80XX_BIT(0)
#define  LAN80XX_X_CROSS_CONNECT_INTR2_WPS0_FAILOVER_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * WPS FAILOVER is triggered. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR2 . WPS1_FAILOVER_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR2_WPS1_FAILOVER_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR2_WPS1_FAILOVER_STICKY  LAN80XX_BIT(1)
#define  LAN80XX_X_CROSS_CONNECT_INTR2_WPS1_FAILOVER_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * WPS CONN FAULT is triggered. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR2 . WPS0_CONN_FAULT_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR2_WPS0_CONN_FAULT_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR2_WPS0_CONN_FAULT_STICKY  LAN80XX_BIT(2)
#define  LAN80XX_X_CROSS_CONNECT_INTR2_WPS0_CONN_FAULT_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * WPS CONN FAULT is triggered. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR2 . WPS1_CONN_FAULT_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR2_WPS1_CONN_FAULT_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR2_WPS1_CONN_FAULT_STICKY  LAN80XX_BIT(3)
#define  LAN80XX_X_CROSS_CONNECT_INTR2_WPS1_CONN_FAULT_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * WPS FC ACK TIMER is triggered. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR2 . WPS0_FC_ACK_TIMER_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR2_WPS0_FC_ACK_TIMER_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR2_WPS0_FC_ACK_TIMER_STICKY  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_INTR2_WPS0_FC_ACK_TIMER_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * WPS FC ACK TIMER is triggered. Write one to clear.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_INTR2 . WPS1_FC_ACK_TIMER_STICKY
 */
#define  LAN80XX_F_CROSS_CONNECT_INTR2_WPS1_FC_ACK_TIMER_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_INTR2_WPS1_FC_ACK_TIMER_STICKY  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_INTR2_WPS1_FC_ACK_TIMER_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * Register Group: \a CROSS_CONNECT:HOST0_CFG
 *
 * HOST0 configuration registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:HOST0_CFG:H0_SRC_SEL
 */
#define LAN80XX_CROSS_CONNECT_H0_SRC_SEL        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf108)

/**
 * \brief
 * Event source used to trigger a switch to ALT_CH
 *
 * \details
 * 0 = GPIO0
 * 1 = GPIO1
 * 2 = GPIO2
 * 3 = GPIO3
 * 4 = GPIO4
 * 5 = GPIO5
 * 6 = GPIO6
 * 7 = GPIO7
 * 8 = Always false
 * 9 = Always false
 * 10 = Always false
 * 11 = Always false
 * 12 = Line 0 link status
 * 13 = Line 1 link status
 * 14 = Line 2 link status
 * 15 = Line 3 link status
 * 16 = Line 0 serdes los
 * 17 = Line 1 serdes los
 * 18 = Line 2 serdes los
 * 19 = Line 3 serdes los
 * 20 = Line 0 10g wis lof
 * 21 = Line 1 10g wis lof
 * 22 = Line 2 10g wis lof
 * 23 = Line 3 10g wis lof
 * 24 = Always false
 * 25 = Always false
 * 26 = Always false
 * 27 = Always false
 * 28 = Always false
 * 29 = Always false
 * 30 = Always false
 * 31 = Always true

 *
 * Field: ::LAN80XX_CROSS_CONNECT_H0_SRC_SEL . ALT_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_H0_SRC_SEL_ALT_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,8,5)
#define  LAN80XX_M_CROSS_CONNECT_H0_SRC_SEL_ALT_SRC     LAN80XX_ENCODE_BITMASK(8,5)
#define  LAN80XX_X_CROSS_CONNECT_H0_SRC_SEL_ALT_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,8,5)

/**
 * \brief
 * Enable filtering of condition source
 *
 * \details
 * 0 = No filtering (assertion of selected condition source causes
 * immediate switch to ALT_CH)
 * 1 = Filtering enabled
 *
 * Field: ::LAN80XX_CROSS_CONNECT_H0_SRC_SEL . FILTER_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_H0_SRC_SEL_FILTER_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_H0_SRC_SEL_FILTER_EN  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_H0_SRC_SEL_FILTER_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Enable conditional switching to ALTernate channel
 *
 * \details
 * 0 = Force default channel
 * 1 = Allow switching to ALTernate channel based on source selection and
 * filtering
 *
 * Field: ::LAN80XX_CROSS_CONNECT_H0_SRC_SEL . ALT_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_H0_SRC_SEL_ALT_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_H0_SRC_SEL_ALT_EN  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_H0_SRC_SEL_ALT_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Alternate line rx from which host tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H0_SRC_SEL . ALT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_H0_SRC_SEL_ALT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,2,2)
#define  LAN80XX_M_CROSS_CONNECT_H0_SRC_SEL_ALT_CH     LAN80XX_ENCODE_BITMASK(2,2)
#define  LAN80XX_X_CROSS_CONNECT_H0_SRC_SEL_ALT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,2,2)

/**
 * \brief
 * Default line rx from which host tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H0_SRC_SEL . DEFAULT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_H0_SRC_SEL_DEFAULT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,0,2)
#define  LAN80XX_M_CROSS_CONNECT_H0_SRC_SEL_DEFAULT_CH     LAN80XX_ENCODE_BITMASK(0,2)
#define  LAN80XX_X_CROSS_CONNECT_H0_SRC_SEL_DEFAULT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:HOST0_CFG:H0_FILTER
 */
#define LAN80XX_CROSS_CONNECT_H0_FILTER         LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf109)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB2316 is the
 * upper 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H0_FILTER . COUNTB2316
 */
#define  LAN80XX_F_CROSS_CONNECT_H0_FILTER_COUNTB2316(x)  LAN80XX_ENCODE_BITFIELD(x,24,8)
#define  LAN80XX_M_CROSS_CONNECT_H0_FILTER_COUNTB2316     LAN80XX_ENCODE_BITMASK(24,8)
#define  LAN80XX_X_CROSS_CONNECT_H0_FILTER_COUNTB2316(x)  LAN80XX_EXTRACT_BITFIELD(x,24,8)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB70 is the
 * lower 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H0_FILTER . COUNTB70
 */
#define  LAN80XX_F_CROSS_CONNECT_H0_FILTER_COUNTB70(x)  LAN80XX_ENCODE_BITFIELD(x,16,8)
#define  LAN80XX_M_CROSS_CONNECT_H0_FILTER_COUNTB70     LAN80XX_ENCODE_BITMASK(16,8)
#define  LAN80XX_X_CROSS_CONNECT_H0_FILTER_COUNTB70(x)  LAN80XX_EXTRACT_BITFIELD(x,16,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA2316 is the upper
 * 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H0_FILTER . COUNTA2316
 */
#define  LAN80XX_F_CROSS_CONNECT_H0_FILTER_COUNTA2316(x)  LAN80XX_ENCODE_BITFIELD(x,8,8)
#define  LAN80XX_M_CROSS_CONNECT_H0_FILTER_COUNTA2316     LAN80XX_ENCODE_BITMASK(8,8)
#define  LAN80XX_X_CROSS_CONNECT_H0_FILTER_COUNTA2316(x)  LAN80XX_EXTRACT_BITFIELD(x,8,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA70 is the lower 8
 * bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H0_FILTER . COUNTA70
 */
#define  LAN80XX_F_CROSS_CONNECT_H0_FILTER_COUNTA70(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_H0_FILTER_COUNTA70     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_H0_FILTER_COUNTA70(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)

/**
 * Register Group: \a CROSS_CONNECT:HOST1_CFG
 *
 * HOST1 configuration registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:HOST1_CFG:H1_SRC_SEL
 */
#define LAN80XX_CROSS_CONNECT_H1_SRC_SEL        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf10a)

/**
 * \brief
 * Event source used to trigger a switch to ALT_CH
 *
 * \details
 * 0 = GPIO0
 * 1 = GPIO1
 * 2 = GPIO2
 * 3 = GPIO3
 * 4 = GPIO4
 * 5 = GPIO5
 * 6 = GPIO6
 * 7 = GPIO7
 * 8 = Always false
 * 9 = Always false
 * 10 = Always false
 * 11 = Always false
 * 12 = Line 0 link status
 * 13 = Line 1 link status
 * 14 = Line 2 link status
 * 15 = Line 3 link status
 * 16 = Line 0 serdes los
 * 17 = Line 1 serdes los
 * 18 = Line 2 serdes los
 * 19 = Line 3 serdes los
 * 20 = Line 0 10g wis lof
 * 21 = Line 1 10g wis lof
 * 22 = Line 2 10g wis lof
 * 23 = Line 3 10g wis lof
 * 24 = Always false
 * 25 = Always false
 * 26 = Always false
 * 27 = Always false
 * 28 = Always false
 * 29 = Always false
 * 30 = Always false
 * 31 = Always true

 *
 * Field: ::LAN80XX_CROSS_CONNECT_H1_SRC_SEL . ALT_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_H1_SRC_SEL_ALT_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,8,5)
#define  LAN80XX_M_CROSS_CONNECT_H1_SRC_SEL_ALT_SRC     LAN80XX_ENCODE_BITMASK(8,5)
#define  LAN80XX_X_CROSS_CONNECT_H1_SRC_SEL_ALT_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,8,5)

/**
 * \brief
 * Enable filtering of condition source
 *
 * \details
 * 0 = No filtering (assertion of selected condition source causes
 * immediate switch to ALT_CH)
 * 1 = Filtering enabled
 *
 * Field: ::LAN80XX_CROSS_CONNECT_H1_SRC_SEL . FILTER_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_H1_SRC_SEL_FILTER_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_H1_SRC_SEL_FILTER_EN  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_H1_SRC_SEL_FILTER_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Enable conditional switching to ALTernate channel
 *
 * \details
 * 0 = Force default channel
 * 1 = Allow switching to ALTernate channel based on source selection and
 * filtering
 *
 * Field: ::LAN80XX_CROSS_CONNECT_H1_SRC_SEL . ALT_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_H1_SRC_SEL_ALT_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_H1_SRC_SEL_ALT_EN  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_H1_SRC_SEL_ALT_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Alternate line rx from which host tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H1_SRC_SEL . ALT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_H1_SRC_SEL_ALT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,2,2)
#define  LAN80XX_M_CROSS_CONNECT_H1_SRC_SEL_ALT_CH     LAN80XX_ENCODE_BITMASK(2,2)
#define  LAN80XX_X_CROSS_CONNECT_H1_SRC_SEL_ALT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,2,2)

/**
 * \brief
 * Default line rx from which host tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H1_SRC_SEL . DEFAULT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_H1_SRC_SEL_DEFAULT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,0,2)
#define  LAN80XX_M_CROSS_CONNECT_H1_SRC_SEL_DEFAULT_CH     LAN80XX_ENCODE_BITMASK(0,2)
#define  LAN80XX_X_CROSS_CONNECT_H1_SRC_SEL_DEFAULT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:HOST1_CFG:H1_FILTER
 */
#define LAN80XX_CROSS_CONNECT_H1_FILTER         LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf10b)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB2316 is the
 * upper 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H1_FILTER . COUNTB2316
 */
#define  LAN80XX_F_CROSS_CONNECT_H1_FILTER_COUNTB2316(x)  LAN80XX_ENCODE_BITFIELD(x,24,8)
#define  LAN80XX_M_CROSS_CONNECT_H1_FILTER_COUNTB2316     LAN80XX_ENCODE_BITMASK(24,8)
#define  LAN80XX_X_CROSS_CONNECT_H1_FILTER_COUNTB2316(x)  LAN80XX_EXTRACT_BITFIELD(x,24,8)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB70 is the
 * lower 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H1_FILTER . COUNTB70
 */
#define  LAN80XX_F_CROSS_CONNECT_H1_FILTER_COUNTB70(x)  LAN80XX_ENCODE_BITFIELD(x,16,8)
#define  LAN80XX_M_CROSS_CONNECT_H1_FILTER_COUNTB70     LAN80XX_ENCODE_BITMASK(16,8)
#define  LAN80XX_X_CROSS_CONNECT_H1_FILTER_COUNTB70(x)  LAN80XX_EXTRACT_BITFIELD(x,16,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA2316 is the upper
 * 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H1_FILTER . COUNTA2316
 */
#define  LAN80XX_F_CROSS_CONNECT_H1_FILTER_COUNTA2316(x)  LAN80XX_ENCODE_BITFIELD(x,8,8)
#define  LAN80XX_M_CROSS_CONNECT_H1_FILTER_COUNTA2316     LAN80XX_ENCODE_BITMASK(8,8)
#define  LAN80XX_X_CROSS_CONNECT_H1_FILTER_COUNTA2316(x)  LAN80XX_EXTRACT_BITFIELD(x,8,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA70 is the lower 8
 * bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H1_FILTER . COUNTA70
 */
#define  LAN80XX_F_CROSS_CONNECT_H1_FILTER_COUNTA70(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_H1_FILTER_COUNTA70     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_H1_FILTER_COUNTA70(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)

/**
 * Register Group: \a CROSS_CONNECT:HOST2_CFG
 *
 * HOST2 configuration registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:HOST2_CFG:H2_SRC_SEL
 */
#define LAN80XX_CROSS_CONNECT_H2_SRC_SEL        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf10c)

/**
 * \brief
 * Event source used to trigger a switch to ALT_CH
 *
 * \details
 * 0 = GPIO0
 * 1 = GPIO1
 * 2 = GPIO2
 * 3 = GPIO3
 * 4 = GPIO4
 * 5 = GPIO5
 * 6 = GPIO6
 * 7 = GPIO7
 * 8 = Always false
 * 9 = Always false
 * 10 = Always false
 * 11 = Always false
 * 12 = Line 0 link status
 * 13 = Line 1 link status
 * 14 = Line 2 link status
 * 15 = Line 3 link status
 * 16 = Line 0 serdes los
 * 17 = Line 1 serdes los
 * 18 = Line 2 serdes los
 * 19 = Line 3 serdes los
 * 20 = Line 0 10g wis lof
 * 21 = Line 1 10g wis lof
 * 22 = Line 2 10g wis lof
 * 23 = Line 3 10g wis lof
 * 24 = Always false
 * 25 = Always false
 * 26 = Always false
 * 27 = Always false
 * 28 = Always false
 * 29 = Always false
 * 30 = Always false
 * 31 = Always true

 *
 * Field: ::LAN80XX_CROSS_CONNECT_H2_SRC_SEL . ALT_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_H2_SRC_SEL_ALT_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,8,5)
#define  LAN80XX_M_CROSS_CONNECT_H2_SRC_SEL_ALT_SRC     LAN80XX_ENCODE_BITMASK(8,5)
#define  LAN80XX_X_CROSS_CONNECT_H2_SRC_SEL_ALT_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,8,5)

/**
 * \brief
 * Enable filtering of condition source
 *
 * \details
 * 0 = No filtering (assertion of selected condition source causes
 * immediate switch to ALT_CH)
 * 1 = Filtering enabled
 *
 * Field: ::LAN80XX_CROSS_CONNECT_H2_SRC_SEL . FILTER_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_H2_SRC_SEL_FILTER_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_H2_SRC_SEL_FILTER_EN  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_H2_SRC_SEL_FILTER_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Enable conditional switching to ALTernate channel
 *
 * \details
 * 0 = Force default channel
 * 1 = Allow switching to ALTernate channel based on source selection and
 * filtering
 *
 * Field: ::LAN80XX_CROSS_CONNECT_H2_SRC_SEL . ALT_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_H2_SRC_SEL_ALT_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_H2_SRC_SEL_ALT_EN  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_H2_SRC_SEL_ALT_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Alternate line rx from which host tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H2_SRC_SEL . ALT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_H2_SRC_SEL_ALT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,2,2)
#define  LAN80XX_M_CROSS_CONNECT_H2_SRC_SEL_ALT_CH     LAN80XX_ENCODE_BITMASK(2,2)
#define  LAN80XX_X_CROSS_CONNECT_H2_SRC_SEL_ALT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,2,2)

/**
 * \brief
 * Default line rx from which host tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H2_SRC_SEL . DEFAULT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_H2_SRC_SEL_DEFAULT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,0,2)
#define  LAN80XX_M_CROSS_CONNECT_H2_SRC_SEL_DEFAULT_CH     LAN80XX_ENCODE_BITMASK(0,2)
#define  LAN80XX_X_CROSS_CONNECT_H2_SRC_SEL_DEFAULT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:HOST2_CFG:H2_FILTER
 */
#define LAN80XX_CROSS_CONNECT_H2_FILTER         LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf10d)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB2316 is the
 * upper 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H2_FILTER . COUNTB2316
 */
#define  LAN80XX_F_CROSS_CONNECT_H2_FILTER_COUNTB2316(x)  LAN80XX_ENCODE_BITFIELD(x,24,8)
#define  LAN80XX_M_CROSS_CONNECT_H2_FILTER_COUNTB2316     LAN80XX_ENCODE_BITMASK(24,8)
#define  LAN80XX_X_CROSS_CONNECT_H2_FILTER_COUNTB2316(x)  LAN80XX_EXTRACT_BITFIELD(x,24,8)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB70 is the
 * lower 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H2_FILTER . COUNTB70
 */
#define  LAN80XX_F_CROSS_CONNECT_H2_FILTER_COUNTB70(x)  LAN80XX_ENCODE_BITFIELD(x,16,8)
#define  LAN80XX_M_CROSS_CONNECT_H2_FILTER_COUNTB70     LAN80XX_ENCODE_BITMASK(16,8)
#define  LAN80XX_X_CROSS_CONNECT_H2_FILTER_COUNTB70(x)  LAN80XX_EXTRACT_BITFIELD(x,16,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA2316 is the upper
 * 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H2_FILTER . COUNTA2316
 */
#define  LAN80XX_F_CROSS_CONNECT_H2_FILTER_COUNTA2316(x)  LAN80XX_ENCODE_BITFIELD(x,8,8)
#define  LAN80XX_M_CROSS_CONNECT_H2_FILTER_COUNTA2316     LAN80XX_ENCODE_BITMASK(8,8)
#define  LAN80XX_X_CROSS_CONNECT_H2_FILTER_COUNTA2316(x)  LAN80XX_EXTRACT_BITFIELD(x,8,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA70 is the lower 8
 * bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H2_FILTER . COUNTA70
 */
#define  LAN80XX_F_CROSS_CONNECT_H2_FILTER_COUNTA70(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_H2_FILTER_COUNTA70     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_H2_FILTER_COUNTA70(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)

/**
 * Register Group: \a CROSS_CONNECT:HOST3_CFG
 *
 * HOST3 configuration registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:HOST3_CFG:H3_SRC_SEL
 */
#define LAN80XX_CROSS_CONNECT_H3_SRC_SEL        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf10e)

/**
 * \brief
 * Event source used to trigger a switch to ALT_CH
 *
 * \details
 * 0 = GPIO0
 * 1 = GPIO1
 * 2 = GPIO2
 * 3 = GPIO3
 * 4 = GPIO4
 * 5 = GPIO5
 * 6 = GPIO6
 * 7 = GPIO7
 * 8 = Always false
 * 9 = Always false
 * 10 = Always false
 * 11 = Always false
 * 12 = Line 0 link status
 * 13 = Line 1 link status
 * 14 = Line 2 link status
 * 15 = Line 3 link status
 * 16 = Line 0 serdes los
 * 17 = Line 1 serdes los
 * 18 = Line 2 serdes los
 * 19 = Line 3 serdes los
 * 20 = Line 0 10g wis lof
 * 21 = Line 1 10g wis lof
 * 22 = Line 2 10g wis lof
 * 23 = Line 3 10g wis lof
 * 24 = Always false
 * 25 = Always false
 * 26 = Always false
 * 27 = Always false
 * 28 = Always false
 * 29 = Always false
 * 30 = Always false
 * 31 = Always true

 *
 * Field: ::LAN80XX_CROSS_CONNECT_H3_SRC_SEL . ALT_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_H3_SRC_SEL_ALT_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,8,5)
#define  LAN80XX_M_CROSS_CONNECT_H3_SRC_SEL_ALT_SRC     LAN80XX_ENCODE_BITMASK(8,5)
#define  LAN80XX_X_CROSS_CONNECT_H3_SRC_SEL_ALT_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,8,5)

/**
 * \brief
 * Enable filtering of condition source
 *
 * \details
 * 0 = No filtering (assertion of selected condition source causes
 * immediate switch to ALT_CH)
 * 1 = Filtering enabled
 *
 * Field: ::LAN80XX_CROSS_CONNECT_H3_SRC_SEL . FILTER_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_H3_SRC_SEL_FILTER_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_H3_SRC_SEL_FILTER_EN  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_H3_SRC_SEL_FILTER_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Enable conditional switching to ALTernate channel
 *
 * \details
 * 0 = Force default channel
 * 1 = Allow switching to ALTernate channel based on source selection and
 * filtering
 *
 * Field: ::LAN80XX_CROSS_CONNECT_H3_SRC_SEL . ALT_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_H3_SRC_SEL_ALT_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_H3_SRC_SEL_ALT_EN  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_H3_SRC_SEL_ALT_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Alternate line rx from which host tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H3_SRC_SEL . ALT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_H3_SRC_SEL_ALT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,2,2)
#define  LAN80XX_M_CROSS_CONNECT_H3_SRC_SEL_ALT_CH     LAN80XX_ENCODE_BITMASK(2,2)
#define  LAN80XX_X_CROSS_CONNECT_H3_SRC_SEL_ALT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,2,2)

/**
 * \brief
 * Default line rx from which host tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H3_SRC_SEL . DEFAULT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_H3_SRC_SEL_DEFAULT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,0,2)
#define  LAN80XX_M_CROSS_CONNECT_H3_SRC_SEL_DEFAULT_CH     LAN80XX_ENCODE_BITMASK(0,2)
#define  LAN80XX_X_CROSS_CONNECT_H3_SRC_SEL_DEFAULT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:HOST3_CFG:H3_FILTER
 */
#define LAN80XX_CROSS_CONNECT_H3_FILTER         LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf10f)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB2316 is the
 * upper 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H3_FILTER . COUNTB2316
 */
#define  LAN80XX_F_CROSS_CONNECT_H3_FILTER_COUNTB2316(x)  LAN80XX_ENCODE_BITFIELD(x,24,8)
#define  LAN80XX_M_CROSS_CONNECT_H3_FILTER_COUNTB2316     LAN80XX_ENCODE_BITMASK(24,8)
#define  LAN80XX_X_CROSS_CONNECT_H3_FILTER_COUNTB2316(x)  LAN80XX_EXTRACT_BITFIELD(x,24,8)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB70 is the
 * lower 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H3_FILTER . COUNTB70
 */
#define  LAN80XX_F_CROSS_CONNECT_H3_FILTER_COUNTB70(x)  LAN80XX_ENCODE_BITFIELD(x,16,8)
#define  LAN80XX_M_CROSS_CONNECT_H3_FILTER_COUNTB70     LAN80XX_ENCODE_BITMASK(16,8)
#define  LAN80XX_X_CROSS_CONNECT_H3_FILTER_COUNTB70(x)  LAN80XX_EXTRACT_BITFIELD(x,16,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA2316 is the upper
 * 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H3_FILTER . COUNTA2316
 */
#define  LAN80XX_F_CROSS_CONNECT_H3_FILTER_COUNTA2316(x)  LAN80XX_ENCODE_BITFIELD(x,8,8)
#define  LAN80XX_M_CROSS_CONNECT_H3_FILTER_COUNTA2316     LAN80XX_ENCODE_BITMASK(8,8)
#define  LAN80XX_X_CROSS_CONNECT_H3_FILTER_COUNTA2316(x)  LAN80XX_EXTRACT_BITFIELD(x,8,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA70 is the lower 8
 * bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_H3_FILTER . COUNTA70
 */
#define  LAN80XX_F_CROSS_CONNECT_H3_FILTER_COUNTA70(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_H3_FILTER_COUNTA70     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_H3_FILTER_COUNTA70(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)

/**
 * Register Group: \a CROSS_CONNECT:LINE0_CFG
 *
 * LINE0 configuration registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:LINE0_CFG:L0_SRC_SEL
 */
#define LAN80XX_CROSS_CONNECT_L0_SRC_SEL        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf110)

/**
 * \brief
 * Event source used to trigger a switch to ALT_CH
 *
 * \details
 * 0 = GPIO0
 * 1 = GPIO1
 * 2 = GPIO2
 * 3 = GPIO3
 * 4 = GPIO4
 * 5 = GPIO5
 * 6 = GPIO6
 * 7 = GPIO7
 * 8 = Always false
 * 9 = Always false
 * 10 = Always false
 * 11 = Always false
 * 12 = Host 0 link status
 * 13 = Host 1 link status
 * 14 = Host 2 link status
 * 15 = Host 3 link status
 * 16 = Host 0 serdes los
 * 17 = Host 1 serdes los
 * 18 = Host 2 serdes los
 * 19 = Host 3 serdes los
 * 20 = Always false
 * 21 = Always false
 * 22 = Always false
 * 23 = Always false
 * 24 = Always false
 * 25 = Always false
 * 26 = Always false
 * 27 = Always false
 * 28 = Always false
 * 29 = Always false
 * 30 = Always false
 * 31 = Always true

 *
 * Field: ::LAN80XX_CROSS_CONNECT_L0_SRC_SEL . ALT_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_L0_SRC_SEL_ALT_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,8,5)
#define  LAN80XX_M_CROSS_CONNECT_L0_SRC_SEL_ALT_SRC     LAN80XX_ENCODE_BITMASK(8,5)
#define  LAN80XX_X_CROSS_CONNECT_L0_SRC_SEL_ALT_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,8,5)

/**
 * \brief
 * Enable filtering of condition source
 *
 * \details
 * 0 = No filtering (assertion of selected condition source causes
 * immediate switch to ALT_CH)
 * 1 = Filtering enabled
 *
 * Field: ::LAN80XX_CROSS_CONNECT_L0_SRC_SEL . FILTER_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_L0_SRC_SEL_FILTER_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_L0_SRC_SEL_FILTER_EN  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_L0_SRC_SEL_FILTER_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Enable conditional switching to ALTernate channel
 *
 * \details
 * 0 = Force default channel
 * 1 = Allow switching to ALTernate channel based on source selection and
 * filtering
 *
 * Field: ::LAN80XX_CROSS_CONNECT_L0_SRC_SEL . ALT_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_L0_SRC_SEL_ALT_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_L0_SRC_SEL_ALT_EN  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_L0_SRC_SEL_ALT_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Alternate host rx from which line tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L0_SRC_SEL . ALT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_L0_SRC_SEL_ALT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,2,2)
#define  LAN80XX_M_CROSS_CONNECT_L0_SRC_SEL_ALT_CH     LAN80XX_ENCODE_BITMASK(2,2)
#define  LAN80XX_X_CROSS_CONNECT_L0_SRC_SEL_ALT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,2,2)

/**
 * \brief
 * Default host rx from which line tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L0_SRC_SEL . DEFAULT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_L0_SRC_SEL_DEFAULT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,0,2)
#define  LAN80XX_M_CROSS_CONNECT_L0_SRC_SEL_DEFAULT_CH     LAN80XX_ENCODE_BITMASK(0,2)
#define  LAN80XX_X_CROSS_CONNECT_L0_SRC_SEL_DEFAULT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:LINE0_CFG:L0_FILTER
 */
#define LAN80XX_CROSS_CONNECT_L0_FILTER         LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf111)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB2316 is the
 * upper 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L0_FILTER . COUNTB2316
 */
#define  LAN80XX_F_CROSS_CONNECT_L0_FILTER_COUNTB2316(x)  LAN80XX_ENCODE_BITFIELD(x,24,8)
#define  LAN80XX_M_CROSS_CONNECT_L0_FILTER_COUNTB2316     LAN80XX_ENCODE_BITMASK(24,8)
#define  LAN80XX_X_CROSS_CONNECT_L0_FILTER_COUNTB2316(x)  LAN80XX_EXTRACT_BITFIELD(x,24,8)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB70 is the
 * lower 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L0_FILTER . COUNTB70
 */
#define  LAN80XX_F_CROSS_CONNECT_L0_FILTER_COUNTB70(x)  LAN80XX_ENCODE_BITFIELD(x,16,8)
#define  LAN80XX_M_CROSS_CONNECT_L0_FILTER_COUNTB70     LAN80XX_ENCODE_BITMASK(16,8)
#define  LAN80XX_X_CROSS_CONNECT_L0_FILTER_COUNTB70(x)  LAN80XX_EXTRACT_BITFIELD(x,16,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA2316 is the upper
 * 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L0_FILTER . COUNTA2316
 */
#define  LAN80XX_F_CROSS_CONNECT_L0_FILTER_COUNTA2316(x)  LAN80XX_ENCODE_BITFIELD(x,8,8)
#define  LAN80XX_M_CROSS_CONNECT_L0_FILTER_COUNTA2316     LAN80XX_ENCODE_BITMASK(8,8)
#define  LAN80XX_X_CROSS_CONNECT_L0_FILTER_COUNTA2316(x)  LAN80XX_EXTRACT_BITFIELD(x,8,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA70 is the lower 8
 * bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L0_FILTER . COUNTA70
 */
#define  LAN80XX_F_CROSS_CONNECT_L0_FILTER_COUNTA70(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_L0_FILTER_COUNTA70     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_L0_FILTER_COUNTA70(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)

/**
 * Register Group: \a CROSS_CONNECT:LINE1_CFG
 *
 * LINE1 configuration registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:LINE1_CFG:L1_SRC_SEL
 */
#define LAN80XX_CROSS_CONNECT_L1_SRC_SEL        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf112)

/**
 * \brief
 * Event source used to trigger a switch to ALT_CH
 *
 * \details
 * 0 = GPIO0
 * 1 = GPIO1
 * 2 = GPIO2
 * 3 = GPIO3
 * 4 = GPIO4
 * 5 = GPIO5
 * 6 = GPIO6
 * 7 = GPIO7
 * 8 = Always false
 * 9 = Always false
 * 10 = Always false
 * 11 = Always false
 * 12 = Host 0 link status
 * 13 = Host 1 link status
 * 14 = Host 2 link status
 * 15 = Host 3 link status
 * 16 = Host 0 serdes los
 * 17 = Host 1 serdes los
 * 18 = Host 2 serdes los
 * 19 = Host 3 serdes los
 * 20 = Always false
 * 21 = Always false
 * 22 = Always false
 * 23 = Always false
 * 24 = Always false
 * 25 = Always false
 * 26 = Always false
 * 27 = Always false
 * 28 = Always false
 * 29 = Always false
 * 30 = Always false
 * 31 = Always true

 *
 * Field: ::LAN80XX_CROSS_CONNECT_L1_SRC_SEL . ALT_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_L1_SRC_SEL_ALT_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,8,5)
#define  LAN80XX_M_CROSS_CONNECT_L1_SRC_SEL_ALT_SRC     LAN80XX_ENCODE_BITMASK(8,5)
#define  LAN80XX_X_CROSS_CONNECT_L1_SRC_SEL_ALT_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,8,5)

/**
 * \brief
 * Enable filtering of condition source
 *
 * \details
 * 0 = No filtering (assertion of selected condition source causes
 * immediate switch to ALT_CH)
 * 1 = Filtering enabled
 *
 * Field: ::LAN80XX_CROSS_CONNECT_L1_SRC_SEL . FILTER_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_L1_SRC_SEL_FILTER_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_L1_SRC_SEL_FILTER_EN  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_L1_SRC_SEL_FILTER_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Enable conditional switching to ALTernate channel
 *
 * \details
 * 0 = Force default channel
 * 1 = Allow switching to ALTernate channel based on source selection and
 * filtering
 *
 * Field: ::LAN80XX_CROSS_CONNECT_L1_SRC_SEL . ALT_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_L1_SRC_SEL_ALT_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_L1_SRC_SEL_ALT_EN  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_L1_SRC_SEL_ALT_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Alternate host rx from which line tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L1_SRC_SEL . ALT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_L1_SRC_SEL_ALT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,2,2)
#define  LAN80XX_M_CROSS_CONNECT_L1_SRC_SEL_ALT_CH     LAN80XX_ENCODE_BITMASK(2,2)
#define  LAN80XX_X_CROSS_CONNECT_L1_SRC_SEL_ALT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,2,2)

/**
 * \brief
 * Default host rx from which line tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L1_SRC_SEL . DEFAULT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_L1_SRC_SEL_DEFAULT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,0,2)
#define  LAN80XX_M_CROSS_CONNECT_L1_SRC_SEL_DEFAULT_CH     LAN80XX_ENCODE_BITMASK(0,2)
#define  LAN80XX_X_CROSS_CONNECT_L1_SRC_SEL_DEFAULT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:LINE1_CFG:L1_FILTER
 */
#define LAN80XX_CROSS_CONNECT_L1_FILTER         LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf113)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB2316 is the
 * upper 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L1_FILTER . COUNTB2316
 */
#define  LAN80XX_F_CROSS_CONNECT_L1_FILTER_COUNTB2316(x)  LAN80XX_ENCODE_BITFIELD(x,24,8)
#define  LAN80XX_M_CROSS_CONNECT_L1_FILTER_COUNTB2316     LAN80XX_ENCODE_BITMASK(24,8)
#define  LAN80XX_X_CROSS_CONNECT_L1_FILTER_COUNTB2316(x)  LAN80XX_EXTRACT_BITFIELD(x,24,8)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB70 is the
 * lower 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L1_FILTER . COUNTB70
 */
#define  LAN80XX_F_CROSS_CONNECT_L1_FILTER_COUNTB70(x)  LAN80XX_ENCODE_BITFIELD(x,16,8)
#define  LAN80XX_M_CROSS_CONNECT_L1_FILTER_COUNTB70     LAN80XX_ENCODE_BITMASK(16,8)
#define  LAN80XX_X_CROSS_CONNECT_L1_FILTER_COUNTB70(x)  LAN80XX_EXTRACT_BITFIELD(x,16,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA2316 is the upper
 * 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L1_FILTER . COUNTA2316
 */
#define  LAN80XX_F_CROSS_CONNECT_L1_FILTER_COUNTA2316(x)  LAN80XX_ENCODE_BITFIELD(x,8,8)
#define  LAN80XX_M_CROSS_CONNECT_L1_FILTER_COUNTA2316     LAN80XX_ENCODE_BITMASK(8,8)
#define  LAN80XX_X_CROSS_CONNECT_L1_FILTER_COUNTA2316(x)  LAN80XX_EXTRACT_BITFIELD(x,8,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA70 is the lower 8
 * bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L1_FILTER . COUNTA70
 */
#define  LAN80XX_F_CROSS_CONNECT_L1_FILTER_COUNTA70(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_L1_FILTER_COUNTA70     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_L1_FILTER_COUNTA70(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)

/**
 * Register Group: \a CROSS_CONNECT:LINE2_CFG
 *
 * LINE2 configuration registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:LINE2_CFG:L2_SRC_SEL
 */
#define LAN80XX_CROSS_CONNECT_L2_SRC_SEL        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf114)

/**
 * \brief
 * Event source used to trigger a switch to ALT_CH
 *
 * \details
 * 0 = GPIO0
 * 1 = GPIO1
 * 2 = GPIO2
 * 3 = GPIO3
 * 4 = GPIO4
 * 5 = GPIO5
 * 6 = GPIO6
 * 7 = GPIO7
 * 8 = Always false
 * 9 = Always false
 * 10 = Always false
 * 11 = Always false
 * 12 = Host 0 link status
 * 13 = Host 1 link status
 * 14 = Host 2 link status
 * 15 = Host 3 link status
 * 16 = Host 0 serdes los
 * 17 = Host 1 serdes los
 * 18 = Host 2 serdes los
 * 19 = Host 3 serdes los
 * 20 = Always false
 * 21 = Always false
 * 22 = Always false
 * 23 = Always false
 * 24 = Always false
 * 25 = Always false
 * 26 = Always false
 * 27 = Always false
 * 28 = Always false
 * 29 = Always false
 * 30 = Always false
 * 31 = Always true

 *
 * Field: ::LAN80XX_CROSS_CONNECT_L2_SRC_SEL . ALT_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_L2_SRC_SEL_ALT_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,8,5)
#define  LAN80XX_M_CROSS_CONNECT_L2_SRC_SEL_ALT_SRC     LAN80XX_ENCODE_BITMASK(8,5)
#define  LAN80XX_X_CROSS_CONNECT_L2_SRC_SEL_ALT_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,8,5)

/**
 * \brief
 * Enable filtering of condition source
 *
 * \details
 * 0 = No filtering (assertion of selected condition source causes
 * immediate switch to ALT_CH)
 * 1 = Filtering enabled
 *
 * Field: ::LAN80XX_CROSS_CONNECT_L2_SRC_SEL . FILTER_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_L2_SRC_SEL_FILTER_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_L2_SRC_SEL_FILTER_EN  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_L2_SRC_SEL_FILTER_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Enable conditional switching to ALTernate channel
 *
 * \details
 * 0 = Force default channel
 * 1 = Allow switching to ALTernate channel based on source selection and
 * filtering
 *
 * Field: ::LAN80XX_CROSS_CONNECT_L2_SRC_SEL . ALT_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_L2_SRC_SEL_ALT_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_L2_SRC_SEL_ALT_EN  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_L2_SRC_SEL_ALT_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Alternate host rx from which line tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L2_SRC_SEL . ALT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_L2_SRC_SEL_ALT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,2,2)
#define  LAN80XX_M_CROSS_CONNECT_L2_SRC_SEL_ALT_CH     LAN80XX_ENCODE_BITMASK(2,2)
#define  LAN80XX_X_CROSS_CONNECT_L2_SRC_SEL_ALT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,2,2)

/**
 * \brief
 * Default host rx from which line tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L2_SRC_SEL . DEFAULT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_L2_SRC_SEL_DEFAULT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,0,2)
#define  LAN80XX_M_CROSS_CONNECT_L2_SRC_SEL_DEFAULT_CH     LAN80XX_ENCODE_BITMASK(0,2)
#define  LAN80XX_X_CROSS_CONNECT_L2_SRC_SEL_DEFAULT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:LINE2_CFG:L2_FILTER
 */
#define LAN80XX_CROSS_CONNECT_L2_FILTER         LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf115)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB2316 is the
 * upper 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L2_FILTER . COUNTB2316
 */
#define  LAN80XX_F_CROSS_CONNECT_L2_FILTER_COUNTB2316(x)  LAN80XX_ENCODE_BITFIELD(x,24,8)
#define  LAN80XX_M_CROSS_CONNECT_L2_FILTER_COUNTB2316     LAN80XX_ENCODE_BITMASK(24,8)
#define  LAN80XX_X_CROSS_CONNECT_L2_FILTER_COUNTB2316(x)  LAN80XX_EXTRACT_BITFIELD(x,24,8)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB70 is the
 * lower 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L2_FILTER . COUNTB70
 */
#define  LAN80XX_F_CROSS_CONNECT_L2_FILTER_COUNTB70(x)  LAN80XX_ENCODE_BITFIELD(x,16,8)
#define  LAN80XX_M_CROSS_CONNECT_L2_FILTER_COUNTB70     LAN80XX_ENCODE_BITMASK(16,8)
#define  LAN80XX_X_CROSS_CONNECT_L2_FILTER_COUNTB70(x)  LAN80XX_EXTRACT_BITFIELD(x,16,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA2316 is the upper
 * 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L2_FILTER . COUNTA2316
 */
#define  LAN80XX_F_CROSS_CONNECT_L2_FILTER_COUNTA2316(x)  LAN80XX_ENCODE_BITFIELD(x,8,8)
#define  LAN80XX_M_CROSS_CONNECT_L2_FILTER_COUNTA2316     LAN80XX_ENCODE_BITMASK(8,8)
#define  LAN80XX_X_CROSS_CONNECT_L2_FILTER_COUNTA2316(x)  LAN80XX_EXTRACT_BITFIELD(x,8,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA70 is the lower 8
 * bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L2_FILTER . COUNTA70
 */
#define  LAN80XX_F_CROSS_CONNECT_L2_FILTER_COUNTA70(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_L2_FILTER_COUNTA70     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_L2_FILTER_COUNTA70(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)

/**
 * Register Group: \a CROSS_CONNECT:LINE3_CFG
 *
 * LINE3 configuration registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:LINE3_CFG:L3_SRC_SEL
 */
#define LAN80XX_CROSS_CONNECT_L3_SRC_SEL        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf116)

/**
 * \brief
 * Event source used to trigger a switch to ALT_CH
 *
 * \details
 * 0 = GPIO0
 * 1 = GPIO1
 * 2 = GPIO2
 * 3 = GPIO3
 * 4 = GPIO4
 * 5 = GPIO5
 * 6 = GPIO6
 * 7 = GPIO7
 * 8 = Always false
 * 9 = Always false
 * 10 = Always false
 * 11 = Always false
 * 12 = Host 0 link status
 * 13 = Host 1 link status
 * 14 = Host 2 link status
 * 15 = Host 3 link status
 * 16 = Host 0 serdes los
 * 17 = Host 1 serdes los
 * 18 = Host 2 serdes los
 * 19 = Host 3 serdes los
 * 20 = Always false
 * 21 = Always false
 * 22 = Always false
 * 23 = Always false
 * 24 = Always false
 * 25 = Always false
 * 26 = Always false
 * 27 = Always false
 * 28 = Always false
 * 29 = Always false
 * 30 = Always false
 * 31 = Always true

 *
 * Field: ::LAN80XX_CROSS_CONNECT_L3_SRC_SEL . ALT_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_L3_SRC_SEL_ALT_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,8,5)
#define  LAN80XX_M_CROSS_CONNECT_L3_SRC_SEL_ALT_SRC     LAN80XX_ENCODE_BITMASK(8,5)
#define  LAN80XX_X_CROSS_CONNECT_L3_SRC_SEL_ALT_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,8,5)

/**
 * \brief
 * Enable filtering of condition source
 *
 * \details
 * 0 = No filtering (assertion of selected condition source causes
 * immediate switch to ALT_CH)
 * 1 = Filtering enabled
 *
 * Field: ::LAN80XX_CROSS_CONNECT_L3_SRC_SEL . FILTER_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_L3_SRC_SEL_FILTER_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_L3_SRC_SEL_FILTER_EN  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_L3_SRC_SEL_FILTER_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Enable conditional switching to ALTernate channel
 *
 * \details
 * 0 = Force default channel
 * 1 = Allow switching to ALTernate channel based on source selection and
 * filtering
 *
 * Field: ::LAN80XX_CROSS_CONNECT_L3_SRC_SEL . ALT_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_L3_SRC_SEL_ALT_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_L3_SRC_SEL_ALT_EN  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_L3_SRC_SEL_ALT_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Alternate host rx from which line tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L3_SRC_SEL . ALT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_L3_SRC_SEL_ALT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,2,2)
#define  LAN80XX_M_CROSS_CONNECT_L3_SRC_SEL_ALT_CH     LAN80XX_ENCODE_BITMASK(2,2)
#define  LAN80XX_X_CROSS_CONNECT_L3_SRC_SEL_ALT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,2,2)

/**
 * \brief
 * Default host rx from which line tx receives traffic
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L3_SRC_SEL . DEFAULT_CH
 */
#define  LAN80XX_F_CROSS_CONNECT_L3_SRC_SEL_DEFAULT_CH(x)  LAN80XX_ENCODE_BITFIELD(x,0,2)
#define  LAN80XX_M_CROSS_CONNECT_L3_SRC_SEL_DEFAULT_CH     LAN80XX_ENCODE_BITMASK(0,2)
#define  LAN80XX_X_CROSS_CONNECT_L3_SRC_SEL_DEFAULT_CH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:LINE3_CFG:L3_FILTER
 */
#define LAN80XX_CROSS_CONNECT_L3_FILTER         LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf117)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB2316 is the
 * upper 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L3_FILTER . COUNTB2316
 */
#define  LAN80XX_F_CROSS_CONNECT_L3_FILTER_COUNTB2316(x)  LAN80XX_ENCODE_BITFIELD(x,24,8)
#define  LAN80XX_M_CROSS_CONNECT_L3_FILTER_COUNTB2316     LAN80XX_ENCODE_BITMASK(24,8)
#define  LAN80XX_X_CROSS_CONNECT_L3_FILTER_COUNTB2316(x)  LAN80XX_EXTRACT_BITFIELD(x,24,8)

/**
 * \brief
 * COUNTB is the number of CSR clock cycles needed for selected condition
 * to be continously false before event can be cleared.  COUNTB70 is the
 * lower 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L3_FILTER . COUNTB70
 */
#define  LAN80XX_F_CROSS_CONNECT_L3_FILTER_COUNTB70(x)  LAN80XX_ENCODE_BITFIELD(x,16,8)
#define  LAN80XX_M_CROSS_CONNECT_L3_FILTER_COUNTB70     LAN80XX_ENCODE_BITMASK(16,8)
#define  LAN80XX_X_CROSS_CONNECT_L3_FILTER_COUNTB70(x)  LAN80XX_EXTRACT_BITFIELD(x,16,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA2316 is the upper
 * 8 bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L3_FILTER . COUNTA2316
 */
#define  LAN80XX_F_CROSS_CONNECT_L3_FILTER_COUNTA2316(x)  LAN80XX_ENCODE_BITFIELD(x,8,8)
#define  LAN80XX_M_CROSS_CONNECT_L3_FILTER_COUNTA2316     LAN80XX_ENCODE_BITMASK(8,8)
#define  LAN80XX_X_CROSS_CONNECT_L3_FILTER_COUNTA2316(x)  LAN80XX_EXTRACT_BITFIELD(x,8,8)

/**
 * \brief
 * COUNTA is the number of CSR clock cycles needed for selected condition
 * to be continously true before event can be set.  COUNTA70 is the lower 8
 * bits of this 24 bit threshold.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_L3_FILTER . COUNTA70
 */
#define  LAN80XX_F_CROSS_CONNECT_L3_FILTER_COUNTA70(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_L3_FILTER_COUNTA70     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_L3_FILTER_COUNTA70(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)

/**
 * Register Group: \a CROSS_CONNECT:W_P_SWITCH_0
 *
 * Work protect switch 0 configuration registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_0:WPS0_CFG
 */
#define LAN80XX_CROSS_CONNECT_WPS0_CFG          LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf118)

/**
 * \brief
 * 0 = H0 is Active by default, H1 is Standby by default   1 = H0 is
 * Standby by default, H1 is Active by default
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_CFG . WPS_DEFAULT_ACTIVE_SEL
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_CFG_WPS_DEFAULT_ACTIVE_SEL(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_CFG_WPS_DEFAULT_ACTIVE_SEL  LAN80XX_BIT(0)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_CFG_WPS_DEFAULT_ACTIVE_SEL(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * 0 = PHY Role (normal operation)   1 = System Role (test mode)
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_CFG . WPS_TEST_ROLE
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_CFG_WPS_TEST_ROLE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_CFG_WPS_TEST_ROLE  LAN80XX_BIT(1)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_CFG_WPS_TEST_ROLE(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * 0 = MAC_Change disabled (normal operation)   1 = MAC_Change enabled
 * (test mode available when in System Role)
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_CFG . WPS_MAC_CHANGE
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_CFG_WPS_MAC_CHANGE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_CFG_WPS_MAC_CHANGE  LAN80XX_BIT(2)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_CFG_WPS_MAC_CHANGE(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * Selects the clock source for the L0 Local Clock. 00 = L0 Local Clock
 * comes from H0 (use this setting for all Protection Switch configure)
 * 01 = L0 Local Clock comes from H1   02 = L0 Local Clock comes from H2
 * 03 = L0 Local Clock comes from H3
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_CFG . L0_LOCAL_CLK
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_CFG_L0_LOCAL_CLK(x)  LAN80XX_ENCODE_BITFIELD(x,4,2)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_CFG_L0_LOCAL_CLK     LAN80XX_ENCODE_BITMASK(4,2)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_CFG_L0_LOCAL_CLK(x)  LAN80XX_EXTRACT_BITFIELD(x,4,2)

/**
 * \brief
 * Selects the clock source for the L1 Local Clock. 00 = L1 Local Clock
 * comes from H0   01 = L1 Local Clock comes from H1   02 = L1 Local Clock
 * comes from H2   03 = L1 Local Clock comes from H3
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_CFG . L1_LOCAL_CLK
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_CFG_L1_LOCAL_CLK(x)  LAN80XX_ENCODE_BITFIELD(x,6,2)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_CFG_L1_LOCAL_CLK     LAN80XX_ENCODE_BITMASK(6,2)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_CFG_L1_LOCAL_CLK(x)  LAN80XX_EXTRACT_BITFIELD(x,6,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_0:WPS0_FAILOVER_CTRL
 */
#define LAN80XX_CROSS_CONNECT_WPS0_FAILOVER_CTRL  LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf119)

/**
 * \brief
 * When the local WPS initiates a failover and FC Signal use is enabled,
 * the FC_ACK_TIMER determines how long the local WPS will wait for partner
 * WPS to acknowledge the failover. FC_ACK_TIMER expiry triggers an
 * optional local WPS fault interrupt (wps_fc_ack_timer_intr_0/1). 0000:
 * 500us, 0001: 1ms,...
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FAILOVER_CTRL . FC_ACK_TIMER
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FAILOVER_CTRL_FC_ACK_TIMER(x)  LAN80XX_ENCODE_BITFIELD(x,0,4)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FAILOVER_CTRL_FC_ACK_TIMER     LAN80XX_ENCODE_BITMASK(0,4)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FAILOVER_CTRL_FC_ACK_TIMER(x)  LAN80XX_EXTRACT_BITFIELD(x,0,4)

/**
 * \brief
 * This debig bit shortens the FC_ACK_TIMER value. It is intended for
 * verification use. 0 = default = FC_ACK_TIMER[3:0] bits work in 500us
 * increments and 1 = FC_ACK_TIMER[3:0] bits work in 500ns increments
 * instead.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FAILOVER_CTRL . FC_ACK_TIMER_FAST_MODE
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FAILOVER_CTRL_FC_ACK_TIMER_FAST_MODE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FAILOVER_CTRL_FC_ACK_TIMER_FAST_MODE  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FAILOVER_CTRL_FC_ACK_TIMER_FAST_MODE(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * When FC Signal use is enabled (default): The WPS partner can initiate a
 * failover in the local WPS via the FAILOVERIN0/1 signal. The local WPS
 * can initiate a failover in the partner WPS via the FAILOVEROUT0/1
 * signal. The local WPS expects an ACK back from the partner WPS via the
 * FAILOVERIN0/1 signal. If no ACK is received (FC_ACK_TIMER expires), it
 * is treated as an error condition by the local WPS and an optional
 * interrupt (wps_fc_ack_timer_intr_0/1) is generated. When FC Signal use
 * is disabled: The FAILOVERIN0/1 signal is ignored by the local WPS.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FAILOVER_CTRL . FC_SIGNAL_DISABLE
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FAILOVER_CTRL_FC_SIGNAL_DISABLE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FAILOVER_CTRL_FC_SIGNAL_DISABLE  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FAILOVER_CTRL_FC_SIGNAL_DISABLE(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Write 1 to force HW protection switch (exact same functionality as if
 * triggered by a Fault Condition). After a forced failover, SW must re-arm
 * the WPS HW protection to re-enable protection.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FAILOVER_CTRL . WPS_FORCE_FAILOVER
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FAILOVER_CTRL_WPS_FORCE_FAILOVER(x)  LAN80XX_ENCODE_BITFIELD(!!(x),6,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FAILOVER_CTRL_WPS_FORCE_FAILOVER  LAN80XX_BIT(6)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FAILOVER_CTRL_WPS_FORCE_FAILOVER(x)  LAN80XX_EXTRACT_BITFIELD(x,6,1)

/**
 * \brief
 * Write 1 to freeze the WPS in its current configuration, allowing
 * reconfiguration of the WPS registers without changing WPS behavior.
 * Write 0 to apply the updated WPS configuration. When WPS_CFG_MASK=0, the
 * WPS behaves according to the WPS configuration registers.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FAILOVER_CTRL . WPS_CFG_MASK
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FAILOVER_CTRL_WPS_CFG_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),7,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FAILOVER_CTRL_WPS_CFG_MASK  LAN80XX_BIT(7)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FAILOVER_CTRL_WPS_CFG_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,7,1)

/**
 * \brief
 * Initially arms the WPS switch so if a Fault Condition is detected the HW
 * will automatically fail over. Also re-arms the WPS switch, so if a new
 * Fault Condition is detected the HW will automatically fail over.  The
 * Active and Standy roles are determined by WPS_DEFAULT_ACTIVE_SEL. 0 = HW
 * Protection Switching disabled   1 = HW Protection Switching enabled
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FAILOVER_CTRL . WPS_ARM
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FAILOVER_CTRL_WPS_ARM(x)  LAN80XX_ENCODE_BITFIELD(!!(x),8,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FAILOVER_CTRL_WPS_ARM  LAN80XX_BIT(8)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FAILOVER_CTRL_WPS_ARM(x)  LAN80XX_EXTRACT_BITFIELD(x,8,1)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_0:WPS0_STATUS
 */
#define LAN80XX_CROSS_CONNECT_WPS0_STATUS       LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf11a)

/**
 * \brief
 * 00 = RESERVED   01 = H0 Protection State is currently Active   10 = H0
 * Protection State is currently Standby   11 = H0 Protection State is
 * currently Failed
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_STATUS . H0_PROT_STATE_STATUS
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_STATUS_H0_PROT_STATE_STATUS(x)  LAN80XX_ENCODE_BITFIELD(x,0,2)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_STATUS_H0_PROT_STATE_STATUS     LAN80XX_ENCODE_BITMASK(0,2)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_STATUS_H0_PROT_STATE_STATUS(x)  LAN80XX_EXTRACT_BITFIELD(x,0,2)

/**
 * \brief
 * 00 = RESERVED   01 = H1 Protection State is currently Active   10 = H1
 * Protection State is currently Standby   11 = H1 Protection State is
 * currently Failed
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_STATUS . H1_PROT_STATE_STATUS
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_STATUS_H1_PROT_STATE_STATUS(x)  LAN80XX_ENCODE_BITFIELD(x,2,2)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_STATUS_H1_PROT_STATE_STATUS     LAN80XX_ENCODE_BITMASK(2,2)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_STATUS_H1_PROT_STATE_STATUS(x)  LAN80XX_EXTRACT_BITFIELD(x,2,2)

/**
 * \brief
 * Bit 0 = current state of FAILOVERIN0 input pin   Bit 1 = current state
 * of FAILOVEROUT0 output pin
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_STATUS . WPS_FLOVR_CTRL_STS
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_STATUS_WPS_FLOVR_CTRL_STS(x)  LAN80XX_ENCODE_BITFIELD(x,4,2)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_STATUS_WPS_FLOVR_CTRL_STS     LAN80XX_ENCODE_BITMASK(4,2)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_STATUS_WPS_FLOVR_CTRL_STS(x)  LAN80XX_EXTRACT_BITFIELD(x,4,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_0:WPS0_FAULT_COND
 */
#define LAN80XX_CROSS_CONNECT_WPS0_FAULT_COND   LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf11b)

/**
 * \brief
 * Event source bitmask used to trigger a protection switch away from H0.
 * Multiple bits may be set. Protection switching is only triggered using
 * these bits when H0 is Active, and an applicable protection switching
 * mode is enabled. Sticky bit and Interrupt functions are always available
 * regardless of protection switching mode or which port is Active.Bit 0 =
 * H0 SD25G PLL Loss of LockBit 1 = H0 SD25G Loss of SignalBit 2 = H0
 * PCS25G Link DownBit 3 = H0 PCS1G Sync StatusBit 4 = H0 PCS1G Link Down
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FAULT_COND . H0_FAULT_COND_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FAULT_COND_H0_FAULT_COND_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,0,5)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FAULT_COND_H0_FAULT_COND_SRC     LAN80XX_ENCODE_BITMASK(0,5)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FAULT_COND_H0_FAULT_COND_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,0,5)

/**
 * \brief
 * Event source bitmask used to trigger a protection switch away from H1.
 * Multiple bits may be set. Protection switching is only triggered using
 * these bits when H1 is Active, and an applicable protection switching
 * mode is enabled. Sticky bit and Interrupt functions are always available
 * regardless of protection switching mode or which port is Active.Bit 0 =
 * H1 SD25G PLL Loss of LockBit 1 = H1 SD25G Loss of SignalBit 2 = H1
 * PCS25G Link DownBit 3 = H1 PCS1G Sync StatusBit 4 = H1 PCS1G Link Down
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FAULT_COND . H1_FAULT_COND_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FAULT_COND_H1_FAULT_COND_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,8,5)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FAULT_COND_H1_FAULT_COND_SRC     LAN80XX_ENCODE_BITMASK(8,5)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FAULT_COND_H1_FAULT_COND_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,8,5)

/**
 * \brief
 * Enable filtering of Fault Condition source(s). Filtering is applied to
 * the Active Host set of Fault Conditions. <original comment asked for 5
 * filters, I think one is probably sufficient>
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FAULT_COND . FILTER_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FAULT_COND_FILTER_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),16,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FAULT_COND_FILTER_EN  LAN80XX_BIT(16)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FAULT_COND_FILTER_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,16,1)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_0:WPS0_FILTER_COUNTB_MSB
 */
#define LAN80XX_CROSS_CONNECT_WPS0_FILTER_COUNTB_MSB  LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf11c)

/**
 * \brief
 * Number of 300 MHz CSR clock cycles needed for select Fault Condition(s)
 * to be continuously FALSE before Fault Condition can be cleared.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FILTER_COUNTB_MSB . COUNTB_MSB
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FILTER_COUNTB_MSB_COUNTB_MSB(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FILTER_COUNTB_MSB_COUNTB_MSB     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FILTER_COUNTB_MSB_COUNTB_MSB(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_0:WPS0_FILTER_COUNTB_LSB
 */
#define LAN80XX_CROSS_CONNECT_WPS0_FILTER_COUNTB_LSB  LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf11d)

/**
 * \brief
 * Number of 300 MHz CSR clock cycles needed for select Fault Condition(s)
 * to be continuously FALSE before Fault Condition can be cleared.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FILTER_COUNTB_LSB . COUNTB_LSB
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FILTER_COUNTB_LSB_COUNTB_LSB(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FILTER_COUNTB_LSB_COUNTB_LSB     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FILTER_COUNTB_LSB_COUNTB_LSB(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_0:WPS0_FILTER_COUNTA_MSB
 */
#define LAN80XX_CROSS_CONNECT_WPS0_FILTER_COUNTA_MSB  LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf11e)

/**
 * \brief
 * Number of 300 MHz CSR clock cycles needed for select Fault Condition(s)
 * to be continuously TRUE before Fault Condition can be asserted.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FILTER_COUNTA_MSB . COUNTA_MSB
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FILTER_COUNTA_MSB_COUNTA_MSB(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FILTER_COUNTA_MSB_COUNTA_MSB     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FILTER_COUNTA_MSB_COUNTA_MSB(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_0:WPS0_FILTER_COUNTA_LSB
 */
#define LAN80XX_CROSS_CONNECT_WPS0_FILTER_COUNTA_LSB  LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf11f)

/**
 * \brief
 * Number of 300 MHz CSR clock cycles needed for select Fault Condition(s)
 * to be continuously TRUE before Fault Condition can be asserted.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS0_FILTER_COUNTA_LSB . COUNTA_LSB
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS0_FILTER_COUNTA_LSB_COUNTA_LSB(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_WPS0_FILTER_COUNTA_LSB_COUNTA_LSB     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_WPS0_FILTER_COUNTA_LSB_COUNTA_LSB(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)

/**
 * Register Group: \a CROSS_CONNECT:W_P_SWITCH_1
 *
 * Work protect switch 1 configuration registers
 */


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_1:WPS1_CFG
 */
#define LAN80XX_CROSS_CONNECT_WPS1_CFG          LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf120)

/**
 * \brief
 * 0 = H2 is Active by default, H3 is Standby by default   1 = H2 is
 * Standby by default, H3 is Active by default
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_CFG . WPS_DEFAULT_ACTIVE_SEL
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_CFG_WPS_DEFAULT_ACTIVE_SEL(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_CFG_WPS_DEFAULT_ACTIVE_SEL  LAN80XX_BIT(0)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_CFG_WPS_DEFAULT_ACTIVE_SEL(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * 0 = PHY Role (normal operation)   1 = System Role (test mode)
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_CFG . WPS_TEST_ROLE
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_CFG_WPS_TEST_ROLE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_CFG_WPS_TEST_ROLE  LAN80XX_BIT(1)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_CFG_WPS_TEST_ROLE(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * 0 = MAC_Change disabled (normal operation)   1 = MAC_Change enabled
 * (test mode available when in System Role)
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_CFG . WPS_MAC_CHANGE
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_CFG_WPS_MAC_CHANGE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_CFG_WPS_MAC_CHANGE  LAN80XX_BIT(2)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_CFG_WPS_MAC_CHANGE(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * Selects the clock source for the L2 Local Clock. 00 = L2 Local Clock
 * comes from H0 (use this setting for all Protection Switch configure)
 * 01 = L2 Local Clock comes from H1   02 = L2 Local Clock comes from H2
 * 03 = L2 Local Clock comes from H3
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_CFG . L2_LOCAL_CLK
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_CFG_L2_LOCAL_CLK(x)  LAN80XX_ENCODE_BITFIELD(x,4,2)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_CFG_L2_LOCAL_CLK     LAN80XX_ENCODE_BITMASK(4,2)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_CFG_L2_LOCAL_CLK(x)  LAN80XX_EXTRACT_BITFIELD(x,4,2)

/**
 * \brief
 * Selects the clock source for the L3 Local Clock. 00 = L3 Local Clock
 * comes from H0   01 = L3 Local Clock comes from H1   02 = L3 Local Clock
 * comes from H2   03 = L3 Local Clock comes from H3
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_CFG . L3_LOCAL_CLK
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_CFG_L3_LOCAL_CLK(x)  LAN80XX_ENCODE_BITFIELD(x,6,2)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_CFG_L3_LOCAL_CLK     LAN80XX_ENCODE_BITMASK(6,2)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_CFG_L3_LOCAL_CLK(x)  LAN80XX_EXTRACT_BITFIELD(x,6,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_1:WPS1_FAILOVER_CTRL
 */
#define LAN80XX_CROSS_CONNECT_WPS1_FAILOVER_CTRL  LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf121)

/**
 * \brief
 * When the local WPS initiates a failover and FC Signal use is enabled,
 * the FC_ACK_TIMER determines how long the local WPS will wait for partner
 * WPS to acknowledge the failover. FC_ACK_TIMER expiry triggers an
 * optional local WPS fault interrupt (wps_fc_ack_timer_intr_0/1). 0000:
 * 500us, 0001: 1ms,...
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FAILOVER_CTRL . FC_ACK_TIMER
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FAILOVER_CTRL_FC_ACK_TIMER(x)  LAN80XX_ENCODE_BITFIELD(x,0,4)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FAILOVER_CTRL_FC_ACK_TIMER     LAN80XX_ENCODE_BITMASK(0,4)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FAILOVER_CTRL_FC_ACK_TIMER(x)  LAN80XX_EXTRACT_BITFIELD(x,0,4)

/**
 * \brief
 * This debig bit shortens the FC_ACK_TIMER value. It is intended for
 * verification use. 0 = default = FC_ACK_TIMER[3:0] bits work in 500us
 * increments and 1 = FC_ACK_TIMER[3:0] bits work in 500ns increments
 * instead.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FAILOVER_CTRL . FC_ACK_TIMER_FAST_MODE
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FAILOVER_CTRL_FC_ACK_TIMER_FAST_MODE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FAILOVER_CTRL_FC_ACK_TIMER_FAST_MODE  LAN80XX_BIT(4)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FAILOVER_CTRL_FC_ACK_TIMER_FAST_MODE(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * When FC Signal use is enabled (default): The WPS partner can initiate a
 * failover in the local WPS via the FAILOVERIN0/1 signal. The local WPS
 * can initiate a failover in the partner WPS via the FAILOVEROUT0/1
 * signal. The local WPS expects an ACK back from the partner WPS via the
 * FAILOVERIN0/1 signal. If no ACK is received (FC_ACK_TIMER expires), it
 * is treated as an error condition by the local WPS and an optional
 * interrupt (wps_fc_ack_timer_intr_0/1) is generated. When FC Signal use
 * is disabled: The FAILOVERIN0/1 signal is ignored by the local WPS.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FAILOVER_CTRL . FC_SIGNAL_DISABLE
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FAILOVER_CTRL_FC_SIGNAL_DISABLE(x)  LAN80XX_ENCODE_BITFIELD(!!(x),5,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FAILOVER_CTRL_FC_SIGNAL_DISABLE  LAN80XX_BIT(5)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FAILOVER_CTRL_FC_SIGNAL_DISABLE(x)  LAN80XX_EXTRACT_BITFIELD(x,5,1)

/**
 * \brief
 * Write 1 to force HW protection switch (exact same functionality as if
 * triggered by a Fault Condition). After a forced failover, SW must re-arm
 * the WPS HW protection to re-enable protection.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FAILOVER_CTRL . WPS_FORCE_FAILOVER
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FAILOVER_CTRL_WPS_FORCE_FAILOVER(x)  LAN80XX_ENCODE_BITFIELD(!!(x),6,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FAILOVER_CTRL_WPS_FORCE_FAILOVER  LAN80XX_BIT(6)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FAILOVER_CTRL_WPS_FORCE_FAILOVER(x)  LAN80XX_EXTRACT_BITFIELD(x,6,1)

/**
 * \brief
 * Write 1 to freeze the WPS in its current configuration, allowing
 * reconfiguration of the WPS registers without changing WPS behavior.
 * Write 0 to apply the updated WPS configuration. When WPS_CFG_MASK=0, the
 * WPS behaves according to the WPS configuration registers.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FAILOVER_CTRL . WPS_CFG_MASK
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FAILOVER_CTRL_WPS_CFG_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),7,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FAILOVER_CTRL_WPS_CFG_MASK  LAN80XX_BIT(7)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FAILOVER_CTRL_WPS_CFG_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,7,1)

/**
 * \brief
 * Initially arms the WPS switch so if a Fault Condition is detected the HW
 * will automatically fail over. Also re-arms the WPS switch, so if a new
 * Fault Condition is detected the HW will automatically fail over.  The
 * Active and Standy roles are determined by WPS_DEFAULT_ACTIVE_SEL. 0 = HW
 * Protection Switching disabled   1 = HW Protection Switching enabled
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FAILOVER_CTRL . WPS_ARM
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FAILOVER_CTRL_WPS_ARM(x)  LAN80XX_ENCODE_BITFIELD(!!(x),8,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FAILOVER_CTRL_WPS_ARM  LAN80XX_BIT(8)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FAILOVER_CTRL_WPS_ARM(x)  LAN80XX_EXTRACT_BITFIELD(x,8,1)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_1:WPS1_STATUS
 */
#define LAN80XX_CROSS_CONNECT_WPS1_STATUS       LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf122)

/**
 * \brief
 * 00 = RESERVED   01 = H2 Protection State is currently Active   10 = H2
 * Protection State is currently Standby   11 = H2 Protection State is
 * currently Failed
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_STATUS . H2_PROT_STATE_STATUS
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_STATUS_H2_PROT_STATE_STATUS(x)  LAN80XX_ENCODE_BITFIELD(x,0,2)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_STATUS_H2_PROT_STATE_STATUS     LAN80XX_ENCODE_BITMASK(0,2)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_STATUS_H2_PROT_STATE_STATUS(x)  LAN80XX_EXTRACT_BITFIELD(x,0,2)

/**
 * \brief
 * 00 = RESERVED   01 = H3 Protection State is currently Active   10 = H3
 * Protection State is currently Standby   11 = H3 Protection State is
 * currently Failed
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_STATUS . H3_PROT_STATE_STATUS
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_STATUS_H3_PROT_STATE_STATUS(x)  LAN80XX_ENCODE_BITFIELD(x,2,2)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_STATUS_H3_PROT_STATE_STATUS     LAN80XX_ENCODE_BITMASK(2,2)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_STATUS_H3_PROT_STATE_STATUS(x)  LAN80XX_EXTRACT_BITFIELD(x,2,2)

/**
 * \brief
 * Bit 0 = current state of FAILOVERIN0 input pin   Bit 1 = current state
 * of FAILOVEROUT0 output pin
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_STATUS . WPS_FLOVR_CTRL_STS
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_STATUS_WPS_FLOVR_CTRL_STS(x)  LAN80XX_ENCODE_BITFIELD(x,4,2)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_STATUS_WPS_FLOVR_CTRL_STS     LAN80XX_ENCODE_BITMASK(4,2)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_STATUS_WPS_FLOVR_CTRL_STS(x)  LAN80XX_EXTRACT_BITFIELD(x,4,2)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_1:WPS1_FAULT_COND
 */
#define LAN80XX_CROSS_CONNECT_WPS1_FAULT_COND   LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf123)

/**
 * \brief
 * Event source bitmask used to trigger a protection switch away from H2
 * Multiple bits may be set. Protection switching is only triggered using
 * these bits when H2 is Active, and an applicable protection switching
 * mode is enabled. Sticky bit and Interrupt functions are always available
 * regardless of protection switching mode or which port is Active.Bit 0 =
 * H2 SD25G PLL Loss of LockBit 1 = H2 SD25G Loss of SignalBit 2 = H2
 * PCS25G Link DownBit 3 = H2 PCS1G Sync StatusBit 4 = H2 PCS1G Link Down
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FAULT_COND . H2_FAULT_COND_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FAULT_COND_H2_FAULT_COND_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,0,5)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FAULT_COND_H2_FAULT_COND_SRC     LAN80XX_ENCODE_BITMASK(0,5)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FAULT_COND_H2_FAULT_COND_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,0,5)

/**
 * \brief
 * Event source bitmask used to trigger a protection switch away from H3.
 * Multiple bits may be set. Protection switching is only triggered using
 * these bits when H3 is Active, and an applicable protection switching
 * mode is enabled. Sticky bit and Interrupt functions are always available
 * regardless of protection switching mode or which port is Active.Bit 0 =
 * H3 SD25G PLL Loss of LockBit 1 = H3 SD25G Loss of SignalBit 2 = H3
 * PCS25G Link DownBit 3 = H3 PCS1G Sync StatusBit 4 = H3 PCS1G Link Down
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FAULT_COND . H3_FAULT_COND_SRC
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FAULT_COND_H3_FAULT_COND_SRC(x)  LAN80XX_ENCODE_BITFIELD(x,8,5)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FAULT_COND_H3_FAULT_COND_SRC     LAN80XX_ENCODE_BITMASK(8,5)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FAULT_COND_H3_FAULT_COND_SRC(x)  LAN80XX_EXTRACT_BITFIELD(x,8,5)

/**
 * \brief
 * Enable filtering of Fault Condition source(s). Filtering is applied to
 * the Active Host set of Fault Conditions. <original comment asked for 5
 * filters, I think one is probably sufficient>
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FAULT_COND . FILTER_EN
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FAULT_COND_FILTER_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),16,1)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FAULT_COND_FILTER_EN  LAN80XX_BIT(16)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FAULT_COND_FILTER_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,16,1)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_1:WPS1_FILTER_COUNTB_MSB
 */
#define LAN80XX_CROSS_CONNECT_WPS1_FILTER_COUNTB_MSB  LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf124)

/**
 * \brief
 * Number of 300 MHz CSR clock cycles needed for select Fault Condition(s)
 * to be continuously FALSE before Fault Condition can be cleared.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FILTER_COUNTB_MSB . COUNTB_MSB
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FILTER_COUNTB_MSB_COUNTB_MSB(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FILTER_COUNTB_MSB_COUNTB_MSB     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FILTER_COUNTB_MSB_COUNTB_MSB(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_1:WPS1_FILTER_COUNTB_LSB
 */
#define LAN80XX_CROSS_CONNECT_WPS1_FILTER_COUNTB_LSB  LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf125)

/**
 * \brief
 * Number of 300 MHz CSR clock cycles needed for select Fault Condition(s)
 * to be continuously FALSE before Fault Condition can be cleared.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FILTER_COUNTB_LSB . COUNTB_LSB
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FILTER_COUNTB_LSB_COUNTB_LSB(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FILTER_COUNTB_LSB_COUNTB_LSB     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FILTER_COUNTB_LSB_COUNTB_LSB(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_1:WPS1_FILTER_COUNTA_MSB
 */
#define LAN80XX_CROSS_CONNECT_WPS1_FILTER_COUNTA_MSB  LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf126)

/**
 * \brief
 * Number of 300 MHz CSR clock cycles needed for select Fault Condition(s)
 * to be continuously TRUE before Fault Condition can be asserted.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FILTER_COUNTA_MSB . COUNTA_MSB
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FILTER_COUNTA_MSB_COUNTA_MSB(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FILTER_COUNTA_MSB_COUNTA_MSB     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FILTER_COUNTA_MSB_COUNTA_MSB(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)


/**
 * \details
 * Register: \a CROSS_CONNECT:W_P_SWITCH_1:WPS1_FILTER_COUNTA_LSB
 */
#define LAN80XX_CROSS_CONNECT_WPS1_FILTER_COUNTA_LSB  LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf127)

/**
 * \brief
 * Number of 300 MHz CSR clock cycles needed for select Fault Condition(s)
 * to be continuously TRUE before Fault Condition can be asserted.
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_WPS1_FILTER_COUNTA_LSB . COUNTA_LSB
 */
#define  LAN80XX_F_CROSS_CONNECT_WPS1_FILTER_COUNTA_LSB_COUNTA_LSB(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_WPS1_FILTER_COUNTA_LSB_COUNTA_LSB     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_WPS1_FILTER_COUNTA_LSB_COUNTA_LSB(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)

/**
 * Register Group: \a CROSS_CONNECT:EXP_DEBUG
 *
 * EXP debug registers
 */


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a CROSS_CONNECT:EXP_DEBUG:EXP_DEBUG0
 */
#define LAN80XX_CROSS_CONNECT_EXP_DEBUG0        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf178)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_EXP_DEBUG0 . EXP_DEBUG0
 */
#define  LAN80XX_F_CROSS_CONNECT_EXP_DEBUG0_EXP_DEBUG0(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_EXP_DEBUG0_EXP_DEBUG0     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_EXP_DEBUG0_EXP_DEBUG0(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a CROSS_CONNECT:EXP_DEBUG:EXP_DEBUG1
 */
#define LAN80XX_CROSS_CONNECT_EXP_DEBUG1        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf179)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_EXP_DEBUG1 . EXP_DEBUG1
 */
#define  LAN80XX_F_CROSS_CONNECT_EXP_DEBUG1_EXP_DEBUG1(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_EXP_DEBUG1_EXP_DEBUG1     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_EXP_DEBUG1_EXP_DEBUG1(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a CROSS_CONNECT:EXP_DEBUG:EXP_DEBUG2
 */
#define LAN80XX_CROSS_CONNECT_EXP_DEBUG2        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf17a)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_EXP_DEBUG2 . EXP_DEBUG2
 */
#define  LAN80XX_F_CROSS_CONNECT_EXP_DEBUG2_EXP_DEBUG2(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_EXP_DEBUG2_EXP_DEBUG2     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_EXP_DEBUG2_EXP_DEBUG2(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a CROSS_CONNECT:EXP_DEBUG:EXP_DEBUG3
 */
#define LAN80XX_CROSS_CONNECT_EXP_DEBUG3        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf17b)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_EXP_DEBUG3 . EXP_DEBUG3
 */
#define  LAN80XX_F_CROSS_CONNECT_EXP_DEBUG3_EXP_DEBUG3(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_EXP_DEBUG3_EXP_DEBUG3     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_EXP_DEBUG3_EXP_DEBUG3(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a CROSS_CONNECT:EXP_DEBUG:EXP_DEBUG4
 */
#define LAN80XX_CROSS_CONNECT_EXP_DEBUG4        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf17c)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_EXP_DEBUG4 . EXP_DEBUG4
 */
#define  LAN80XX_F_CROSS_CONNECT_EXP_DEBUG4_EXP_DEBUG4(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_EXP_DEBUG4_EXP_DEBUG4     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_EXP_DEBUG4_EXP_DEBUG4(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a CROSS_CONNECT:EXP_DEBUG:EXP_DEBUG5
 */
#define LAN80XX_CROSS_CONNECT_EXP_DEBUG5        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf17d)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_EXP_DEBUG5 . EXP_DEBUG5
 */
#define  LAN80XX_F_CROSS_CONNECT_EXP_DEBUG5_EXP_DEBUG5(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_EXP_DEBUG5_EXP_DEBUG5     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_EXP_DEBUG5_EXP_DEBUG5(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a CROSS_CONNECT:EXP_DEBUG:EXP_DEBUG6
 */
#define LAN80XX_CROSS_CONNECT_EXP_DEBUG6        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf17e)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_EXP_DEBUG6 . EXP_DEBUG6
 */
#define  LAN80XX_F_CROSS_CONNECT_EXP_DEBUG6_EXP_DEBUG6(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_EXP_DEBUG6_EXP_DEBUG6     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_EXP_DEBUG6_EXP_DEBUG6(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for trigger condition
 *
 * \details
 * Register: \a CROSS_CONNECT:EXP_DEBUG:EXP_DEBUG7
 */
#define LAN80XX_CROSS_CONNECT_EXP_DEBUG7        LAN80XX_IOREG(MMD_ID_CROSS_CONN, 1, 0xf17f)

/**
 * \brief
 * Place holder, for trigger condition
 *
 * \details
 * Field: ::LAN80XX_CROSS_CONNECT_EXP_DEBUG7 . EXP_DEBUG7
 */
#define  LAN80XX_F_CROSS_CONNECT_EXP_DEBUG7_EXP_DEBUG7(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_CROSS_CONNECT_EXP_DEBUG7_EXP_DEBUG7     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_CROSS_CONNECT_EXP_DEBUG7_EXP_DEBUG7(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


#endif /* _LAN80XX_MALIBU25G_REGS_CROSS_CONNECT_H_ */
