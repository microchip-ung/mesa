// Copyright (c) 2004-2020 Microchip Technology Inc. and its subsidiaries.
// SPDX-License-Identifier: MIT

#ifndef _LAN80XX_MALIBU25G_REGS_MAC_FC_BUFFER_H_
#define _LAN80XX_MALIBU25G_REGS_MAC_FC_BUFFER_H_

#include "regs_lan8042_common.h"

/***********************************************************************
 *
 * Target: \a MAC_FC_BUFFER
 *
 * ARRAY(0x43db418)
 *
 ***********************************************************************/

/**
 * Register Group: \a MAC_FC_BUFFER:MAC_FC_BUFFER_CONFIG
 *
 * Flow control buffer configuration registers
 */


/**
 * \brief Enable flow control buffer operation register
 *
 * \details
 * Enable flow control buffer in ingress and egress paths
 *
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_CONFIG:MAC_FC_BUFFER_FC_ENA_CFG
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_ENA_CFG  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf000)

/**
 * \brief
 * Enable egress flow control buffer
 *
 * \details
 * 0: Disabled
 * 1: Enabled
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_ENA_CFG . TX_ENA
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_ENA_CFG_TX_ENA(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_ENA_CFG_TX_ENA  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_ENA_CFG_TX_ENA(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * Enable ingress flow control buffer
 *
 * \details
 * 0: Disabled
 * 1: Enabled
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_ENA_CFG . RX_ENA
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_ENA_CFG_RX_ENA(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_ENA_CFG_RX_ENA  LAN80XX_BIT(4)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_ENA_CFG_RX_ENA(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)


/**
 * \brief Flow control mode configuration register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_CONFIG:MAC_FC_BUFFER_FC_MODE_CFG
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf001)

/**
 * \brief
 * Specifies FC buffer to insert FCS error or /E/ charcter for frames
 * aborted.
 *
 * \details
 * 0: Disable FCS error insertion for FC buffer frame drops (/E/ is
 * inserted)
 * 1: Enable FCS error insertion for FC buffer dropped frames
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG . DROP_BEHAVIOUR
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_DROP_BEHAVIOUR(x)  LAN80XX_ENCODE_BITFIELD(!!(x),4,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_DROP_BEHAVIOUR  LAN80XX_BIT(4)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_DROP_BEHAVIOUR(x)  LAN80XX_EXTRACT_BITFIELD(x,4,1)

/**
 * \brief
 * Enable pause reaction and pause timer maintenance in egress flow control
 * buffer
 *
 * \details
 * 0: Disable pause reaction and pause timer
 * 1: Enable pause reaction and pause timer
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG . PAUSE_REACT_ENA
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_PAUSE_REACT_ENA(x)  LAN80XX_ENCODE_BITFIELD(!!(x),8,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_PAUSE_REACT_ENA  LAN80XX_BIT(8)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_PAUSE_REACT_ENA(x)  LAN80XX_EXTRACT_BITFIELD(x,8,1)

/**
 * \brief
 * Enable PPM rate adaptation in ingress flow control buffer. This is
 * achieved by asserting shrint_ipg_shot signal towards host MAC10G after
 * the ingress flow control buffer crosses RX_PPM_RATE_ADAPT_THRES value.
 *
 * \details
 * 0: Disable PPM rate adaptation
 * 1: Enable PPM rate adaptation
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG . RX_PPM_RATE_ADAPT_ENA
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_RX_PPM_RATE_ADAPT_ENA(x)  LAN80XX_ENCODE_BITFIELD(!!(x),12,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_RX_PPM_RATE_ADAPT_ENA  LAN80XX_BIT(12)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_RX_PPM_RATE_ADAPT_ENA(x)  LAN80XX_EXTRACT_BITFIELD(x,12,1)

/**
 * \brief
 * Enable PPM rate adaptation in egress flow control buffer. This is
 * achieved by asserting shrint_ipg_shot signal towards line MAC10G after
 * egress flow control buffer crosses RX_PPM_RATE_ADAPT_THRES value. This
 * is applicable only to data queue.
 *
 * \details
 * 0: Disable PPM rate adaptation
 * 1: Enable PPM rate adaptation
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG . TX_PPM_RATE_ADAPT_ENA
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_TX_PPM_RATE_ADAPT_ENA(x)  LAN80XX_ENCODE_BITFIELD(!!(x),16,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_TX_PPM_RATE_ADAPT_ENA  LAN80XX_BIT(16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_TX_PPM_RATE_ADAPT_ENA(x)  LAN80XX_EXTRACT_BITFIELD(x,16,1)

/**
 * \brief
 * Enable using of control queue in egress flow control buffer
 *
 * \details
 * 0: Disable control queue
 * 1: Enable control queue
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG . TX_CTRL_QUEUE_ENA
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_TX_CTRL_QUEUE_ENA(x)  LAN80XX_ENCODE_BITFIELD(!!(x),20,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_TX_CTRL_QUEUE_ENA  LAN80XX_BIT(20)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_TX_CTRL_QUEUE_ENA(x)  LAN80XX_EXTRACT_BITFIELD(x,20,1)

/**
 * \brief
 * Enable XON and XOFF pause frames based on XON and XOFF thresholds
 *
 * \details
 * 0: Disable XON/XOFF generation
 * 1: Enable XON/XOFF generation
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG . PAUSE_GEN_ENA
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_PAUSE_GEN_ENA(x)  LAN80XX_ENCODE_BITFIELD(!!(x),24,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_PAUSE_GEN_ENA  LAN80XX_BIT(24)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_PAUSE_GEN_ENA(x)  LAN80XX_EXTRACT_BITFIELD(x,24,1)

/**
 * \brief
 * Enable use of pause received signals from line MAC in XON/XOFF
 * generation
 *
 * \details
 * 0: Disable pause received in XON/XOFF generation
 * 1: Enable pause received in XON/XOFF generation
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG . INCLUDE_PAUSE_RCVD_IN_PAUSE_GEN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_INCLUDE_PAUSE_RCVD_IN_PAUSE_GEN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),28,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_INCLUDE_PAUSE_RCVD_IN_PAUSE_GEN  LAN80XX_BIT(28)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_MODE_CFG_INCLUDE_PAUSE_RCVD_IN_PAUSE_GEN(x)  LAN80XX_EXTRACT_BITFIELD(x,28,1)


/**
 * \brief PPM rate adaptation threshold configuration register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_CONFIG:MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf002)

/**
 * \brief
 * Threshold of data queue in egress flow control buffer after which IPG
 * will be shrunk by 8 bytes to compensate read and write clocks PPM
 * differences. The recommended value is 2+TX_READ_THRESH.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG . TX_PPM_RATE_ADAPT_THRESH
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG_TX_PPM_RATE_ADAPT_THRESH(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG_TX_PPM_RATE_ADAPT_THRESH     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG_TX_PPM_RATE_ADAPT_THRESH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)

/**
 * \brief
 * Offset after TX_PPM_RATE_ADAPT_THRESH in data queue of egress flow
 * control buffer in which IPG shrinking is done to compensate PPM
 * differences in read and write clocks.A value of 0 indicates range of
 * TX_PPM_RATE_ADAPT_THRESH to MAX depth of data queue.A non-zero value
 * indicates a range of TX_PPM_RATE_ADAPT_THRESH to
 * TX_PPM_RATE_ADAPT_THRESH+TX_PPM_RATE_ADAPT_OFFSET.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG . TX_PPM_RATE_ADAPT_OFFSET
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG_TX_PPM_RATE_ADAPT_OFFSET(x)  LAN80XX_ENCODE_BITFIELD(x,16,4)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG_TX_PPM_RATE_ADAPT_OFFSET     LAN80XX_ENCODE_BITMASK(16,4)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG_TX_PPM_RATE_ADAPT_OFFSET(x)  LAN80XX_EXTRACT_BITFIELD(x,16,4)

/**
 * \brief
 * Threshold of data queue in ingress flow control buffer after which IPG
 * shrink is asserted to host MAC10G. The recommended value is
 * 2+RX_READ_THRESH.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG . RX_PPM_RATE_ADAPT_THRESH
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG_RX_PPM_RATE_ADAPT_THRESH(x)  LAN80XX_ENCODE_BITFIELD(x,20,12)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG_RX_PPM_RATE_ADAPT_THRESH     LAN80XX_ENCODE_BITMASK(20,12)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_PPM_RATE_ADAPT_THRESH_CFG_RX_PPM_RATE_ADAPT_THRESH(x)  LAN80XX_EXTRACT_BITFIELD(x,20,12)


/**
 * \brief Tx control queue configuration register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_CONFIG:MAC_FC_BUFFER_TX_CTRL_QUEUE_CFG
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_CFG  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf003)

/**
 * \brief
 * Start address/location for control queue in egress flow control buffer
 * where control frames are stored
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_CFG . TX_CTRL_QUEUE_START
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_CFG_TX_CTRL_QUEUE_START(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_CFG_TX_CTRL_QUEUE_START     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_CFG_TX_CTRL_QUEUE_START(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)

/**
 * \brief
 * End address/location for control queue in egress flow control buffer
 * where control frames are stored
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_CFG . TX_CTRL_QUEUE_END
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_CFG_TX_CTRL_QUEUE_END(x)  LAN80XX_ENCODE_BITFIELD(x,16,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_CFG_TX_CTRL_QUEUE_END     LAN80XX_ENCODE_BITMASK(16,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_CFG_TX_CTRL_QUEUE_END(x)  LAN80XX_EXTRACT_BITFIELD(x,16,16)


/**
 * \brief Tx data queue configuration register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_CONFIG:MAC_FC_BUFFER_TX_DATA_QUEUE_CFG
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_CFG  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf004)

/**
 * \brief
 * Start address/location for data queue in egress flow control buffer
 * where data frames are stored
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_CFG . TX_DATA_QUEUE_START
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_CFG_TX_DATA_QUEUE_START(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_CFG_TX_DATA_QUEUE_START     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_CFG_TX_DATA_QUEUE_START(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)

/**
 * \brief
 * End address/location for data queue in egress flow control buffer where
 * data frames are stored
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_CFG . TX_DATA_QUEUE_END
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_CFG_TX_DATA_QUEUE_END(x)  LAN80XX_ENCODE_BITFIELD(x,16,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_CFG_TX_DATA_QUEUE_END     LAN80XX_ENCODE_BITMASK(16,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_CFG_TX_DATA_QUEUE_END(x)  LAN80XX_EXTRACT_BITFIELD(x,16,16)


/**
 * \brief Rx data queue configuration register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_CONFIG:MAC_FC_BUFFER_RX_DATA_QUEUE_CFG
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_DATA_QUEUE_CFG  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf005)

/**
 * \brief
 * Start address/location for data queue in ingress flow control buffer
 * where data frames are stored
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_DATA_QUEUE_CFG . RX_DATA_QUEUE_START
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_DATA_QUEUE_CFG_RX_DATA_QUEUE_START(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_DATA_QUEUE_CFG_RX_DATA_QUEUE_START     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_DATA_QUEUE_CFG_RX_DATA_QUEUE_START(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)

/**
 * \brief
 * End address/location for data queue in ingress flow control buffer where
 * data frames are stored
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_DATA_QUEUE_CFG . RX_DATA_QUEUE_END
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_DATA_QUEUE_CFG_RX_DATA_QUEUE_END(x)  LAN80XX_ENCODE_BITFIELD(x,16,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_DATA_QUEUE_CFG_RX_DATA_QUEUE_END     LAN80XX_ENCODE_BITMASK(16,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_DATA_QUEUE_CFG_RX_DATA_QUEUE_END(x)  LAN80XX_EXTRACT_BITFIELD(x,16,16)


/**
 * \brief Tx flow control buffer pause frame generation thresholds register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_CONFIG:MAC_FC_BUFFER_TX_BUFF_XON_XOFF_THRESH_CFG
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_BUFF_XON_XOFF_THRESH_CFG  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf006)

/**
 * \brief
 * Egress data buffer threshold for generating XOFF pause frame to host
 * (Pause transmission from host, for example). The recommended value is
 * 1792.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_BUFF_XON_XOFF_THRESH_CFG . TX_XOFF_THRESH
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_BUFF_XON_XOFF_THRESH_CFG_TX_XOFF_THRESH(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_BUFF_XON_XOFF_THRESH_CFG_TX_XOFF_THRESH     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_BUFF_XON_XOFF_THRESH_CFG_TX_XOFF_THRESH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)

/**
 * \brief
 * Egress data buffer threshold for generating XON pause frame to host
 * (Transmission resumed, for example). The recommended value is 1280.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_BUFF_XON_XOFF_THRESH_CFG . TX_XON_THRESH
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_BUFF_XON_XOFF_THRESH_CFG_TX_XON_THRESH(x)  LAN80XX_ENCODE_BITFIELD(x,16,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_BUFF_XON_XOFF_THRESH_CFG_TX_XON_THRESH     LAN80XX_ENCODE_BITMASK(16,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_BUFF_XON_XOFF_THRESH_CFG_TX_XON_THRESH(x)  LAN80XX_EXTRACT_BITFIELD(x,16,16)


/**
 * \brief Flow control buffer read threshold register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_CONFIG:MAC_FC_BUFFER_FC_READ_THRESH_CFG
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_READ_THRESH_CFG  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf007)

/**
 * \brief
 * Egress flow control data buffer minimum threshold after which frames are
 * read from the flow control buffer and transmitted to the
 * line.Recommended values:-LAN mode: 5WAN mode: 2
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_READ_THRESH_CFG . TX_READ_THRESH
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_READ_THRESH_CFG_TX_READ_THRESH(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_READ_THRESH_CFG_TX_READ_THRESH     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_READ_THRESH_CFG_TX_READ_THRESH(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)

/**
 * \brief
 * Ingress flow control buffer minimum threshold after which frames are
 * read from the flow control buffer and transmitted to the
 * host.Recommended values:-LAN mode: 4WAN mode: 127
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_READ_THRESH_CFG . RX_READ_THRESH
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_READ_THRESH_CFG_RX_READ_THRESH(x)  LAN80XX_ENCODE_BITFIELD(x,16,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_READ_THRESH_CFG_RX_READ_THRESH     LAN80XX_ENCODE_BITMASK(16,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_FC_READ_THRESH_CFG_RX_READ_THRESH(x)  LAN80XX_EXTRACT_BITFIELD(x,16,16)


/**
 * \brief Tx frame gap compensation register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_CONFIG:MAC_FC_BUFFER_TX_FRM_GAP_COMP
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_FRM_GAP_COMP  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf008)

/**
 * \brief
 * Tx frame gap compensation
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_FRM_GAP_COMP . TX_FRM_GAP_COMP
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_FRM_GAP_COMP_TX_FRM_GAP_COMP(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_FRM_GAP_COMP_TX_FRM_GAP_COMP     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_FRM_GAP_COMP_TX_FRM_GAP_COMP(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)

/**
 * Register Group: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS
 *
 * Flow control buffer status registers
 */


/**
 * \brief Sticky bits register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS:MAC_FC_BUFFER_STICKY
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf009)

/**
 * \brief
 * Indicates an XOFF pause frame was generated towards the host. This bit
 * is cleared by writing a 1.
 *
 * \details
 * 0: No XOFF pause frame generated
 * 1: One or more XOFF pause frames were generated
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . XOFF_PAUSE_GEN_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_XOFF_PAUSE_GEN_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_XOFF_PAUSE_GEN_STICKY  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_XOFF_PAUSE_GEN_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * Indicates an XON pause frame was generated towards the host. This bit is
 * cleared by writing a 1.
 *
 * \details
 * 0: No XON pause frame generated
 * 1: One or more XON pause frames were generated
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . XON_PAUSE_GEN_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_XON_PAUSE_GEN_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_XON_PAUSE_GEN_STICKY  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_XON_PAUSE_GEN_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Indicates one or more frames in the egress flow control buffer were
 * dropped due to ECC failure. This bit is cleared by writing a 1.
 *
 * \details
 * 0: No frame with ECC error was detected
 * 1: One or more frames with ECC error were detected
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . TX_UNCORRECTED_FRM_DROP_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_UNCORRECTED_FRM_DROP_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_UNCORRECTED_FRM_DROP_STICKY  LAN80XX_BIT(2)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_UNCORRECTED_FRM_DROP_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * Indicates one or more frames in the ingress flow control buffer were
 * dropped due to ECC failure. This bit is cleared by writing a 1.
 *
 * \details
 * 0: No frame with ECC error was detected
 * 1: One or more frames with ECC error were detected
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . RX_UNCORRECTED_FRM_DROP_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_RX_UNCORRECTED_FRM_DROP_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_RX_UNCORRECTED_FRM_DROP_STICKY  LAN80XX_BIT(3)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_RX_UNCORRECTED_FRM_DROP_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Indicates an overflow has occurred in the control queue of an egress
 * flow control buffer. This bit is cleared by writing a 1.
 *
 * \details
 * 0: No overflow was detected
 * 1: One or more overflows were detected
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . TX_CTRL_QUEUE_OVERFLOW_DROP_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_CTRL_QUEUE_OVERFLOW_DROP_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),16,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_CTRL_QUEUE_OVERFLOW_DROP_STICKY  LAN80XX_BIT(16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_CTRL_QUEUE_OVERFLOW_DROP_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,16,1)

/**
 * \brief
 * Indicates an underflow has occurred in the control queue of an egress
 * flow control buffer. This bit is cleared by writing a 1.
 *
 * \details
 * 0: No underflow was detected
 * 1: One or more underflows were detected
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . TX_CTRL_QUEUE_UNDERFLOW_DROP_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_CTRL_QUEUE_UNDERFLOW_DROP_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),17,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_CTRL_QUEUE_UNDERFLOW_DROP_STICKY  LAN80XX_BIT(17)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_CTRL_QUEUE_UNDERFLOW_DROP_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,17,1)

/**
 * \brief
 * Indicates an overflow has occurred in the data queue of an egress flow
 * control buffer. This bit is cleared by writing a 1.
 *
 * \details
 * 0: No overflow is detected
 * 1: One or more overflow were detected
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . TX_DATA_QUEUE_OVERFLOW_DROP_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_DATA_QUEUE_OVERFLOW_DROP_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),18,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_DATA_QUEUE_OVERFLOW_DROP_STICKY  LAN80XX_BIT(18)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_DATA_QUEUE_OVERFLOW_DROP_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,18,1)

/**
 * \brief
 * Indicates an underflow has occurred in the data queue of an egress flow
 * control buffer. This bit is cleared by writing a 1.
 *
 * \details
 * 0: No underflow is detected
 * 1: One or more underflow were detected
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . TX_DATA_QUEUE_UNDERFLOW_DROP_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_DATA_QUEUE_UNDERFLOW_DROP_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),19,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_DATA_QUEUE_UNDERFLOW_DROP_STICKY  LAN80XX_BIT(19)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_TX_DATA_QUEUE_UNDERFLOW_DROP_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,19,1)

/**
 * \brief
 * Indicates an overflow has occurred in the ingress flow control buffer.
 * This bit is cleared by writing a 1.
 *
 * \details
 * 0: No overflow is detected
 * 1: One or more overflow were detected
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . RX_OVERFLOW_DROP_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_RX_OVERFLOW_DROP_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),20,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_RX_OVERFLOW_DROP_STICKY  LAN80XX_BIT(20)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_RX_OVERFLOW_DROP_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,20,1)

/**
 * \brief
 * Indicates an underflow has occurred in the ingress flow control buffer.
 * This bit is cleared by writing a 1.
 *
 * \details
 * 0: No underflow is detected
 * 1: One or more underflow were detected
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . RX_UNDERFLOW_DROP_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_RX_UNDERFLOW_DROP_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),21,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_RX_UNDERFLOW_DROP_STICKY  LAN80XX_BIT(21)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_RX_UNDERFLOW_DROP_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,21,1)

/**
 * \brief
 * Indicates Ingress FC Buffer ECC interrupt status
 *
 * \details
 * 0: No ECC interrupt
 * 1: ECC interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . INGR_ECC_INTERRUPT_STATUS
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_INGR_ECC_INTERRUPT_STATUS(x)  LAN80XX_ENCODE_BITFIELD(!!(x),22,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_INGR_ECC_INTERRUPT_STATUS  LAN80XX_BIT(22)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_INGR_ECC_INTERRUPT_STATUS(x)  LAN80XX_EXTRACT_BITFIELD(x,22,1)

/**
 * \brief
 * Indicates Egress FC Buffer ECC interrupt status
 *
 * \details
 * 0: No ECC interrupt
 * 1: ECC interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY . EGR_ECC_INTERRUPT_STATUS
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_EGR_ECC_INTERRUPT_STATUS(x)  LAN80XX_ENCODE_BITFIELD(!!(x),23,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_EGR_ECC_INTERRUPT_STATUS  LAN80XX_BIT(23)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_EGR_ECC_INTERRUPT_STATUS(x)  LAN80XX_EXTRACT_BITFIELD(x,23,1)


/**
 * \brief Sticky bits interrupt mask register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS:MAC_FC_BUFFER_STICKY_MASK
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf00a)

/**
 * \brief
 * Interrupt mask for XOFF_PAUSE_GEN_STICKY
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . XOFF_PAUSE_GEN_STICKY_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_XOFF_PAUSE_GEN_STICKY_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_XOFF_PAUSE_GEN_STICKY_MASK  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_XOFF_PAUSE_GEN_STICKY_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)

/**
 * \brief
 * Interrupt mask for XON_PAUSE_GEN_STICKY
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . XON_PAUSE_GEN_STICKY_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_XON_PAUSE_GEN_STICKY_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_XON_PAUSE_GEN_STICKY_MASK  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_XON_PAUSE_GEN_STICKY_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Interrupt mask for TX_UNCORRECTED_FRM_DROP_STICKY
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . TX_UNCORRECTED_FRM_DROP_STICKY_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_UNCORRECTED_FRM_DROP_STICKY_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_UNCORRECTED_FRM_DROP_STICKY_MASK  LAN80XX_BIT(2)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_UNCORRECTED_FRM_DROP_STICKY_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * Interrupt mask for RX_UNCORRECTED_FRM_DROP_STICKY
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . RX_UNCORRECTED_FRM_DROP_STICKY_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_RX_UNCORRECTED_FRM_DROP_STICKY_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_RX_UNCORRECTED_FRM_DROP_STICKY_MASK  LAN80XX_BIT(3)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_RX_UNCORRECTED_FRM_DROP_STICKY_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Interrupt mask for TX_CTRL_QUEUE_OVERFLOW_DROP_STICKY
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . TX_CTRL_QUEUE_OVERFLOW_DROP_STICKY_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_CTRL_QUEUE_OVERFLOW_DROP_STICKY_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),16,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_CTRL_QUEUE_OVERFLOW_DROP_STICKY_MASK  LAN80XX_BIT(16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_CTRL_QUEUE_OVERFLOW_DROP_STICKY_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,16,1)

/**
 * \brief
 * Interrupt mask for TX_CTRL_QUEUE_UNDERFLOW_DROP_STICKY
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . TX_CTRL_QUEUE_UNDERFLOW_DROP_STICKY_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_CTRL_QUEUE_UNDERFLOW_DROP_STICKY_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),17,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_CTRL_QUEUE_UNDERFLOW_DROP_STICKY_MASK  LAN80XX_BIT(17)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_CTRL_QUEUE_UNDERFLOW_DROP_STICKY_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,17,1)

/**
 * \brief
 * Interrupt mask for TX_DATA_QUEUE_OVERFLOW_DROP_STICKY
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . TX_DATA_QUEUE_OVERFLOW_DROP_STICKY_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_DATA_QUEUE_OVERFLOW_DROP_STICKY_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),18,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_DATA_QUEUE_OVERFLOW_DROP_STICKY_MASK  LAN80XX_BIT(18)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_DATA_QUEUE_OVERFLOW_DROP_STICKY_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,18,1)

/**
 * \brief
 * Interrupt mask for TX_DATA_QUEUE_UNDERFLOW_DROP_STICKY
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . TX_DATA_QUEUE_UNDERFLOW_DROP_STICKY_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_DATA_QUEUE_UNDERFLOW_DROP_STICKY_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),19,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_DATA_QUEUE_UNDERFLOW_DROP_STICKY_MASK  LAN80XX_BIT(19)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_TX_DATA_QUEUE_UNDERFLOW_DROP_STICKY_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,19,1)

/**
 * \brief
 * Interrupt mask for RX_OVERFLOW_DROP_STICKY
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . RX_OVERFLOW_DROP_STICKY_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_RX_OVERFLOW_DROP_STICKY_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),20,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_RX_OVERFLOW_DROP_STICKY_MASK  LAN80XX_BIT(20)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_RX_OVERFLOW_DROP_STICKY_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,20,1)

/**
 * \brief
 * Interrupt mask for RX_UNDERFLOW_DROP_STICKY
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . RX_UNDERFLOW_DROP_STICKY_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_RX_UNDERFLOW_DROP_STICKY_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),21,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_RX_UNDERFLOW_DROP_STICKY_MASK  LAN80XX_BIT(21)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_RX_UNDERFLOW_DROP_STICKY_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,21,1)

/**
 * \brief
 * Interrupt mask for INGR_ECC_INTERRUPT_STATUS
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . INGR_ECC_INTERRUPT_STATUS_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_INGR_ECC_INTERRUPT_STATUS_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),22,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_INGR_ECC_INTERRUPT_STATUS_MASK  LAN80XX_BIT(22)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_INGR_ECC_INTERRUPT_STATUS_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,22,1)

/**
 * \brief
 * Interrupt mask for EGR_ECC_INTERRUPT_STATUS
 *
 * \details
 * 0: Disable interrupt
 * 1: Enable interrupt
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK . EGR_ECC_INTERRUPT_STATUS_MASK
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_EGR_ECC_INTERRUPT_STATUS_MASK(x)  LAN80XX_ENCODE_BITFIELD(!!(x),23,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_EGR_ECC_INTERRUPT_STATUS_MASK  LAN80XX_BIT(23)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_STICKY_MASK_EGR_ECC_INTERRUPT_STATUS_MASK(x)  LAN80XX_EXTRACT_BITFIELD(x,23,1)


/**
 * \brief Tx control queue overflow frame drop counter
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS:MAC_FC_BUFFER_TX_CTRL_QUEUE_OVERFLOW_DROP_CNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_OVERFLOW_DROP_CNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf00b)

/**
 * \brief
 * Number of times an overflow occurred in the control queue of the egress
 * flow control buffer. Counter can be written by software.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_OVERFLOW_DROP_CNT . TX_CTRL_QUEUE_OVERFLOW_DROP_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_OVERFLOW_DROP_CNT_TX_CTRL_QUEUE_OVERFLOW_DROP_CNT(x)  (x)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_OVERFLOW_DROP_CNT_TX_CTRL_QUEUE_OVERFLOW_DROP_CNT     0xffffffff
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_OVERFLOW_DROP_CNT_TX_CTRL_QUEUE_OVERFLOW_DROP_CNT(x)  (x)


/**
 * \brief Tx control queue underflow frame drop counter
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS:MAC_FC_BUFFER_TX_CTRL_QUEUE_UNDERFLOW_DROP_CNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_UNDERFLOW_DROP_CNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf00c)

/**
 * \brief
 * Number of times an underflow occurred in the control queue of the egress
 * flow control buffer. Counter can be written by software.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_UNDERFLOW_DROP_CNT . TX_CTRL_QUEUE_UNDERFLOW_DROP_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_UNDERFLOW_DROP_CNT_TX_CTRL_QUEUE_UNDERFLOW_DROP_CNT(x)  (x)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_UNDERFLOW_DROP_CNT_TX_CTRL_QUEUE_UNDERFLOW_DROP_CNT     0xffffffff
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_QUEUE_UNDERFLOW_DROP_CNT_TX_CTRL_QUEUE_UNDERFLOW_DROP_CNT(x)  (x)


/**
 * \brief Tx uncorrected control frame drop counter
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS:MAC_FC_BUFFER_TX_CTRL_UNCORRECTED_FRM_DROP_CNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_UNCORRECTED_FRM_DROP_CNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf00d)

/**
 * \brief
 * Number of control frames aborted due to ECC check fail during reading
 * from RAM. Counter can be written by software.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_UNCORRECTED_FRM_DROP_CNT . TX_CTRL_UNCORRECTED_FRM_DROP_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_UNCORRECTED_FRM_DROP_CNT_TX_CTRL_UNCORRECTED_FRM_DROP_CNT(x)  (x)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_UNCORRECTED_FRM_DROP_CNT_TX_CTRL_UNCORRECTED_FRM_DROP_CNT     0xffffffff
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_CTRL_UNCORRECTED_FRM_DROP_CNT_TX_CTRL_UNCORRECTED_FRM_DROP_CNT(x)  (x)


/**
 * \brief Tx data queue overflow drop counter
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS:MAC_FC_BUFFER_TX_DATA_QUEUE_OVERFLOW_DROP_CNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_OVERFLOW_DROP_CNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf00e)

/**
 * \brief
 * Number of times an overflow occurred in the data queue of the egress
 * flow control buffer. Counter can be written by software.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_OVERFLOW_DROP_CNT . TX_DATA_QUEUE_OVERFLOW_DROP_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_OVERFLOW_DROP_CNT_TX_DATA_QUEUE_OVERFLOW_DROP_CNT(x)  (x)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_OVERFLOW_DROP_CNT_TX_DATA_QUEUE_OVERFLOW_DROP_CNT     0xffffffff
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_OVERFLOW_DROP_CNT_TX_DATA_QUEUE_OVERFLOW_DROP_CNT(x)  (x)


/**
 * \brief Tx data queue underflow drop counter
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS:MAC_FC_BUFFER_TX_DATA_QUEUE_UNDERFLOW_DROP_CNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_UNDERFLOW_DROP_CNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf00f)

/**
 * \brief
 * Number of times an underflow occurred in the data queue of the egress
 * flow control buffer. Counter can be written by software.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_UNDERFLOW_DROP_CNT . TX_DATA_QUEUE_UNDERFLOW_DROP_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_UNDERFLOW_DROP_CNT_TX_DATA_QUEUE_UNDERFLOW_DROP_CNT(x)  (x)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_UNDERFLOW_DROP_CNT_TX_DATA_QUEUE_UNDERFLOW_DROP_CNT     0xffffffff
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_QUEUE_UNDERFLOW_DROP_CNT_TX_DATA_QUEUE_UNDERFLOW_DROP_CNT(x)  (x)


/**
 * \brief Tx uncorrected data frame drop counter
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS:MAC_FC_BUFFER_TX_DATA_UNCORRECTED_FRM_DROP_CNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_UNCORRECTED_FRM_DROP_CNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf010)

/**
 * \brief
 * Number of data frames aborted due to ECC check fail during reading from
 * RAM. Counter can be written by software.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_UNCORRECTED_FRM_DROP_CNT . TX_DATA_UNCORRECTED_FRM_DROP_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_UNCORRECTED_FRM_DROP_CNT_TX_DATA_UNCORRECTED_FRM_DROP_CNT(x)  (x)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_UNCORRECTED_FRM_DROP_CNT_TX_DATA_UNCORRECTED_FRM_DROP_CNT     0xffffffff
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_TX_DATA_UNCORRECTED_FRM_DROP_CNT_TX_DATA_UNCORRECTED_FRM_DROP_CNT(x)  (x)


/**
 * \brief Rx overflow frame drop counter
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS:MAC_FC_BUFFER_RX_OVERFLOW_DROP_CNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_OVERFLOW_DROP_CNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf011)

/**
 * \brief
 * Number of times an overflow occurred in the ingress flow control buffer.
 * Counter can be written by software.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_OVERFLOW_DROP_CNT . RX_OVERFLOW_DROP_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_OVERFLOW_DROP_CNT_RX_OVERFLOW_DROP_CNT(x)  (x)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_OVERFLOW_DROP_CNT_RX_OVERFLOW_DROP_CNT     0xffffffff
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_OVERFLOW_DROP_CNT_RX_OVERFLOW_DROP_CNT(x)  (x)


/**
 * \brief Rx underflow frame drop counter
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS:MAC_FC_BUFFER_RX_UNDERFLOW_DROP_CNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_UNDERFLOW_DROP_CNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf012)

/**
 * \brief
 * Number of times an underflow occurred in the ingress flow control
 * buffer. Counter can be written by software.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_UNDERFLOW_DROP_CNT . RX_UNDERFLOW_DROP_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_UNDERFLOW_DROP_CNT_RX_UNDERFLOW_DROP_CNT(x)  (x)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_UNDERFLOW_DROP_CNT_RX_UNDERFLOW_DROP_CNT     0xffffffff
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_UNDERFLOW_DROP_CNT_RX_UNDERFLOW_DROP_CNT(x)  (x)


/**
 * \brief Rx uncorrected frame drop counter
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_STATUS:MAC_FC_BUFFER_RX_UNCORRECTED_FRM_DROP_CNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_UNCORRECTED_FRM_DROP_CNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf013)

/**
 * \brief
 * Number of frames aborted due to ECC check fail during reading from RAM.
 * Counter can be written by software.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_UNCORRECTED_FRM_DROP_CNT . RX_UNCORRECTED_FRM_DROP_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_UNCORRECTED_FRM_DROP_CNT_RX_UNCORRECTED_FRM_DROP_CNT(x)  (x)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_UNCORRECTED_FRM_DROP_CNT_RX_UNCORRECTED_FRM_DROP_CNT     0xffffffff
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_RX_UNCORRECTED_FRM_DROP_CNT_RX_UNCORRECTED_FRM_DROP_CNT(x)  (x)

/**
 * Register Group: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC
 *
 * INGR_FC_BUFFER ECC registers
 */


/**
 * \brief INGR_FC_BUFFER ECC Control Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf020)

/**
 * \brief
 * Disable ECC decoder features
 *
 * \details
 * Write 1 cause event
 * Write 0  no effect
 * always read 0
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL . INGR_FC_BUFFER_ECC_EN_CLR
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_ECC_EN_CLR(x)  LAN80XX_ENCODE_BITFIELD(!!(x),16,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_ECC_EN_CLR  LAN80XX_BIT(16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_ECC_EN_CLR(x)  LAN80XX_EXTRACT_BITFIELD(x,16,1)

/**
 * \brief
 * Reset error counters
 *
 * \details
 * Write 1 cause event
 * Write 0  no effect
 * always read 0
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL . INGR_FC_BUFFER_CNTRST
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_CNTRST(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_CNTRST  LAN80XX_BIT(3)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_CNTRST(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Soft reset ECC controller core logic
 *
 * \details
 * Write 1 cause event
 * Write 0  no effect
 * always read 0
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL . INGR_FC_BUFFER_SWRST
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_SWRST(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_SWRST  LAN80XX_BIT(2)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_SWRST(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * initial SRAM with all 0s
 *
 * \details
 * Write 1 cause event
 * Write 0  no effect
 * always read 0
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL . INGR_FC_BUFFER_INIT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_INIT(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_INIT  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_INIT(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Enable ECC decoder features
 *
 * \details
 * Write 1 cause event
 * Write 0  no effect
 * always read 0
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL . INGR_FC_BUFFER_ECC_EN_SET
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_ECC_EN_SET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_ECC_EN_SET  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_CTL_INGR_FC_BUFFER_ECC_EN_SET(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief INGR_FC_BUFFER ECC Status Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf021)

/**
 * \brief
 * SRAM initialization in progress
 *
 * \details
 * 1 = in progress
 * 0 = not in progress
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SR . INGR_FC_BUFFER_INIT_BUSY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SR_INGR_FC_BUFFER_INIT_BUSY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SR_INGR_FC_BUFFER_INIT_BUSY  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SR_INGR_FC_BUFFER_INIT_BUSY(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * ECC decoder features are currently enabled
 *
 * \details
 * 1 = enabled
 * 0 = not enabled
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SR . INGR_FC_BUFFER_ECC_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SR_INGR_FC_BUFFER_ECC_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SR_INGR_FC_BUFFER_ECC_EN  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SR_INGR_FC_BUFFER_ECC_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief INGR_FC_BUFFER ECC Initialization Done Interrupt Enable register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf024)

/**
 * \brief
 * initialization done interrupt enable
 *
 * \details
 * 1: enable
 * 0: disable
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN . INGR_FC_BUFFER_INIT_DONE_INTR_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN_INGR_FC_BUFFER_INIT_DONE_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN_INGR_FC_BUFFER_INIT_DONE_INTR_EN  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN_INGR_FC_BUFFER_INIT_DONE_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief INGR_FC_BUFFER ECC Initialization Done Interrupt Status register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf025)

/**
 * \brief
 * initialization done status bit
 *
 * \details
 * this bit is set by initialization done event, write 1 will clear this
 * bit
 * 0 = interrupt not pending
 * 1 = interrupt pending

 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS . INGR_FC_BUFFER_INIT_DONE_INTR_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS_INGR_FC_BUFFER_INIT_DONE_INTR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS_INGR_FC_BUFFER_INIT_DONE_INTR_STICKY  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS_INGR_FC_BUFFER_INIT_DONE_INTR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief INGR_FC_BUFFER ECC Fault Configuration Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FCR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FCR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf030)

/**
 * \brief
 * Select double bit or single bit fault injection
 *
 * \details
 * if corresponding INGR_FC_BUFFER_LN_FAULT_EN is set
 * 1 = inject double bit fault
 * 0 = inject single bit fault
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FCR . INGR_FC_BUFFER_FAULT_DBL
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FCR_INGR_FC_BUFFER_FAULT_DBL(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FCR_INGR_FC_BUFFER_FAULT_DBL  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FCR_INGR_FC_BUFFER_FAULT_DBL(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * enable fault injection controller
 *
 * \details
 * 1 = enabled
 * 0 = not enabled
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FCR . INGR_FC_BUFFER_FAULT_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FCR_INGR_FC_BUFFER_FAULT_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FCR_INGR_FC_BUFFER_FAULT_EN  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FCR_INGR_FC_BUFFER_FAULT_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief INGR_FC_BUFFER ECC Error Address Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EADDR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EADDR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf034)

/**
 * \brief
 * address of last error (sec or ded) occurred
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EADDR . INGR_FC_BUFFER_ERR_ADDR
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EADDR_INGR_FC_BUFFER_ERR_ADDR(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EADDR_INGR_FC_BUFFER_ERR_ADDR     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EADDR_INGR_FC_BUFFER_ERR_ADDR(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)


/**
 * \brief INGR_FC_BUFFER ECC Error Data Pointer Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EDPTR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EDPTR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf035)

/**
 * \brief
 * bit number of corrected bit, read back 0 if DED.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EDPTR . INGR_FC_BUFFER_ERR_DPTR
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EDPTR_INGR_FC_BUFFER_ERR_DPTR(x)  LAN80XX_ENCODE_BITFIELD(x,0,7)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EDPTR_INGR_FC_BUFFER_ERR_DPTR     LAN80XX_ENCODE_BITMASK(0,7)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_EDPTR_INGR_FC_BUFFER_ERR_DPTR(x)  LAN80XX_EXTRACT_BITFIELD(x,0,7)


/**
 * \brief INGR_FC_BUFFER ECC SEC Count Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SCNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SCNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf036)

/**
 * \brief
 * number of single bit errors.this counter can be cleared by
 * INGR_FC_BUFFER_SWRST or INGR_FC_BUFFER_CNTRST
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SCNT . INGR_FC_BUFFER_SEC_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SCNT_INGR_FC_BUFFER_SEC_CNT(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SCNT_INGR_FC_BUFFER_SEC_CNT     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_SCNT_INGR_FC_BUFFER_SEC_CNT(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief INGR_FC_BUFFER ECC DED Count Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_DCNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_DCNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf037)

/**
 * \brief
 * number of double bit errors.this counter can be cleared by
 * INGR_FC_BUFFER_SWRST or INGR_FC_BUFFER_CNTRST
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_DCNT . INGR_FC_BUFFER_DED_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_DCNT_INGR_FC_BUFFER_DED_CNT(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_DCNT_INGR_FC_BUFFER_DED_CNT     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_DCNT_INGR_FC_BUFFER_DED_CNT(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief INGR_FC_BUFFER ECC Interrupt Enable Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf038)

/**
 * \brief
 * fault read interrupt enable
 *
 * \details
 * 1: enable
 * 0: disable
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN . INGR_FC_BUFFER_FAULT_READ_INTR_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN_INGR_FC_BUFFER_FAULT_READ_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN_INGR_FC_BUFFER_FAULT_READ_INTR_EN  LAN80XX_BIT(3)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN_INGR_FC_BUFFER_FAULT_READ_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Double Error Detection interrupt enable
 *
 * \details
 * 1: enable
 * 0: disable
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN . INGR_FC_BUFFER_DED_INTR_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN_INGR_FC_BUFFER_DED_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN_INGR_FC_BUFFER_DED_INTR_EN  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN_INGR_FC_BUFFER_DED_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Single Error Correction interrupt enable
 *
 * \details
 * 1: enable
 * 0: disable
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN . INGR_FC_BUFFER_SEC_INTR_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN_INGR_FC_BUFFER_SEC_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN_INGR_FC_BUFFER_SEC_INTR_EN  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_EN_INGR_FC_BUFFER_SEC_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief INGR_FC_BUFFER ECC Interrupt Status Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf039)

/**
 * \brief
 * fault read interrupt status
 *
 * \details
 * this bit is set by fault read event, write 1 will clear this bit
 * 1 = interrupt is pending
 * 0 = no interrupt is pending
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS . INGR_FC_BUFFER_FAULT_READ_INTR_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS_INGR_FC_BUFFER_FAULT_READ_INTR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS_INGR_FC_BUFFER_FAULT_READ_INTR_STICKY  LAN80XX_BIT(3)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS_INGR_FC_BUFFER_FAULT_READ_INTR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Double Error Detection interrupt status
 *
 * \details
 * this bit is set by double-bit detect event, write 1 will clear this bit
 * 1 = interrupt is pending
 * 0 = no interrupt is pending
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS . INGR_FC_BUFFER_DED_INTR_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS_INGR_FC_BUFFER_DED_INTR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS_INGR_FC_BUFFER_DED_INTR_STICKY  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS_INGR_FC_BUFFER_DED_INTR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Single Error Correction interrupt status
 *
 * \details
 * this bit is set by single-bit error event, write 1 will clear this bit
 * 1 = interrupt is pending
 * 0 = no interrupt is pending
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS . INGR_FC_BUFFER_SEC_INTR_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS_INGR_FC_BUFFER_SEC_INTR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS_INGR_FC_BUFFER_SEC_INTR_STICKY  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_INTR_STS_INGR_FC_BUFFER_SEC_INTR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief INGR_FC_BUFFER ECC Fault Address Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FADDR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FADDR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf03c)

/**
 * \brief
 * the address to inject the fault
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FADDR . INGR_FC_BUFFER_FAULT_ADDR
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FADDR_INGR_FC_BUFFER_FAULT_ADDR(x)  LAN80XX_ENCODE_BITFIELD(x,0,8)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FADDR_INGR_FC_BUFFER_FAULT_ADDR     LAN80XX_ENCODE_BITMASK(0,8)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FADDR_INGR_FC_BUFFER_FAULT_ADDR(x)  LAN80XX_EXTRACT_BITFIELD(x,0,8)


/**
 * \brief INGR_FC_BUFFER ECC Fault Data Pointer Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC:MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FDPTR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FDPTR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf03d)

/**
 * \brief
 * the bit number to inject the fault
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FDPTR . INGR_FC_BUFFER_FAULT_DPTR
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FDPTR_INGR_FC_BUFFER_FAULT_DPTR(x)  LAN80XX_ENCODE_BITFIELD(x,0,7)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FDPTR_INGR_FC_BUFFER_FAULT_DPTR     LAN80XX_ENCODE_BITMASK(0,7)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_INGR_FC_BUFFER_ECC_FDPTR_INGR_FC_BUFFER_FAULT_DPTR(x)  LAN80XX_EXTRACT_BITFIELD(x,0,7)

/**
 * Register Group: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC
 *
 * EGR_FC_BUFFER ECC registers
 */


/**
 * \brief EGR_FC_BUFFER ECC Control Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf040)

/**
 * \brief
 * Disable ECC decoder features
 *
 * \details
 * Write 1 cause event
 * Write 0  no effect
 * always read 0
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL . EGR_FC_BUFFER_ECC_EN_CLR
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_ECC_EN_CLR(x)  LAN80XX_ENCODE_BITFIELD(!!(x),16,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_ECC_EN_CLR  LAN80XX_BIT(16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_ECC_EN_CLR(x)  LAN80XX_EXTRACT_BITFIELD(x,16,1)

/**
 * \brief
 * Reset error counters
 *
 * \details
 * Write 1 cause event
 * Write 0  no effect
 * always read 0
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL . EGR_FC_BUFFER_CNTRST
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_CNTRST(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_CNTRST  LAN80XX_BIT(3)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_CNTRST(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Soft reset ECC controller core logic
 *
 * \details
 * Write 1 cause event
 * Write 0  no effect
 * always read 0
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL . EGR_FC_BUFFER_SWRST
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_SWRST(x)  LAN80XX_ENCODE_BITFIELD(!!(x),2,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_SWRST  LAN80XX_BIT(2)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_SWRST(x)  LAN80XX_EXTRACT_BITFIELD(x,2,1)

/**
 * \brief
 * initial SRAM with all 0s
 *
 * \details
 * Write 1 cause event
 * Write 0  no effect
 * always read 0
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL . EGR_FC_BUFFER_INIT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_INIT(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_INIT  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_INIT(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Enable ECC decoder features
 *
 * \details
 * Write 1 cause event
 * Write 0  no effect
 * always read 0
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL . EGR_FC_BUFFER_ECC_EN_SET
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_ECC_EN_SET(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_ECC_EN_SET  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_CTL_EGR_FC_BUFFER_ECC_EN_SET(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief EGR_FC_BUFFER ECC Status Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf041)

/**
 * \brief
 * SRAM initialization in progress
 *
 * \details
 * 1 = in progress
 * 0 = not in progress
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SR . EGR_FC_BUFFER_INIT_BUSY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SR_EGR_FC_BUFFER_INIT_BUSY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SR_EGR_FC_BUFFER_INIT_BUSY  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SR_EGR_FC_BUFFER_INIT_BUSY(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * ECC decoder features are currently enabled
 *
 * \details
 * 1 = enabled
 * 0 = not enabled
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SR . EGR_FC_BUFFER_ECC_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SR_EGR_FC_BUFFER_ECC_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SR_EGR_FC_BUFFER_ECC_EN  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SR_EGR_FC_BUFFER_ECC_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief EGR_FC_BUFFER ECC Initialization Done Interrupt Enable register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf044)

/**
 * \brief
 * initialization done interrupt enable
 *
 * \details
 * 1: enable
 * 0: disable
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN . EGR_FC_BUFFER_INIT_DONE_INTR_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN_EGR_FC_BUFFER_INIT_DONE_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN_EGR_FC_BUFFER_INIT_DONE_INTR_EN  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_EN_EGR_FC_BUFFER_INIT_DONE_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief EGR_FC_BUFFER ECC Initialization Done Interrupt Status register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf045)

/**
 * \brief
 * initialization done status bit
 *
 * \details
 * this bit is set by initialization done event, write 1 will clear this
 * bit
 * 0 = interrupt not pending
 * 1 = interrupt pending

 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS . EGR_FC_BUFFER_INIT_DONE_INTR_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS_EGR_FC_BUFFER_INIT_DONE_INTR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS_EGR_FC_BUFFER_INIT_DONE_INTR_STICKY  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INIT_DONE_INTR_STS_EGR_FC_BUFFER_INIT_DONE_INTR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief EGR_FC_BUFFER ECC Fault Configuration Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FCR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FCR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf050)

/**
 * \brief
 * Select double bit or single bit fault injection
 *
 * \details
 * if corresponding EGR_FC_BUFFER_LN_FAULT_EN is set
 * 1 = inject double bit fault
 * 0 = inject single bit fault
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FCR . EGR_FC_BUFFER_FAULT_DBL
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FCR_EGR_FC_BUFFER_FAULT_DBL(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FCR_EGR_FC_BUFFER_FAULT_DBL  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FCR_EGR_FC_BUFFER_FAULT_DBL(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * enable fault injection controller
 *
 * \details
 * 1 = enabled
 * 0 = not enabled
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FCR . EGR_FC_BUFFER_FAULT_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FCR_EGR_FC_BUFFER_FAULT_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FCR_EGR_FC_BUFFER_FAULT_EN  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FCR_EGR_FC_BUFFER_FAULT_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief EGR_FC_BUFFER ECC Error Address Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EADDR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EADDR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf054)

/**
 * \brief
 * address of last error (sec or ded) occurred
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EADDR . EGR_FC_BUFFER_ERR_ADDR
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EADDR_EGR_FC_BUFFER_ERR_ADDR(x)  LAN80XX_ENCODE_BITFIELD(x,0,13)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EADDR_EGR_FC_BUFFER_ERR_ADDR     LAN80XX_ENCODE_BITMASK(0,13)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EADDR_EGR_FC_BUFFER_ERR_ADDR(x)  LAN80XX_EXTRACT_BITFIELD(x,0,13)


/**
 * \brief EGR_FC_BUFFER ECC Error Data Pointer Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EDPTR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EDPTR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf055)

/**
 * \brief
 * bit number of corrected bit, read back 0 if DED.
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EDPTR . EGR_FC_BUFFER_ERR_DPTR
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EDPTR_EGR_FC_BUFFER_ERR_DPTR(x)  LAN80XX_ENCODE_BITFIELD(x,0,7)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EDPTR_EGR_FC_BUFFER_ERR_DPTR     LAN80XX_ENCODE_BITMASK(0,7)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_EDPTR_EGR_FC_BUFFER_ERR_DPTR(x)  LAN80XX_EXTRACT_BITFIELD(x,0,7)


/**
 * \brief EGR_FC_BUFFER ECC SEC Count Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SCNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SCNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf056)

/**
 * \brief
 * number of single bit errors.this counter can be cleared by
 * EGR_FC_BUFFER_SWRST or EGR_FC_BUFFER_CNTRST
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SCNT . EGR_FC_BUFFER_SEC_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SCNT_EGR_FC_BUFFER_SEC_CNT(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SCNT_EGR_FC_BUFFER_SEC_CNT     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_SCNT_EGR_FC_BUFFER_SEC_CNT(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief EGR_FC_BUFFER ECC DED Count Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_DCNT
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_DCNT  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf057)

/**
 * \brief
 * number of double bit errors.this counter can be cleared by
 * EGR_FC_BUFFER_SWRST or EGR_FC_BUFFER_CNTRST
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_DCNT . EGR_FC_BUFFER_DED_CNT
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_DCNT_EGR_FC_BUFFER_DED_CNT(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_DCNT_EGR_FC_BUFFER_DED_CNT     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_DCNT_EGR_FC_BUFFER_DED_CNT(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief EGR_FC_BUFFER ECC Interrupt Enable Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf058)

/**
 * \brief
 * fault read interrupt enable
 *
 * \details
 * 1: enable
 * 0: disable
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN . EGR_FC_BUFFER_FAULT_READ_INTR_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN_EGR_FC_BUFFER_FAULT_READ_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN_EGR_FC_BUFFER_FAULT_READ_INTR_EN  LAN80XX_BIT(3)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN_EGR_FC_BUFFER_FAULT_READ_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Double Error Detection interrupt enable
 *
 * \details
 * 1: enable
 * 0: disable
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN . EGR_FC_BUFFER_DED_INTR_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN_EGR_FC_BUFFER_DED_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN_EGR_FC_BUFFER_DED_INTR_EN  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN_EGR_FC_BUFFER_DED_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Single Error Correction interrupt enable
 *
 * \details
 * 1: enable
 * 0: disable
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN . EGR_FC_BUFFER_SEC_INTR_EN
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN_EGR_FC_BUFFER_SEC_INTR_EN(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN_EGR_FC_BUFFER_SEC_INTR_EN  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_EN_EGR_FC_BUFFER_SEC_INTR_EN(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief EGR_FC_BUFFER ECC Interrupt Status Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf059)

/**
 * \brief
 * fault read interrupt status
 *
 * \details
 * this bit is set by fault read event, write 1 will clear this bit
 * 1 = interrupt is pending
 * 0 = no interrupt is pending
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS . EGR_FC_BUFFER_FAULT_READ_INTR_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS_EGR_FC_BUFFER_FAULT_READ_INTR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),3,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS_EGR_FC_BUFFER_FAULT_READ_INTR_STICKY  LAN80XX_BIT(3)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS_EGR_FC_BUFFER_FAULT_READ_INTR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,3,1)

/**
 * \brief
 * Double Error Detection interrupt status
 *
 * \details
 * this bit is set by double-bit detect event, write 1 will clear this bit
 * 1 = interrupt is pending
 * 0 = no interrupt is pending
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS . EGR_FC_BUFFER_DED_INTR_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS_EGR_FC_BUFFER_DED_INTR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),1,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS_EGR_FC_BUFFER_DED_INTR_STICKY  LAN80XX_BIT(1)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS_EGR_FC_BUFFER_DED_INTR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,1,1)

/**
 * \brief
 * Single Error Correction interrupt status
 *
 * \details
 * this bit is set by single-bit error event, write 1 will clear this bit
 * 1 = interrupt is pending
 * 0 = no interrupt is pending
 *
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS . EGR_FC_BUFFER_SEC_INTR_STICKY
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS_EGR_FC_BUFFER_SEC_INTR_STICKY(x)  LAN80XX_ENCODE_BITFIELD(!!(x),0,1)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS_EGR_FC_BUFFER_SEC_INTR_STICKY  LAN80XX_BIT(0)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_INTR_STS_EGR_FC_BUFFER_SEC_INTR_STICKY(x)  LAN80XX_EXTRACT_BITFIELD(x,0,1)


/**
 * \brief EGR_FC_BUFFER ECC Fault Address Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FADDR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FADDR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf05c)

/**
 * \brief
 * the address to inject the fault
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FADDR . EGR_FC_BUFFER_FAULT_ADDR
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FADDR_EGR_FC_BUFFER_FAULT_ADDR(x)  LAN80XX_ENCODE_BITFIELD(x,0,13)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FADDR_EGR_FC_BUFFER_FAULT_ADDR     LAN80XX_ENCODE_BITMASK(0,13)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FADDR_EGR_FC_BUFFER_FAULT_ADDR(x)  LAN80XX_EXTRACT_BITFIELD(x,0,13)


/**
 * \brief EGR_FC_BUFFER ECC Fault Data Pointer Register
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC:MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FDPTR
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FDPTR  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf05d)

/**
 * \brief
 * the bit number to inject the fault
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FDPTR . EGR_FC_BUFFER_FAULT_DPTR
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FDPTR_EGR_FC_BUFFER_FAULT_DPTR(x)  LAN80XX_ENCODE_BITFIELD(x,0,7)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FDPTR_EGR_FC_BUFFER_FAULT_DPTR     LAN80XX_ENCODE_BITMASK(0,7)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_EGR_FC_BUFFER_ECC_FDPTR_EGR_FC_BUFFER_FAULT_DPTR(x)  LAN80XX_EXTRACT_BITFIELD(x,0,7)

/**
 * Register Group: \a MAC_FC_BUFFER:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG
 *
 * MAC_FC_BUFFER debug registers
 */


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG0
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG0  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf078)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG0 . MAC_FC_BUFFER_DEBUG0
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG0_MAC_FC_BUFFER_DEBUG0(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG0_MAC_FC_BUFFER_DEBUG0     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG0_MAC_FC_BUFFER_DEBUG0(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG1
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG1  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf079)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG1 . MAC_FC_BUFFER_DEBUG1
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG1_MAC_FC_BUFFER_DEBUG1(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG1_MAC_FC_BUFFER_DEBUG1     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG1_MAC_FC_BUFFER_DEBUG1(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG2
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG2  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf07a)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG2 . MAC_FC_BUFFER_DEBUG2
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG2_MAC_FC_BUFFER_DEBUG2(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG2_MAC_FC_BUFFER_DEBUG2     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG2_MAC_FC_BUFFER_DEBUG2(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG3
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG3  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf07b)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG3 . MAC_FC_BUFFER_DEBUG3
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG3_MAC_FC_BUFFER_DEBUG3(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG3_MAC_FC_BUFFER_DEBUG3     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG3_MAC_FC_BUFFER_DEBUG3(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG4
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG4  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf07c)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG4 . MAC_FC_BUFFER_DEBUG4
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG4_MAC_FC_BUFFER_DEBUG4(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG4_MAC_FC_BUFFER_DEBUG4     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG4_MAC_FC_BUFFER_DEBUG4(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG5
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG5  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf07d)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG5 . MAC_FC_BUFFER_DEBUG5
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG5_MAC_FC_BUFFER_DEBUG5(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG5_MAC_FC_BUFFER_DEBUG5     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG5_MAC_FC_BUFFER_DEBUG5(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for latched debug data
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG6
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG6  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf07e)

/**
 * \brief
 * Place holder, for latched debug data
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG6 . MAC_FC_BUFFER_DEBUG6
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG6_MAC_FC_BUFFER_DEBUG6(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG6_MAC_FC_BUFFER_DEBUG6     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG6_MAC_FC_BUFFER_DEBUG6(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


/**
 * \brief Place holder, for trigger condition
 *
 * \details
 * Register: \a MAC_FC_BUFFER:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG:MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG7
 */
#define LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG7  LAN80XX_IOREG(MMD_ID_MAC_FC_BUFF, 1, 0xf07f)

/**
 * \brief
 * Place holder, for trigger condition
 *
 * \details
 * Field: ::LAN80XX_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG7 . MAC_FC_BUFFER_DEBUG7
 */
#define  LAN80XX_F_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG7_MAC_FC_BUFFER_DEBUG7(x)  LAN80XX_ENCODE_BITFIELD(x,0,16)
#define  LAN80XX_M_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG7_MAC_FC_BUFFER_DEBUG7     LAN80XX_ENCODE_BITMASK(0,16)
#define  LAN80XX_X_MAC_FC_BUFFER_MAC_FC_BUFFER_MAC_FC_BUFFER_DEBUG7_MAC_FC_BUFFER_DEBUG7(x)  LAN80XX_EXTRACT_BITFIELD(x,0,16)


#endif /* _LAN80XX_MALIBU25G_REGS_MAC_FC_BUFFER_H_ */
